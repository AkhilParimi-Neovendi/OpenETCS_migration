#ifndef TESTBENCH_INTEGRATION_TYPES_CONVERSION
#define TESTBENCH_INTEGRATION_TYPES_CONVERSION

#include "SmuTypes.h"

/****************************************************************
 ** _100_array 
 ****************************************************************/
extern int _100_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__100_array_string(const char *str, char **endptr);
extern int string_to__100_array(const char *str, void *pValue, char **endptr);
extern int is__100_array_double_conversion_allowed();
extern int _100_array_to_double(const void *pValue, double *nValue);
extern int is__100_array_long_conversion_allowed();
extern int _100_array_to_long(const void *pValue, long *nValue);
extern void compare__100_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__100_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__100_array(void *pValue);
extern int release__100_array(void *pValue);
extern int copy__100_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__100_array_Utils;

/****************************************************************
 ** _101_array 
 ****************************************************************/
extern int _101_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__101_array_string(const char *str, char **endptr);
extern int string_to__101_array(const char *str, void *pValue, char **endptr);
extern int is__101_array_double_conversion_allowed();
extern int _101_array_to_double(const void *pValue, double *nValue);
extern int is__101_array_long_conversion_allowed();
extern int _101_array_to_long(const void *pValue, long *nValue);
extern void compare__101_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__101_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__101_array(void *pValue);
extern int release__101_array(void *pValue);
extern int copy__101_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__101_array_Utils;

/****************************************************************
 ** _102_array 
 ****************************************************************/
extern int _102_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__102_array_string(const char *str, char **endptr);
extern int string_to__102_array(const char *str, void *pValue, char **endptr);
extern int is__102_array_double_conversion_allowed();
extern int _102_array_to_double(const void *pValue, double *nValue);
extern int is__102_array_long_conversion_allowed();
extern int _102_array_to_long(const void *pValue, long *nValue);
extern void compare__102_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__102_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__102_array(void *pValue);
extern int release__102_array(void *pValue);
extern int copy__102_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__102_array_Utils;

/****************************************************************
 ** _103_array 
 ****************************************************************/
extern int _103_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__103_array_string(const char *str, char **endptr);
extern int string_to__103_array(const char *str, void *pValue, char **endptr);
extern int is__103_array_double_conversion_allowed();
extern int _103_array_to_double(const void *pValue, double *nValue);
extern int is__103_array_long_conversion_allowed();
extern int _103_array_to_long(const void *pValue, long *nValue);
extern void compare__103_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__103_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__103_array(void *pValue);
extern int release__103_array(void *pValue);
extern int copy__103_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__103_array_Utils;

/****************************************************************
 ** _104_array 
 ****************************************************************/
extern int _104_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__104_array_string(const char *str, char **endptr);
extern int string_to__104_array(const char *str, void *pValue, char **endptr);
extern int is__104_array_double_conversion_allowed();
extern int _104_array_to_double(const void *pValue, double *nValue);
extern int is__104_array_long_conversion_allowed();
extern int _104_array_to_long(const void *pValue, long *nValue);
extern void compare__104_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__104_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__104_array(void *pValue);
extern int release__104_array(void *pValue);
extern int copy__104_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__104_array_Utils;

/****************************************************************
 ** _105_array 
 ****************************************************************/
extern int _105_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__105_array_string(const char *str, char **endptr);
extern int string_to__105_array(const char *str, void *pValue, char **endptr);
extern int is__105_array_double_conversion_allowed();
extern int _105_array_to_double(const void *pValue, double *nValue);
extern int is__105_array_long_conversion_allowed();
extern int _105_array_to_long(const void *pValue, long *nValue);
extern void compare__105_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__105_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__105_array(void *pValue);
extern int release__105_array(void *pValue);
extern int copy__105_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__105_array_Utils;

/****************************************************************
 ** _106_array 
 ****************************************************************/
extern int _106_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__106_array_string(const char *str, char **endptr);
extern int string_to__106_array(const char *str, void *pValue, char **endptr);
extern int is__106_array_double_conversion_allowed();
extern int _106_array_to_double(const void *pValue, double *nValue);
extern int is__106_array_long_conversion_allowed();
extern int _106_array_to_long(const void *pValue, long *nValue);
extern void compare__106_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__106_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__106_array(void *pValue);
extern int release__106_array(void *pValue);
extern int copy__106_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__106_array_Utils;

/****************************************************************
 ** _107_array 
 ****************************************************************/
extern int _107_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__107_array_string(const char *str, char **endptr);
extern int string_to__107_array(const char *str, void *pValue, char **endptr);
extern int is__107_array_double_conversion_allowed();
extern int _107_array_to_double(const void *pValue, double *nValue);
extern int is__107_array_long_conversion_allowed();
extern int _107_array_to_long(const void *pValue, long *nValue);
extern void compare__107_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__107_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__107_array(void *pValue);
extern int release__107_array(void *pValue);
extern int copy__107_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__107_array_Utils;

/****************************************************************
 ** _108_array 
 ****************************************************************/
extern int _108_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__108_array_string(const char *str, char **endptr);
extern int string_to__108_array(const char *str, void *pValue, char **endptr);
extern int is__108_array_double_conversion_allowed();
extern int _108_array_to_double(const void *pValue, double *nValue);
extern int is__108_array_long_conversion_allowed();
extern int _108_array_to_long(const void *pValue, long *nValue);
extern void compare__108_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__108_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__108_array(void *pValue);
extern int release__108_array(void *pValue);
extern int copy__108_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__108_array_Utils;

/****************************************************************
 ** _109_array 
 ****************************************************************/
extern int _109_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__109_array_string(const char *str, char **endptr);
extern int string_to__109_array(const char *str, void *pValue, char **endptr);
extern int is__109_array_double_conversion_allowed();
extern int _109_array_to_double(const void *pValue, double *nValue);
extern int is__109_array_long_conversion_allowed();
extern int _109_array_to_long(const void *pValue, long *nValue);
extern void compare__109_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__109_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__109_array(void *pValue);
extern int release__109_array(void *pValue);
extern int copy__109_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__109_array_Utils;

/****************************************************************
 ** _10_array 
 ****************************************************************/
extern int _10_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__10_array_string(const char *str, char **endptr);
extern int string_to__10_array(const char *str, void *pValue, char **endptr);
extern int is__10_array_double_conversion_allowed();
extern int _10_array_to_double(const void *pValue, double *nValue);
extern int is__10_array_long_conversion_allowed();
extern int _10_array_to_long(const void *pValue, long *nValue);
extern void compare__10_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__10_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__10_array(void *pValue);
extern int release__10_array(void *pValue);
extern int copy__10_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__10_array_Utils;

/****************************************************************
 ** _110_array 
 ****************************************************************/
extern int _110_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__110_array_string(const char *str, char **endptr);
extern int string_to__110_array(const char *str, void *pValue, char **endptr);
extern int is__110_array_double_conversion_allowed();
extern int _110_array_to_double(const void *pValue, double *nValue);
extern int is__110_array_long_conversion_allowed();
extern int _110_array_to_long(const void *pValue, long *nValue);
extern void compare__110_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__110_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__110_array(void *pValue);
extern int release__110_array(void *pValue);
extern int copy__110_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__110_array_Utils;

/****************************************************************
 ** _111_array 
 ****************************************************************/
extern int _111_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__111_array_string(const char *str, char **endptr);
extern int string_to__111_array(const char *str, void *pValue, char **endptr);
extern int is__111_array_double_conversion_allowed();
extern int _111_array_to_double(const void *pValue, double *nValue);
extern int is__111_array_long_conversion_allowed();
extern int _111_array_to_long(const void *pValue, long *nValue);
extern void compare__111_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__111_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__111_array(void *pValue);
extern int release__111_array(void *pValue);
extern int copy__111_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__111_array_Utils;

/****************************************************************
 ** _112_SSM_ST_SM1 
 ****************************************************************/
extern int _112_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__112_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__112_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__112_SSM_ST_SM1_double_conversion_allowed();
extern int _112_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__112_SSM_ST_SM1_long_conversion_allowed();
extern int _112_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__112_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__112_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__112_SSM_ST_SM1(void *pValue);
extern int release__112_SSM_ST_SM1(void *pValue);
extern int copy__112_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__112_SSM_ST_SM1_Utils;

/****************************************************************
 ** _113_SSM_TR_SM1 
 ****************************************************************/
extern int _113_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__113_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__113_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__113_SSM_TR_SM1_double_conversion_allowed();
extern int _113_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__113_SSM_TR_SM1_long_conversion_allowed();
extern int _113_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__113_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__113_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__113_SSM_TR_SM1(void *pValue);
extern int release__113_SSM_TR_SM1(void *pValue);
extern int copy__113_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__113_SSM_TR_SM1_Utils;

/****************************************************************
 ** _114_SSM_ST_SM1 
 ****************************************************************/
extern int _114_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__114_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__114_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__114_SSM_ST_SM1_double_conversion_allowed();
extern int _114_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__114_SSM_ST_SM1_long_conversion_allowed();
extern int _114_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__114_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__114_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__114_SSM_ST_SM1(void *pValue);
extern int release__114_SSM_ST_SM1(void *pValue);
extern int copy__114_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__114_SSM_ST_SM1_Utils;

/****************************************************************
 ** _115_SSM_TR_SM1 
 ****************************************************************/
extern int _115_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__115_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__115_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__115_SSM_TR_SM1_double_conversion_allowed();
extern int _115_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__115_SSM_TR_SM1_long_conversion_allowed();
extern int _115_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__115_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__115_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__115_SSM_TR_SM1(void *pValue);
extern int release__115_SSM_TR_SM1(void *pValue);
extern int copy__115_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__115_SSM_TR_SM1_Utils;

/****************************************************************
 ** _116_SSM_ST_SM1 
 ****************************************************************/
extern int _116_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__116_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__116_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__116_SSM_ST_SM1_double_conversion_allowed();
extern int _116_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__116_SSM_ST_SM1_long_conversion_allowed();
extern int _116_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__116_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__116_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__116_SSM_ST_SM1(void *pValue);
extern int release__116_SSM_ST_SM1(void *pValue);
extern int copy__116_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__116_SSM_ST_SM1_Utils;

/****************************************************************
 ** _117_SSM_TR_SM1 
 ****************************************************************/
extern int _117_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__117_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__117_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__117_SSM_TR_SM1_double_conversion_allowed();
extern int _117_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__117_SSM_TR_SM1_long_conversion_allowed();
extern int _117_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__117_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__117_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__117_SSM_TR_SM1(void *pValue);
extern int release__117_SSM_TR_SM1(void *pValue);
extern int copy__117_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__117_SSM_TR_SM1_Utils;

/****************************************************************
 ** _118_SSM_ST_SM1 
 ****************************************************************/
extern int _118_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__118_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__118_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__118_SSM_ST_SM1_double_conversion_allowed();
extern int _118_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__118_SSM_ST_SM1_long_conversion_allowed();
extern int _118_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__118_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__118_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__118_SSM_ST_SM1(void *pValue);
extern int release__118_SSM_ST_SM1(void *pValue);
extern int copy__118_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__118_SSM_ST_SM1_Utils;

/****************************************************************
 ** _119_SSM_TR_SM1 
 ****************************************************************/
extern int _119_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__119_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__119_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__119_SSM_TR_SM1_double_conversion_allowed();
extern int _119_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__119_SSM_TR_SM1_long_conversion_allowed();
extern int _119_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__119_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__119_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__119_SSM_TR_SM1(void *pValue);
extern int release__119_SSM_TR_SM1(void *pValue);
extern int copy__119_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__119_SSM_TR_SM1_Utils;

/****************************************************************
 ** _11_array 
 ****************************************************************/
extern int _11_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__11_array_string(const char *str, char **endptr);
extern int string_to__11_array(const char *str, void *pValue, char **endptr);
extern int is__11_array_double_conversion_allowed();
extern int _11_array_to_double(const void *pValue, double *nValue);
extern int is__11_array_long_conversion_allowed();
extern int _11_array_to_long(const void *pValue, long *nValue);
extern void compare__11_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__11_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__11_array(void *pValue);
extern int release__11_array(void *pValue);
extern int copy__11_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__11_array_Utils;

/****************************************************************
 ** _120_SSM_ST_SM1 
 ****************************************************************/
extern int _120_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__120_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__120_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__120_SSM_ST_SM1_double_conversion_allowed();
extern int _120_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__120_SSM_ST_SM1_long_conversion_allowed();
extern int _120_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__120_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__120_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__120_SSM_ST_SM1(void *pValue);
extern int release__120_SSM_ST_SM1(void *pValue);
extern int copy__120_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__120_SSM_ST_SM1_Utils;

/****************************************************************
 ** _121_SSM_TR_SM1 
 ****************************************************************/
extern int _121_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__121_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__121_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__121_SSM_TR_SM1_double_conversion_allowed();
extern int _121_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__121_SSM_TR_SM1_long_conversion_allowed();
extern int _121_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__121_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__121_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__121_SSM_TR_SM1(void *pValue);
extern int release__121_SSM_TR_SM1(void *pValue);
extern int copy__121_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__121_SSM_TR_SM1_Utils;

/****************************************************************
 ** _122_SSM_ST_SM1 
 ****************************************************************/
extern int _122_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__122_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__122_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__122_SSM_ST_SM1_double_conversion_allowed();
extern int _122_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__122_SSM_ST_SM1_long_conversion_allowed();
extern int _122_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__122_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__122_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__122_SSM_ST_SM1(void *pValue);
extern int release__122_SSM_ST_SM1(void *pValue);
extern int copy__122_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__122_SSM_ST_SM1_Utils;

/****************************************************************
 ** _123_SSM_TR_SM1 
 ****************************************************************/
extern int _123_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__123_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__123_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__123_SSM_TR_SM1_double_conversion_allowed();
extern int _123_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__123_SSM_TR_SM1_long_conversion_allowed();
extern int _123_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__123_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__123_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__123_SSM_TR_SM1(void *pValue);
extern int release__123_SSM_TR_SM1(void *pValue);
extern int copy__123_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__123_SSM_TR_SM1_Utils;

/****************************************************************
 ** _124_SSM_ST_SM1 
 ****************************************************************/
extern int _124_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__124_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__124_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__124_SSM_ST_SM1_double_conversion_allowed();
extern int _124_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__124_SSM_ST_SM1_long_conversion_allowed();
extern int _124_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__124_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__124_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__124_SSM_ST_SM1(void *pValue);
extern int release__124_SSM_ST_SM1(void *pValue);
extern int copy__124_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__124_SSM_ST_SM1_Utils;

/****************************************************************
 ** _125_SSM_TR_SM1 
 ****************************************************************/
extern int _125_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__125_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__125_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__125_SSM_TR_SM1_double_conversion_allowed();
extern int _125_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__125_SSM_TR_SM1_long_conversion_allowed();
extern int _125_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__125_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__125_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__125_SSM_TR_SM1(void *pValue);
extern int release__125_SSM_TR_SM1(void *pValue);
extern int copy__125_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__125_SSM_TR_SM1_Utils;

/****************************************************************
 ** _126_SSM_ST_SM1 
 ****************************************************************/
extern int _126_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__126_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__126_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__126_SSM_ST_SM1_double_conversion_allowed();
extern int _126_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__126_SSM_ST_SM1_long_conversion_allowed();
extern int _126_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__126_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__126_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__126_SSM_ST_SM1(void *pValue);
extern int release__126_SSM_ST_SM1(void *pValue);
extern int copy__126_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__126_SSM_ST_SM1_Utils;

/****************************************************************
 ** _127_SSM_TR_SM1 
 ****************************************************************/
extern int _127_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__127_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__127_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__127_SSM_TR_SM1_double_conversion_allowed();
extern int _127_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__127_SSM_TR_SM1_long_conversion_allowed();
extern int _127_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__127_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__127_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__127_SSM_TR_SM1(void *pValue);
extern int release__127_SSM_TR_SM1(void *pValue);
extern int copy__127_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__127_SSM_TR_SM1_Utils;

/****************************************************************
 ** _128_SSM_ST_SM1 
 ****************************************************************/
extern int _128_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__128_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__128_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__128_SSM_ST_SM1_double_conversion_allowed();
extern int _128_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__128_SSM_ST_SM1_long_conversion_allowed();
extern int _128_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__128_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__128_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__128_SSM_ST_SM1(void *pValue);
extern int release__128_SSM_ST_SM1(void *pValue);
extern int copy__128_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__128_SSM_ST_SM1_Utils;

/****************************************************************
 ** _129_SSM_TR_SM1 
 ****************************************************************/
extern int _129_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__129_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__129_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__129_SSM_TR_SM1_double_conversion_allowed();
extern int _129_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__129_SSM_TR_SM1_long_conversion_allowed();
extern int _129_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__129_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__129_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__129_SSM_TR_SM1(void *pValue);
extern int release__129_SSM_TR_SM1(void *pValue);
extern int copy__129_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__129_SSM_TR_SM1_Utils;

/****************************************************************
 ** _12_array 
 ****************************************************************/
extern int _12_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__12_array_string(const char *str, char **endptr);
extern int string_to__12_array(const char *str, void *pValue, char **endptr);
extern int is__12_array_double_conversion_allowed();
extern int _12_array_to_double(const void *pValue, double *nValue);
extern int is__12_array_long_conversion_allowed();
extern int _12_array_to_long(const void *pValue, long *nValue);
extern void compare__12_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__12_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__12_array(void *pValue);
extern int release__12_array(void *pValue);
extern int copy__12_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__12_array_Utils;

/****************************************************************
 ** _130_SSM_ST_SM1 
 ****************************************************************/
extern int _130_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__130_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__130_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__130_SSM_ST_SM1_double_conversion_allowed();
extern int _130_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__130_SSM_ST_SM1_long_conversion_allowed();
extern int _130_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__130_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__130_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__130_SSM_ST_SM1(void *pValue);
extern int release__130_SSM_ST_SM1(void *pValue);
extern int copy__130_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__130_SSM_ST_SM1_Utils;

/****************************************************************
 ** _131_SSM_TR_SM1 
 ****************************************************************/
extern int _131_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__131_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__131_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__131_SSM_TR_SM1_double_conversion_allowed();
extern int _131_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__131_SSM_TR_SM1_long_conversion_allowed();
extern int _131_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__131_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__131_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__131_SSM_TR_SM1(void *pValue);
extern int release__131_SSM_TR_SM1(void *pValue);
extern int copy__131_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__131_SSM_TR_SM1_Utils;

/****************************************************************
 ** _132_SSM_ST_SM1 
 ****************************************************************/
extern int _132_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__132_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__132_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__132_SSM_ST_SM1_double_conversion_allowed();
extern int _132_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__132_SSM_ST_SM1_long_conversion_allowed();
extern int _132_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__132_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__132_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__132_SSM_ST_SM1(void *pValue);
extern int release__132_SSM_ST_SM1(void *pValue);
extern int copy__132_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__132_SSM_ST_SM1_Utils;

/****************************************************************
 ** _133_SSM_TR_SM1 
 ****************************************************************/
extern int _133_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__133_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__133_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__133_SSM_TR_SM1_double_conversion_allowed();
extern int _133_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__133_SSM_TR_SM1_long_conversion_allowed();
extern int _133_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__133_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__133_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__133_SSM_TR_SM1(void *pValue);
extern int release__133_SSM_TR_SM1(void *pValue);
extern int copy__133_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__133_SSM_TR_SM1_Utils;

/****************************************************************
 ** _134_SSM_ST_SM1 
 ****************************************************************/
extern int _134_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__134_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__134_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__134_SSM_ST_SM1_double_conversion_allowed();
extern int _134_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__134_SSM_ST_SM1_long_conversion_allowed();
extern int _134_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__134_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__134_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__134_SSM_ST_SM1(void *pValue);
extern int release__134_SSM_ST_SM1(void *pValue);
extern int copy__134_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__134_SSM_ST_SM1_Utils;

/****************************************************************
 ** _135_SSM_TR_SM1 
 ****************************************************************/
extern int _135_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__135_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__135_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__135_SSM_TR_SM1_double_conversion_allowed();
extern int _135_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__135_SSM_TR_SM1_long_conversion_allowed();
extern int _135_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__135_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__135_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__135_SSM_TR_SM1(void *pValue);
extern int release__135_SSM_TR_SM1(void *pValue);
extern int copy__135_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__135_SSM_TR_SM1_Utils;

/****************************************************************
 ** _136_SSM_ST_SM1 
 ****************************************************************/
extern int _136_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__136_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__136_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__136_SSM_ST_SM1_double_conversion_allowed();
extern int _136_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__136_SSM_ST_SM1_long_conversion_allowed();
extern int _136_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__136_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__136_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__136_SSM_ST_SM1(void *pValue);
extern int release__136_SSM_ST_SM1(void *pValue);
extern int copy__136_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__136_SSM_ST_SM1_Utils;

/****************************************************************
 ** _137_SSM_TR_SM1 
 ****************************************************************/
extern int _137_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__137_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__137_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__137_SSM_TR_SM1_double_conversion_allowed();
extern int _137_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__137_SSM_TR_SM1_long_conversion_allowed();
extern int _137_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__137_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__137_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__137_SSM_TR_SM1(void *pValue);
extern int release__137_SSM_TR_SM1(void *pValue);
extern int copy__137_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__137_SSM_TR_SM1_Utils;

/****************************************************************
 ** _138_SSM_ST_SM1 
 ****************************************************************/
extern int _138_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__138_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__138_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__138_SSM_ST_SM1_double_conversion_allowed();
extern int _138_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__138_SSM_ST_SM1_long_conversion_allowed();
extern int _138_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__138_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__138_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__138_SSM_ST_SM1(void *pValue);
extern int release__138_SSM_ST_SM1(void *pValue);
extern int copy__138_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__138_SSM_ST_SM1_Utils;

/****************************************************************
 ** _139_SSM_TR_SM1 
 ****************************************************************/
extern int _139_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__139_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__139_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__139_SSM_TR_SM1_double_conversion_allowed();
extern int _139_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__139_SSM_TR_SM1_long_conversion_allowed();
extern int _139_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__139_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__139_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__139_SSM_TR_SM1(void *pValue);
extern int release__139_SSM_TR_SM1(void *pValue);
extern int copy__139_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__139_SSM_TR_SM1_Utils;

/****************************************************************
 ** _13_array 
 ****************************************************************/
extern int _13_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__13_array_string(const char *str, char **endptr);
extern int string_to__13_array(const char *str, void *pValue, char **endptr);
extern int is__13_array_double_conversion_allowed();
extern int _13_array_to_double(const void *pValue, double *nValue);
extern int is__13_array_long_conversion_allowed();
extern int _13_array_to_long(const void *pValue, long *nValue);
extern void compare__13_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__13_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__13_array(void *pValue);
extern int release__13_array(void *pValue);
extern int copy__13_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__13_array_Utils;

/****************************************************************
 ** _140_SSM_ST_SM1 
 ****************************************************************/
extern int _140_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__140_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__140_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__140_SSM_ST_SM1_double_conversion_allowed();
extern int _140_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__140_SSM_ST_SM1_long_conversion_allowed();
extern int _140_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__140_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__140_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__140_SSM_ST_SM1(void *pValue);
extern int release__140_SSM_ST_SM1(void *pValue);
extern int copy__140_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__140_SSM_ST_SM1_Utils;

/****************************************************************
 ** _141_SSM_TR_SM1 
 ****************************************************************/
extern int _141_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__141_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__141_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__141_SSM_TR_SM1_double_conversion_allowed();
extern int _141_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__141_SSM_TR_SM1_long_conversion_allowed();
extern int _141_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__141_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__141_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__141_SSM_TR_SM1(void *pValue);
extern int release__141_SSM_TR_SM1(void *pValue);
extern int copy__141_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__141_SSM_TR_SM1_Utils;

/****************************************************************
 ** _142_SSM_ST_SM1 
 ****************************************************************/
extern int _142_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__142_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__142_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__142_SSM_ST_SM1_double_conversion_allowed();
extern int _142_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__142_SSM_ST_SM1_long_conversion_allowed();
extern int _142_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__142_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__142_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__142_SSM_ST_SM1(void *pValue);
extern int release__142_SSM_ST_SM1(void *pValue);
extern int copy__142_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__142_SSM_ST_SM1_Utils;

/****************************************************************
 ** _143_SSM_TR_SM1 
 ****************************************************************/
extern int _143_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__143_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__143_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__143_SSM_TR_SM1_double_conversion_allowed();
extern int _143_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__143_SSM_TR_SM1_long_conversion_allowed();
extern int _143_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__143_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__143_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__143_SSM_TR_SM1(void *pValue);
extern int release__143_SSM_TR_SM1(void *pValue);
extern int copy__143_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__143_SSM_TR_SM1_Utils;

/****************************************************************
 ** _14_array 
 ****************************************************************/
extern int _14_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__14_array_string(const char *str, char **endptr);
extern int string_to__14_array(const char *str, void *pValue, char **endptr);
extern int is__14_array_double_conversion_allowed();
extern int _14_array_to_double(const void *pValue, double *nValue);
extern int is__14_array_long_conversion_allowed();
extern int _14_array_to_long(const void *pValue, long *nValue);
extern void compare__14_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__14_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__14_array(void *pValue);
extern int release__14_array(void *pValue);
extern int copy__14_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__14_array_Utils;

/****************************************************************
 ** _15_array 
 ****************************************************************/
extern int _15_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__15_array_string(const char *str, char **endptr);
extern int string_to__15_array(const char *str, void *pValue, char **endptr);
extern int is__15_array_double_conversion_allowed();
extern int _15_array_to_double(const void *pValue, double *nValue);
extern int is__15_array_long_conversion_allowed();
extern int _15_array_to_long(const void *pValue, long *nValue);
extern void compare__15_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__15_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__15_array(void *pValue);
extern int release__15_array(void *pValue);
extern int copy__15_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__15_array_Utils;

/****************************************************************
 ** _16_array 
 ****************************************************************/
extern int _16_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__16_array_string(const char *str, char **endptr);
extern int string_to__16_array(const char *str, void *pValue, char **endptr);
extern int is__16_array_double_conversion_allowed();
extern int _16_array_to_double(const void *pValue, double *nValue);
extern int is__16_array_long_conversion_allowed();
extern int _16_array_to_long(const void *pValue, long *nValue);
extern void compare__16_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__16_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__16_array(void *pValue);
extern int release__16_array(void *pValue);
extern int copy__16_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__16_array_Utils;

/****************************************************************
 ** _17_array 
 ****************************************************************/
extern int _17_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__17_array_string(const char *str, char **endptr);
extern int string_to__17_array(const char *str, void *pValue, char **endptr);
extern int is__17_array_double_conversion_allowed();
extern int _17_array_to_double(const void *pValue, double *nValue);
extern int is__17_array_long_conversion_allowed();
extern int _17_array_to_long(const void *pValue, long *nValue);
extern void compare__17_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__17_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__17_array(void *pValue);
extern int release__17_array(void *pValue);
extern int copy__17_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__17_array_Utils;

/****************************************************************
 ** _18_array 
 ****************************************************************/
extern int _18_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__18_array_string(const char *str, char **endptr);
extern int string_to__18_array(const char *str, void *pValue, char **endptr);
extern int is__18_array_double_conversion_allowed();
extern int _18_array_to_double(const void *pValue, double *nValue);
extern int is__18_array_long_conversion_allowed();
extern int _18_array_to_long(const void *pValue, long *nValue);
extern void compare__18_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__18_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__18_array(void *pValue);
extern int release__18_array(void *pValue);
extern int copy__18_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__18_array_Utils;

/****************************************************************
 ** _19_array 
 ****************************************************************/
extern int _19_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__19_array_string(const char *str, char **endptr);
extern int string_to__19_array(const char *str, void *pValue, char **endptr);
extern int is__19_array_double_conversion_allowed();
extern int _19_array_to_double(const void *pValue, double *nValue);
extern int is__19_array_long_conversion_allowed();
extern int _19_array_to_long(const void *pValue, long *nValue);
extern void compare__19_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__19_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__19_array(void *pValue);
extern int release__19_array(void *pValue);
extern int copy__19_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__19_array_Utils;

/****************************************************************
 ** _20_array 
 ****************************************************************/
extern int _20_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__20_array_string(const char *str, char **endptr);
extern int string_to__20_array(const char *str, void *pValue, char **endptr);
extern int is__20_array_double_conversion_allowed();
extern int _20_array_to_double(const void *pValue, double *nValue);
extern int is__20_array_long_conversion_allowed();
extern int _20_array_to_long(const void *pValue, long *nValue);
extern void compare__20_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__20_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__20_array(void *pValue);
extern int release__20_array(void *pValue);
extern int copy__20_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__20_array_Utils;

/****************************************************************
 ** _21_array 
 ****************************************************************/
extern int _21_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__21_array_string(const char *str, char **endptr);
extern int string_to__21_array(const char *str, void *pValue, char **endptr);
extern int is__21_array_double_conversion_allowed();
extern int _21_array_to_double(const void *pValue, double *nValue);
extern int is__21_array_long_conversion_allowed();
extern int _21_array_to_long(const void *pValue, long *nValue);
extern void compare__21_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__21_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__21_array(void *pValue);
extern int release__21_array(void *pValue);
extern int copy__21_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__21_array_Utils;

/****************************************************************
 ** _22_array 
 ****************************************************************/
extern int _22_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__22_array_string(const char *str, char **endptr);
extern int string_to__22_array(const char *str, void *pValue, char **endptr);
extern int is__22_array_double_conversion_allowed();
extern int _22_array_to_double(const void *pValue, double *nValue);
extern int is__22_array_long_conversion_allowed();
extern int _22_array_to_long(const void *pValue, long *nValue);
extern void compare__22_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__22_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__22_array(void *pValue);
extern int release__22_array(void *pValue);
extern int copy__22_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__22_array_Utils;

/****************************************************************
 ** _23_array 
 ****************************************************************/
extern int _23_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__23_array_string(const char *str, char **endptr);
extern int string_to__23_array(const char *str, void *pValue, char **endptr);
extern int is__23_array_double_conversion_allowed();
extern int _23_array_to_double(const void *pValue, double *nValue);
extern int is__23_array_long_conversion_allowed();
extern int _23_array_to_long(const void *pValue, long *nValue);
extern void compare__23_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__23_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__23_array(void *pValue);
extern int release__23_array(void *pValue);
extern int copy__23_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__23_array_Utils;

/****************************************************************
 ** _24_array 
 ****************************************************************/
extern int _24_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__24_array_string(const char *str, char **endptr);
extern int string_to__24_array(const char *str, void *pValue, char **endptr);
extern int is__24_array_double_conversion_allowed();
extern int _24_array_to_double(const void *pValue, double *nValue);
extern int is__24_array_long_conversion_allowed();
extern int _24_array_to_long(const void *pValue, long *nValue);
extern void compare__24_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__24_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__24_array(void *pValue);
extern int release__24_array(void *pValue);
extern int copy__24_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__24_array_Utils;

/****************************************************************
 ** _25_array 
 ****************************************************************/
extern int _25_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__25_array_string(const char *str, char **endptr);
extern int string_to__25_array(const char *str, void *pValue, char **endptr);
extern int is__25_array_double_conversion_allowed();
extern int _25_array_to_double(const void *pValue, double *nValue);
extern int is__25_array_long_conversion_allowed();
extern int _25_array_to_long(const void *pValue, long *nValue);
extern void compare__25_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__25_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__25_array(void *pValue);
extern int release__25_array(void *pValue);
extern int copy__25_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__25_array_Utils;

/****************************************************************
 ** _26_array 
 ****************************************************************/
extern int _26_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__26_array_string(const char *str, char **endptr);
extern int string_to__26_array(const char *str, void *pValue, char **endptr);
extern int is__26_array_double_conversion_allowed();
extern int _26_array_to_double(const void *pValue, double *nValue);
extern int is__26_array_long_conversion_allowed();
extern int _26_array_to_long(const void *pValue, long *nValue);
extern void compare__26_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__26_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__26_array(void *pValue);
extern int release__26_array(void *pValue);
extern int copy__26_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__26_array_Utils;

/****************************************************************
 ** _27_array 
 ****************************************************************/
extern int _27_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__27_array_string(const char *str, char **endptr);
extern int string_to__27_array(const char *str, void *pValue, char **endptr);
extern int is__27_array_double_conversion_allowed();
extern int _27_array_to_double(const void *pValue, double *nValue);
extern int is__27_array_long_conversion_allowed();
extern int _27_array_to_long(const void *pValue, long *nValue);
extern void compare__27_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__27_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__27_array(void *pValue);
extern int release__27_array(void *pValue);
extern int copy__27_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__27_array_Utils;

/****************************************************************
 ** _28_array 
 ****************************************************************/
extern int _28_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__28_array_string(const char *str, char **endptr);
extern int string_to__28_array(const char *str, void *pValue, char **endptr);
extern int is__28_array_double_conversion_allowed();
extern int _28_array_to_double(const void *pValue, double *nValue);
extern int is__28_array_long_conversion_allowed();
extern int _28_array_to_long(const void *pValue, long *nValue);
extern void compare__28_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__28_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__28_array(void *pValue);
extern int release__28_array(void *pValue);
extern int copy__28_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__28_array_Utils;

/****************************************************************
 ** _29_array 
 ****************************************************************/
extern int _29_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__29_array_string(const char *str, char **endptr);
extern int string_to__29_array(const char *str, void *pValue, char **endptr);
extern int is__29_array_double_conversion_allowed();
extern int _29_array_to_double(const void *pValue, double *nValue);
extern int is__29_array_long_conversion_allowed();
extern int _29_array_to_long(const void *pValue, long *nValue);
extern void compare__29_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__29_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__29_array(void *pValue);
extern int release__29_array(void *pValue);
extern int copy__29_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__29_array_Utils;

/****************************************************************
 ** _2_array 
 ****************************************************************/
extern int _2_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__2_array_string(const char *str, char **endptr);
extern int string_to__2_array(const char *str, void *pValue, char **endptr);
extern int is__2_array_double_conversion_allowed();
extern int _2_array_to_double(const void *pValue, double *nValue);
extern int is__2_array_long_conversion_allowed();
extern int _2_array_to_long(const void *pValue, long *nValue);
extern void compare__2_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__2_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__2_array(void *pValue);
extern int release__2_array(void *pValue);
extern int copy__2_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__2_array_Utils;

/****************************************************************
 ** _30_array 
 ****************************************************************/
extern int _30_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__30_array_string(const char *str, char **endptr);
extern int string_to__30_array(const char *str, void *pValue, char **endptr);
extern int is__30_array_double_conversion_allowed();
extern int _30_array_to_double(const void *pValue, double *nValue);
extern int is__30_array_long_conversion_allowed();
extern int _30_array_to_long(const void *pValue, long *nValue);
extern void compare__30_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__30_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__30_array(void *pValue);
extern int release__30_array(void *pValue);
extern int copy__30_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__30_array_Utils;

/****************************************************************
 ** _31_array 
 ****************************************************************/
extern int _31_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__31_array_string(const char *str, char **endptr);
extern int string_to__31_array(const char *str, void *pValue, char **endptr);
extern int is__31_array_double_conversion_allowed();
extern int _31_array_to_double(const void *pValue, double *nValue);
extern int is__31_array_long_conversion_allowed();
extern int _31_array_to_long(const void *pValue, long *nValue);
extern void compare__31_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__31_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__31_array(void *pValue);
extern int release__31_array(void *pValue);
extern int copy__31_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__31_array_Utils;

/****************************************************************
 ** _32_array 
 ****************************************************************/
extern int _32_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__32_array_string(const char *str, char **endptr);
extern int string_to__32_array(const char *str, void *pValue, char **endptr);
extern int is__32_array_double_conversion_allowed();
extern int _32_array_to_double(const void *pValue, double *nValue);
extern int is__32_array_long_conversion_allowed();
extern int _32_array_to_long(const void *pValue, long *nValue);
extern void compare__32_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__32_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__32_array(void *pValue);
extern int release__32_array(void *pValue);
extern int copy__32_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__32_array_Utils;

/****************************************************************
 ** _33_array 
 ****************************************************************/
extern int _33_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__33_array_string(const char *str, char **endptr);
extern int string_to__33_array(const char *str, void *pValue, char **endptr);
extern int is__33_array_double_conversion_allowed();
extern int _33_array_to_double(const void *pValue, double *nValue);
extern int is__33_array_long_conversion_allowed();
extern int _33_array_to_long(const void *pValue, long *nValue);
extern void compare__33_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__33_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__33_array(void *pValue);
extern int release__33_array(void *pValue);
extern int copy__33_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__33_array_Utils;

/****************************************************************
 ** _34_array 
 ****************************************************************/
extern int _34_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__34_array_string(const char *str, char **endptr);
extern int string_to__34_array(const char *str, void *pValue, char **endptr);
extern int is__34_array_double_conversion_allowed();
extern int _34_array_to_double(const void *pValue, double *nValue);
extern int is__34_array_long_conversion_allowed();
extern int _34_array_to_long(const void *pValue, long *nValue);
extern void compare__34_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__34_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__34_array(void *pValue);
extern int release__34_array(void *pValue);
extern int copy__34_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__34_array_Utils;

/****************************************************************
 ** _35_array 
 ****************************************************************/
extern int _35_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__35_array_string(const char *str, char **endptr);
extern int string_to__35_array(const char *str, void *pValue, char **endptr);
extern int is__35_array_double_conversion_allowed();
extern int _35_array_to_double(const void *pValue, double *nValue);
extern int is__35_array_long_conversion_allowed();
extern int _35_array_to_long(const void *pValue, long *nValue);
extern void compare__35_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__35_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__35_array(void *pValue);
extern int release__35_array(void *pValue);
extern int copy__35_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__35_array_Utils;

/****************************************************************
 ** _36_array 
 ****************************************************************/
extern int _36_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__36_array_string(const char *str, char **endptr);
extern int string_to__36_array(const char *str, void *pValue, char **endptr);
extern int is__36_array_double_conversion_allowed();
extern int _36_array_to_double(const void *pValue, double *nValue);
extern int is__36_array_long_conversion_allowed();
extern int _36_array_to_long(const void *pValue, long *nValue);
extern void compare__36_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__36_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__36_array(void *pValue);
extern int release__36_array(void *pValue);
extern int copy__36_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__36_array_Utils;

/****************************************************************
 ** _37_array 
 ****************************************************************/
extern int _37_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__37_array_string(const char *str, char **endptr);
extern int string_to__37_array(const char *str, void *pValue, char **endptr);
extern int is__37_array_double_conversion_allowed();
extern int _37_array_to_double(const void *pValue, double *nValue);
extern int is__37_array_long_conversion_allowed();
extern int _37_array_to_long(const void *pValue, long *nValue);
extern void compare__37_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__37_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__37_array(void *pValue);
extern int release__37_array(void *pValue);
extern int copy__37_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__37_array_Utils;

/****************************************************************
 ** _38_array 
 ****************************************************************/
extern int _38_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__38_array_string(const char *str, char **endptr);
extern int string_to__38_array(const char *str, void *pValue, char **endptr);
extern int is__38_array_double_conversion_allowed();
extern int _38_array_to_double(const void *pValue, double *nValue);
extern int is__38_array_long_conversion_allowed();
extern int _38_array_to_long(const void *pValue, long *nValue);
extern void compare__38_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__38_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__38_array(void *pValue);
extern int release__38_array(void *pValue);
extern int copy__38_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__38_array_Utils;

/****************************************************************
 ** _39_array 
 ****************************************************************/
extern int _39_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__39_array_string(const char *str, char **endptr);
extern int string_to__39_array(const char *str, void *pValue, char **endptr);
extern int is__39_array_double_conversion_allowed();
extern int _39_array_to_double(const void *pValue, double *nValue);
extern int is__39_array_long_conversion_allowed();
extern int _39_array_to_long(const void *pValue, long *nValue);
extern void compare__39_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__39_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__39_array(void *pValue);
extern int release__39_array(void *pValue);
extern int copy__39_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__39_array_Utils;

/****************************************************************
 ** _3_array 
 ****************************************************************/
extern int _3_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__3_array_string(const char *str, char **endptr);
extern int string_to__3_array(const char *str, void *pValue, char **endptr);
extern int is__3_array_double_conversion_allowed();
extern int _3_array_to_double(const void *pValue, double *nValue);
extern int is__3_array_long_conversion_allowed();
extern int _3_array_to_long(const void *pValue, long *nValue);
extern void compare__3_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__3_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__3_array(void *pValue);
extern int release__3_array(void *pValue);
extern int copy__3_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__3_array_Utils;

/****************************************************************
 ** _40_array 
 ****************************************************************/
extern int _40_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__40_array_string(const char *str, char **endptr);
extern int string_to__40_array(const char *str, void *pValue, char **endptr);
extern int is__40_array_double_conversion_allowed();
extern int _40_array_to_double(const void *pValue, double *nValue);
extern int is__40_array_long_conversion_allowed();
extern int _40_array_to_long(const void *pValue, long *nValue);
extern void compare__40_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__40_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__40_array(void *pValue);
extern int release__40_array(void *pValue);
extern int copy__40_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__40_array_Utils;

/****************************************************************
 ** _41_array 
 ****************************************************************/
extern int _41_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__41_array_string(const char *str, char **endptr);
extern int string_to__41_array(const char *str, void *pValue, char **endptr);
extern int is__41_array_double_conversion_allowed();
extern int _41_array_to_double(const void *pValue, double *nValue);
extern int is__41_array_long_conversion_allowed();
extern int _41_array_to_long(const void *pValue, long *nValue);
extern void compare__41_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__41_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__41_array(void *pValue);
extern int release__41_array(void *pValue);
extern int copy__41_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__41_array_Utils;

/****************************************************************
 ** _42_array 
 ****************************************************************/
extern int _42_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__42_array_string(const char *str, char **endptr);
extern int string_to__42_array(const char *str, void *pValue, char **endptr);
extern int is__42_array_double_conversion_allowed();
extern int _42_array_to_double(const void *pValue, double *nValue);
extern int is__42_array_long_conversion_allowed();
extern int _42_array_to_long(const void *pValue, long *nValue);
extern void compare__42_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__42_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__42_array(void *pValue);
extern int release__42_array(void *pValue);
extern int copy__42_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__42_array_Utils;

/****************************************************************
 ** _43_array 
 ****************************************************************/
extern int _43_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__43_array_string(const char *str, char **endptr);
extern int string_to__43_array(const char *str, void *pValue, char **endptr);
extern int is__43_array_double_conversion_allowed();
extern int _43_array_to_double(const void *pValue, double *nValue);
extern int is__43_array_long_conversion_allowed();
extern int _43_array_to_long(const void *pValue, long *nValue);
extern void compare__43_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__43_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__43_array(void *pValue);
extern int release__43_array(void *pValue);
extern int copy__43_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__43_array_Utils;

/****************************************************************
 ** _44_array 
 ****************************************************************/
extern int _44_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__44_array_string(const char *str, char **endptr);
extern int string_to__44_array(const char *str, void *pValue, char **endptr);
extern int is__44_array_double_conversion_allowed();
extern int _44_array_to_double(const void *pValue, double *nValue);
extern int is__44_array_long_conversion_allowed();
extern int _44_array_to_long(const void *pValue, long *nValue);
extern void compare__44_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__44_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__44_array(void *pValue);
extern int release__44_array(void *pValue);
extern int copy__44_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__44_array_Utils;

/****************************************************************
 ** _45_array 
 ****************************************************************/
extern int _45_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__45_array_string(const char *str, char **endptr);
extern int string_to__45_array(const char *str, void *pValue, char **endptr);
extern int is__45_array_double_conversion_allowed();
extern int _45_array_to_double(const void *pValue, double *nValue);
extern int is__45_array_long_conversion_allowed();
extern int _45_array_to_long(const void *pValue, long *nValue);
extern void compare__45_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__45_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__45_array(void *pValue);
extern int release__45_array(void *pValue);
extern int copy__45_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__45_array_Utils;

/****************************************************************
 ** _46_array 
 ****************************************************************/
extern int _46_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__46_array_string(const char *str, char **endptr);
extern int string_to__46_array(const char *str, void *pValue, char **endptr);
extern int is__46_array_double_conversion_allowed();
extern int _46_array_to_double(const void *pValue, double *nValue);
extern int is__46_array_long_conversion_allowed();
extern int _46_array_to_long(const void *pValue, long *nValue);
extern void compare__46_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__46_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__46_array(void *pValue);
extern int release__46_array(void *pValue);
extern int copy__46_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__46_array_Utils;

/****************************************************************
 ** _47_array 
 ****************************************************************/
extern int _47_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__47_array_string(const char *str, char **endptr);
extern int string_to__47_array(const char *str, void *pValue, char **endptr);
extern int is__47_array_double_conversion_allowed();
extern int _47_array_to_double(const void *pValue, double *nValue);
extern int is__47_array_long_conversion_allowed();
extern int _47_array_to_long(const void *pValue, long *nValue);
extern void compare__47_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__47_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__47_array(void *pValue);
extern int release__47_array(void *pValue);
extern int copy__47_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__47_array_Utils;

/****************************************************************
 ** _48_array 
 ****************************************************************/
extern int _48_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__48_array_string(const char *str, char **endptr);
extern int string_to__48_array(const char *str, void *pValue, char **endptr);
extern int is__48_array_double_conversion_allowed();
extern int _48_array_to_double(const void *pValue, double *nValue);
extern int is__48_array_long_conversion_allowed();
extern int _48_array_to_long(const void *pValue, long *nValue);
extern void compare__48_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__48_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__48_array(void *pValue);
extern int release__48_array(void *pValue);
extern int copy__48_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__48_array_Utils;

/****************************************************************
 ** _49_array 
 ****************************************************************/
extern int _49_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__49_array_string(const char *str, char **endptr);
extern int string_to__49_array(const char *str, void *pValue, char **endptr);
extern int is__49_array_double_conversion_allowed();
extern int _49_array_to_double(const void *pValue, double *nValue);
extern int is__49_array_long_conversion_allowed();
extern int _49_array_to_long(const void *pValue, long *nValue);
extern void compare__49_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__49_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__49_array(void *pValue);
extern int release__49_array(void *pValue);
extern int copy__49_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__49_array_Utils;

/****************************************************************
 ** _4_array 
 ****************************************************************/
extern int _4_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__4_array_string(const char *str, char **endptr);
extern int string_to__4_array(const char *str, void *pValue, char **endptr);
extern int is__4_array_double_conversion_allowed();
extern int _4_array_to_double(const void *pValue, double *nValue);
extern int is__4_array_long_conversion_allowed();
extern int _4_array_to_long(const void *pValue, long *nValue);
extern void compare__4_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__4_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__4_array(void *pValue);
extern int release__4_array(void *pValue);
extern int copy__4_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__4_array_Utils;

/****************************************************************
 ** _50_array 
 ****************************************************************/
extern int _50_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__50_array_string(const char *str, char **endptr);
extern int string_to__50_array(const char *str, void *pValue, char **endptr);
extern int is__50_array_double_conversion_allowed();
extern int _50_array_to_double(const void *pValue, double *nValue);
extern int is__50_array_long_conversion_allowed();
extern int _50_array_to_long(const void *pValue, long *nValue);
extern void compare__50_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__50_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__50_array(void *pValue);
extern int release__50_array(void *pValue);
extern int copy__50_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__50_array_Utils;

/****************************************************************
 ** _51_array 
 ****************************************************************/
extern int _51_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__51_array_string(const char *str, char **endptr);
extern int string_to__51_array(const char *str, void *pValue, char **endptr);
extern int is__51_array_double_conversion_allowed();
extern int _51_array_to_double(const void *pValue, double *nValue);
extern int is__51_array_long_conversion_allowed();
extern int _51_array_to_long(const void *pValue, long *nValue);
extern void compare__51_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__51_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__51_array(void *pValue);
extern int release__51_array(void *pValue);
extern int copy__51_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__51_array_Utils;

/****************************************************************
 ** _52_array 
 ****************************************************************/
extern int _52_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__52_array_string(const char *str, char **endptr);
extern int string_to__52_array(const char *str, void *pValue, char **endptr);
extern int is__52_array_double_conversion_allowed();
extern int _52_array_to_double(const void *pValue, double *nValue);
extern int is__52_array_long_conversion_allowed();
extern int _52_array_to_long(const void *pValue, long *nValue);
extern void compare__52_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__52_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__52_array(void *pValue);
extern int release__52_array(void *pValue);
extern int copy__52_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__52_array_Utils;

/****************************************************************
 ** _53_array 
 ****************************************************************/
extern int _53_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__53_array_string(const char *str, char **endptr);
extern int string_to__53_array(const char *str, void *pValue, char **endptr);
extern int is__53_array_double_conversion_allowed();
extern int _53_array_to_double(const void *pValue, double *nValue);
extern int is__53_array_long_conversion_allowed();
extern int _53_array_to_long(const void *pValue, long *nValue);
extern void compare__53_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__53_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__53_array(void *pValue);
extern int release__53_array(void *pValue);
extern int copy__53_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__53_array_Utils;

/****************************************************************
 ** _54_array 
 ****************************************************************/
extern int _54_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__54_array_string(const char *str, char **endptr);
extern int string_to__54_array(const char *str, void *pValue, char **endptr);
extern int is__54_array_double_conversion_allowed();
extern int _54_array_to_double(const void *pValue, double *nValue);
extern int is__54_array_long_conversion_allowed();
extern int _54_array_to_long(const void *pValue, long *nValue);
extern void compare__54_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__54_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__54_array(void *pValue);
extern int release__54_array(void *pValue);
extern int copy__54_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__54_array_Utils;

/****************************************************************
 ** _55_array 
 ****************************************************************/
extern int _55_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__55_array_string(const char *str, char **endptr);
extern int string_to__55_array(const char *str, void *pValue, char **endptr);
extern int is__55_array_double_conversion_allowed();
extern int _55_array_to_double(const void *pValue, double *nValue);
extern int is__55_array_long_conversion_allowed();
extern int _55_array_to_long(const void *pValue, long *nValue);
extern void compare__55_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__55_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__55_array(void *pValue);
extern int release__55_array(void *pValue);
extern int copy__55_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__55_array_Utils;

/****************************************************************
 ** _56_array 
 ****************************************************************/
extern int _56_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__56_array_string(const char *str, char **endptr);
extern int string_to__56_array(const char *str, void *pValue, char **endptr);
extern int is__56_array_double_conversion_allowed();
extern int _56_array_to_double(const void *pValue, double *nValue);
extern int is__56_array_long_conversion_allowed();
extern int _56_array_to_long(const void *pValue, long *nValue);
extern void compare__56_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__56_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__56_array(void *pValue);
extern int release__56_array(void *pValue);
extern int copy__56_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__56_array_Utils;

/****************************************************************
 ** _57_array 
 ****************************************************************/
extern int _57_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__57_array_string(const char *str, char **endptr);
extern int string_to__57_array(const char *str, void *pValue, char **endptr);
extern int is__57_array_double_conversion_allowed();
extern int _57_array_to_double(const void *pValue, double *nValue);
extern int is__57_array_long_conversion_allowed();
extern int _57_array_to_long(const void *pValue, long *nValue);
extern void compare__57_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__57_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__57_array(void *pValue);
extern int release__57_array(void *pValue);
extern int copy__57_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__57_array_Utils;

/****************************************************************
 ** _58_array 
 ****************************************************************/
extern int _58_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__58_array_string(const char *str, char **endptr);
extern int string_to__58_array(const char *str, void *pValue, char **endptr);
extern int is__58_array_double_conversion_allowed();
extern int _58_array_to_double(const void *pValue, double *nValue);
extern int is__58_array_long_conversion_allowed();
extern int _58_array_to_long(const void *pValue, long *nValue);
extern void compare__58_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__58_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__58_array(void *pValue);
extern int release__58_array(void *pValue);
extern int copy__58_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__58_array_Utils;

/****************************************************************
 ** _59_array 
 ****************************************************************/
extern int _59_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__59_array_string(const char *str, char **endptr);
extern int string_to__59_array(const char *str, void *pValue, char **endptr);
extern int is__59_array_double_conversion_allowed();
extern int _59_array_to_double(const void *pValue, double *nValue);
extern int is__59_array_long_conversion_allowed();
extern int _59_array_to_long(const void *pValue, long *nValue);
extern void compare__59_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__59_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__59_array(void *pValue);
extern int release__59_array(void *pValue);
extern int copy__59_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__59_array_Utils;

/****************************************************************
 ** _5_array 
 ****************************************************************/
extern int _5_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__5_array_string(const char *str, char **endptr);
extern int string_to__5_array(const char *str, void *pValue, char **endptr);
extern int is__5_array_double_conversion_allowed();
extern int _5_array_to_double(const void *pValue, double *nValue);
extern int is__5_array_long_conversion_allowed();
extern int _5_array_to_long(const void *pValue, long *nValue);
extern void compare__5_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__5_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__5_array(void *pValue);
extern int release__5_array(void *pValue);
extern int copy__5_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__5_array_Utils;

/****************************************************************
 ** _60_array 
 ****************************************************************/
extern int _60_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__60_array_string(const char *str, char **endptr);
extern int string_to__60_array(const char *str, void *pValue, char **endptr);
extern int is__60_array_double_conversion_allowed();
extern int _60_array_to_double(const void *pValue, double *nValue);
extern int is__60_array_long_conversion_allowed();
extern int _60_array_to_long(const void *pValue, long *nValue);
extern void compare__60_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__60_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__60_array(void *pValue);
extern int release__60_array(void *pValue);
extern int copy__60_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__60_array_Utils;

/****************************************************************
 ** _61_array 
 ****************************************************************/
extern int _61_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__61_array_string(const char *str, char **endptr);
extern int string_to__61_array(const char *str, void *pValue, char **endptr);
extern int is__61_array_double_conversion_allowed();
extern int _61_array_to_double(const void *pValue, double *nValue);
extern int is__61_array_long_conversion_allowed();
extern int _61_array_to_long(const void *pValue, long *nValue);
extern void compare__61_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__61_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__61_array(void *pValue);
extern int release__61_array(void *pValue);
extern int copy__61_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__61_array_Utils;

/****************************************************************
 ** _62_array 
 ****************************************************************/
extern int _62_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__62_array_string(const char *str, char **endptr);
extern int string_to__62_array(const char *str, void *pValue, char **endptr);
extern int is__62_array_double_conversion_allowed();
extern int _62_array_to_double(const void *pValue, double *nValue);
extern int is__62_array_long_conversion_allowed();
extern int _62_array_to_long(const void *pValue, long *nValue);
extern void compare__62_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__62_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__62_array(void *pValue);
extern int release__62_array(void *pValue);
extern int copy__62_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__62_array_Utils;

/****************************************************************
 ** _63_array 
 ****************************************************************/
extern int _63_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__63_array_string(const char *str, char **endptr);
extern int string_to__63_array(const char *str, void *pValue, char **endptr);
extern int is__63_array_double_conversion_allowed();
extern int _63_array_to_double(const void *pValue, double *nValue);
extern int is__63_array_long_conversion_allowed();
extern int _63_array_to_long(const void *pValue, long *nValue);
extern void compare__63_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__63_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__63_array(void *pValue);
extern int release__63_array(void *pValue);
extern int copy__63_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__63_array_Utils;

/****************************************************************
 ** _64_array 
 ****************************************************************/
extern int _64_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__64_array_string(const char *str, char **endptr);
extern int string_to__64_array(const char *str, void *pValue, char **endptr);
extern int is__64_array_double_conversion_allowed();
extern int _64_array_to_double(const void *pValue, double *nValue);
extern int is__64_array_long_conversion_allowed();
extern int _64_array_to_long(const void *pValue, long *nValue);
extern void compare__64_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__64_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__64_array(void *pValue);
extern int release__64_array(void *pValue);
extern int copy__64_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__64_array_Utils;

/****************************************************************
 ** _65_array 
 ****************************************************************/
extern int _65_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__65_array_string(const char *str, char **endptr);
extern int string_to__65_array(const char *str, void *pValue, char **endptr);
extern int is__65_array_double_conversion_allowed();
extern int _65_array_to_double(const void *pValue, double *nValue);
extern int is__65_array_long_conversion_allowed();
extern int _65_array_to_long(const void *pValue, long *nValue);
extern void compare__65_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__65_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__65_array(void *pValue);
extern int release__65_array(void *pValue);
extern int copy__65_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__65_array_Utils;

/****************************************************************
 ** _66_array 
 ****************************************************************/
extern int _66_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__66_array_string(const char *str, char **endptr);
extern int string_to__66_array(const char *str, void *pValue, char **endptr);
extern int is__66_array_double_conversion_allowed();
extern int _66_array_to_double(const void *pValue, double *nValue);
extern int is__66_array_long_conversion_allowed();
extern int _66_array_to_long(const void *pValue, long *nValue);
extern void compare__66_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__66_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__66_array(void *pValue);
extern int release__66_array(void *pValue);
extern int copy__66_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__66_array_Utils;

/****************************************************************
 ** _67_array 
 ****************************************************************/
extern int _67_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__67_array_string(const char *str, char **endptr);
extern int string_to__67_array(const char *str, void *pValue, char **endptr);
extern int is__67_array_double_conversion_allowed();
extern int _67_array_to_double(const void *pValue, double *nValue);
extern int is__67_array_long_conversion_allowed();
extern int _67_array_to_long(const void *pValue, long *nValue);
extern void compare__67_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__67_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__67_array(void *pValue);
extern int release__67_array(void *pValue);
extern int copy__67_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__67_array_Utils;

/****************************************************************
 ** _68_array 
 ****************************************************************/
extern int _68_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__68_array_string(const char *str, char **endptr);
extern int string_to__68_array(const char *str, void *pValue, char **endptr);
extern int is__68_array_double_conversion_allowed();
extern int _68_array_to_double(const void *pValue, double *nValue);
extern int is__68_array_long_conversion_allowed();
extern int _68_array_to_long(const void *pValue, long *nValue);
extern void compare__68_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__68_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__68_array(void *pValue);
extern int release__68_array(void *pValue);
extern int copy__68_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__68_array_Utils;

/****************************************************************
 ** _69_array 
 ****************************************************************/
extern int _69_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__69_array_string(const char *str, char **endptr);
extern int string_to__69_array(const char *str, void *pValue, char **endptr);
extern int is__69_array_double_conversion_allowed();
extern int _69_array_to_double(const void *pValue, double *nValue);
extern int is__69_array_long_conversion_allowed();
extern int _69_array_to_long(const void *pValue, long *nValue);
extern void compare__69_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__69_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__69_array(void *pValue);
extern int release__69_array(void *pValue);
extern int copy__69_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__69_array_Utils;

/****************************************************************
 ** _6_array 
 ****************************************************************/
extern int _6_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__6_array_string(const char *str, char **endptr);
extern int string_to__6_array(const char *str, void *pValue, char **endptr);
extern int is__6_array_double_conversion_allowed();
extern int _6_array_to_double(const void *pValue, double *nValue);
extern int is__6_array_long_conversion_allowed();
extern int _6_array_to_long(const void *pValue, long *nValue);
extern void compare__6_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__6_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__6_array(void *pValue);
extern int release__6_array(void *pValue);
extern int copy__6_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__6_array_Utils;

/****************************************************************
 ** _70_array 
 ****************************************************************/
extern int _70_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__70_array_string(const char *str, char **endptr);
extern int string_to__70_array(const char *str, void *pValue, char **endptr);
extern int is__70_array_double_conversion_allowed();
extern int _70_array_to_double(const void *pValue, double *nValue);
extern int is__70_array_long_conversion_allowed();
extern int _70_array_to_long(const void *pValue, long *nValue);
extern void compare__70_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__70_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__70_array(void *pValue);
extern int release__70_array(void *pValue);
extern int copy__70_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__70_array_Utils;

/****************************************************************
 ** _71_array 
 ****************************************************************/
extern int _71_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__71_array_string(const char *str, char **endptr);
extern int string_to__71_array(const char *str, void *pValue, char **endptr);
extern int is__71_array_double_conversion_allowed();
extern int _71_array_to_double(const void *pValue, double *nValue);
extern int is__71_array_long_conversion_allowed();
extern int _71_array_to_long(const void *pValue, long *nValue);
extern void compare__71_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__71_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__71_array(void *pValue);
extern int release__71_array(void *pValue);
extern int copy__71_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__71_array_Utils;

/****************************************************************
 ** _72_array 
 ****************************************************************/
extern int _72_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__72_array_string(const char *str, char **endptr);
extern int string_to__72_array(const char *str, void *pValue, char **endptr);
extern int is__72_array_double_conversion_allowed();
extern int _72_array_to_double(const void *pValue, double *nValue);
extern int is__72_array_long_conversion_allowed();
extern int _72_array_to_long(const void *pValue, long *nValue);
extern void compare__72_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__72_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__72_array(void *pValue);
extern int release__72_array(void *pValue);
extern int copy__72_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__72_array_Utils;

/****************************************************************
 ** _73_array 
 ****************************************************************/
extern int _73_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__73_array_string(const char *str, char **endptr);
extern int string_to__73_array(const char *str, void *pValue, char **endptr);
extern int is__73_array_double_conversion_allowed();
extern int _73_array_to_double(const void *pValue, double *nValue);
extern int is__73_array_long_conversion_allowed();
extern int _73_array_to_long(const void *pValue, long *nValue);
extern void compare__73_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__73_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__73_array(void *pValue);
extern int release__73_array(void *pValue);
extern int copy__73_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__73_array_Utils;

/****************************************************************
 ** _74_array 
 ****************************************************************/
extern int _74_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__74_array_string(const char *str, char **endptr);
extern int string_to__74_array(const char *str, void *pValue, char **endptr);
extern int is__74_array_double_conversion_allowed();
extern int _74_array_to_double(const void *pValue, double *nValue);
extern int is__74_array_long_conversion_allowed();
extern int _74_array_to_long(const void *pValue, long *nValue);
extern void compare__74_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__74_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__74_array(void *pValue);
extern int release__74_array(void *pValue);
extern int copy__74_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__74_array_Utils;

/****************************************************************
 ** _75_array 
 ****************************************************************/
extern int _75_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__75_array_string(const char *str, char **endptr);
extern int string_to__75_array(const char *str, void *pValue, char **endptr);
extern int is__75_array_double_conversion_allowed();
extern int _75_array_to_double(const void *pValue, double *nValue);
extern int is__75_array_long_conversion_allowed();
extern int _75_array_to_long(const void *pValue, long *nValue);
extern void compare__75_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__75_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__75_array(void *pValue);
extern int release__75_array(void *pValue);
extern int copy__75_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__75_array_Utils;

/****************************************************************
 ** _76_array 
 ****************************************************************/
extern int _76_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__76_array_string(const char *str, char **endptr);
extern int string_to__76_array(const char *str, void *pValue, char **endptr);
extern int is__76_array_double_conversion_allowed();
extern int _76_array_to_double(const void *pValue, double *nValue);
extern int is__76_array_long_conversion_allowed();
extern int _76_array_to_long(const void *pValue, long *nValue);
extern void compare__76_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__76_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__76_array(void *pValue);
extern int release__76_array(void *pValue);
extern int copy__76_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__76_array_Utils;

/****************************************************************
 ** _77_array 
 ****************************************************************/
extern int _77_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__77_array_string(const char *str, char **endptr);
extern int string_to__77_array(const char *str, void *pValue, char **endptr);
extern int is__77_array_double_conversion_allowed();
extern int _77_array_to_double(const void *pValue, double *nValue);
extern int is__77_array_long_conversion_allowed();
extern int _77_array_to_long(const void *pValue, long *nValue);
extern void compare__77_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__77_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__77_array(void *pValue);
extern int release__77_array(void *pValue);
extern int copy__77_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__77_array_Utils;

/****************************************************************
 ** _78_array 
 ****************************************************************/
extern int _78_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__78_array_string(const char *str, char **endptr);
extern int string_to__78_array(const char *str, void *pValue, char **endptr);
extern int is__78_array_double_conversion_allowed();
extern int _78_array_to_double(const void *pValue, double *nValue);
extern int is__78_array_long_conversion_allowed();
extern int _78_array_to_long(const void *pValue, long *nValue);
extern void compare__78_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__78_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__78_array(void *pValue);
extern int release__78_array(void *pValue);
extern int copy__78_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__78_array_Utils;

/****************************************************************
 ** _79_array 
 ****************************************************************/
extern int _79_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__79_array_string(const char *str, char **endptr);
extern int string_to__79_array(const char *str, void *pValue, char **endptr);
extern int is__79_array_double_conversion_allowed();
extern int _79_array_to_double(const void *pValue, double *nValue);
extern int is__79_array_long_conversion_allowed();
extern int _79_array_to_long(const void *pValue, long *nValue);
extern void compare__79_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__79_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__79_array(void *pValue);
extern int release__79_array(void *pValue);
extern int copy__79_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__79_array_Utils;

/****************************************************************
 ** _7_array 
 ****************************************************************/
extern int _7_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__7_array_string(const char *str, char **endptr);
extern int string_to__7_array(const char *str, void *pValue, char **endptr);
extern int is__7_array_double_conversion_allowed();
extern int _7_array_to_double(const void *pValue, double *nValue);
extern int is__7_array_long_conversion_allowed();
extern int _7_array_to_long(const void *pValue, long *nValue);
extern void compare__7_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__7_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__7_array(void *pValue);
extern int release__7_array(void *pValue);
extern int copy__7_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__7_array_Utils;

/****************************************************************
 ** _80_array 
 ****************************************************************/
extern int _80_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__80_array_string(const char *str, char **endptr);
extern int string_to__80_array(const char *str, void *pValue, char **endptr);
extern int is__80_array_double_conversion_allowed();
extern int _80_array_to_double(const void *pValue, double *nValue);
extern int is__80_array_long_conversion_allowed();
extern int _80_array_to_long(const void *pValue, long *nValue);
extern void compare__80_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__80_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__80_array(void *pValue);
extern int release__80_array(void *pValue);
extern int copy__80_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__80_array_Utils;

/****************************************************************
 ** _81_array 
 ****************************************************************/
extern int _81_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__81_array_string(const char *str, char **endptr);
extern int string_to__81_array(const char *str, void *pValue, char **endptr);
extern int is__81_array_double_conversion_allowed();
extern int _81_array_to_double(const void *pValue, double *nValue);
extern int is__81_array_long_conversion_allowed();
extern int _81_array_to_long(const void *pValue, long *nValue);
extern void compare__81_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__81_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__81_array(void *pValue);
extern int release__81_array(void *pValue);
extern int copy__81_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__81_array_Utils;

/****************************************************************
 ** _82_array 
 ****************************************************************/
extern int _82_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__82_array_string(const char *str, char **endptr);
extern int string_to__82_array(const char *str, void *pValue, char **endptr);
extern int is__82_array_double_conversion_allowed();
extern int _82_array_to_double(const void *pValue, double *nValue);
extern int is__82_array_long_conversion_allowed();
extern int _82_array_to_long(const void *pValue, long *nValue);
extern void compare__82_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__82_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__82_array(void *pValue);
extern int release__82_array(void *pValue);
extern int copy__82_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__82_array_Utils;

/****************************************************************
 ** _83_array 
 ****************************************************************/
extern int _83_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__83_array_string(const char *str, char **endptr);
extern int string_to__83_array(const char *str, void *pValue, char **endptr);
extern int is__83_array_double_conversion_allowed();
extern int _83_array_to_double(const void *pValue, double *nValue);
extern int is__83_array_long_conversion_allowed();
extern int _83_array_to_long(const void *pValue, long *nValue);
extern void compare__83_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__83_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__83_array(void *pValue);
extern int release__83_array(void *pValue);
extern int copy__83_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__83_array_Utils;

/****************************************************************
 ** _84_array 
 ****************************************************************/
extern int _84_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__84_array_string(const char *str, char **endptr);
extern int string_to__84_array(const char *str, void *pValue, char **endptr);
extern int is__84_array_double_conversion_allowed();
extern int _84_array_to_double(const void *pValue, double *nValue);
extern int is__84_array_long_conversion_allowed();
extern int _84_array_to_long(const void *pValue, long *nValue);
extern void compare__84_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__84_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__84_array(void *pValue);
extern int release__84_array(void *pValue);
extern int copy__84_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__84_array_Utils;

/****************************************************************
 ** _85_array 
 ****************************************************************/
extern int _85_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__85_array_string(const char *str, char **endptr);
extern int string_to__85_array(const char *str, void *pValue, char **endptr);
extern int is__85_array_double_conversion_allowed();
extern int _85_array_to_double(const void *pValue, double *nValue);
extern int is__85_array_long_conversion_allowed();
extern int _85_array_to_long(const void *pValue, long *nValue);
extern void compare__85_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__85_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__85_array(void *pValue);
extern int release__85_array(void *pValue);
extern int copy__85_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__85_array_Utils;

/****************************************************************
 ** _86_array 
 ****************************************************************/
extern int _86_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__86_array_string(const char *str, char **endptr);
extern int string_to__86_array(const char *str, void *pValue, char **endptr);
extern int is__86_array_double_conversion_allowed();
extern int _86_array_to_double(const void *pValue, double *nValue);
extern int is__86_array_long_conversion_allowed();
extern int _86_array_to_long(const void *pValue, long *nValue);
extern void compare__86_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__86_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__86_array(void *pValue);
extern int release__86_array(void *pValue);
extern int copy__86_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__86_array_Utils;

/****************************************************************
 ** _87_array 
 ****************************************************************/
extern int _87_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__87_array_string(const char *str, char **endptr);
extern int string_to__87_array(const char *str, void *pValue, char **endptr);
extern int is__87_array_double_conversion_allowed();
extern int _87_array_to_double(const void *pValue, double *nValue);
extern int is__87_array_long_conversion_allowed();
extern int _87_array_to_long(const void *pValue, long *nValue);
extern void compare__87_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__87_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__87_array(void *pValue);
extern int release__87_array(void *pValue);
extern int copy__87_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__87_array_Utils;

/****************************************************************
 ** _88_array 
 ****************************************************************/
extern int _88_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__88_array_string(const char *str, char **endptr);
extern int string_to__88_array(const char *str, void *pValue, char **endptr);
extern int is__88_array_double_conversion_allowed();
extern int _88_array_to_double(const void *pValue, double *nValue);
extern int is__88_array_long_conversion_allowed();
extern int _88_array_to_long(const void *pValue, long *nValue);
extern void compare__88_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__88_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__88_array(void *pValue);
extern int release__88_array(void *pValue);
extern int copy__88_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__88_array_Utils;

/****************************************************************
 ** _89_array 
 ****************************************************************/
extern int _89_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__89_array_string(const char *str, char **endptr);
extern int string_to__89_array(const char *str, void *pValue, char **endptr);
extern int is__89_array_double_conversion_allowed();
extern int _89_array_to_double(const void *pValue, double *nValue);
extern int is__89_array_long_conversion_allowed();
extern int _89_array_to_long(const void *pValue, long *nValue);
extern void compare__89_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__89_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__89_array(void *pValue);
extern int release__89_array(void *pValue);
extern int copy__89_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__89_array_Utils;

/****************************************************************
 ** _8_array 
 ****************************************************************/
extern int _8_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__8_array_string(const char *str, char **endptr);
extern int string_to__8_array(const char *str, void *pValue, char **endptr);
extern int is__8_array_double_conversion_allowed();
extern int _8_array_to_double(const void *pValue, double *nValue);
extern int is__8_array_long_conversion_allowed();
extern int _8_array_to_long(const void *pValue, long *nValue);
extern void compare__8_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__8_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__8_array(void *pValue);
extern int release__8_array(void *pValue);
extern int copy__8_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__8_array_Utils;

/****************************************************************
 ** _90_array 
 ****************************************************************/
extern int _90_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__90_array_string(const char *str, char **endptr);
extern int string_to__90_array(const char *str, void *pValue, char **endptr);
extern int is__90_array_double_conversion_allowed();
extern int _90_array_to_double(const void *pValue, double *nValue);
extern int is__90_array_long_conversion_allowed();
extern int _90_array_to_long(const void *pValue, long *nValue);
extern void compare__90_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__90_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__90_array(void *pValue);
extern int release__90_array(void *pValue);
extern int copy__90_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__90_array_Utils;

/****************************************************************
 ** _91_array 
 ****************************************************************/
extern int _91_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__91_array_string(const char *str, char **endptr);
extern int string_to__91_array(const char *str, void *pValue, char **endptr);
extern int is__91_array_double_conversion_allowed();
extern int _91_array_to_double(const void *pValue, double *nValue);
extern int is__91_array_long_conversion_allowed();
extern int _91_array_to_long(const void *pValue, long *nValue);
extern void compare__91_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__91_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__91_array(void *pValue);
extern int release__91_array(void *pValue);
extern int copy__91_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__91_array_Utils;

/****************************************************************
 ** _92_array 
 ****************************************************************/
extern int _92_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__92_array_string(const char *str, char **endptr);
extern int string_to__92_array(const char *str, void *pValue, char **endptr);
extern int is__92_array_double_conversion_allowed();
extern int _92_array_to_double(const void *pValue, double *nValue);
extern int is__92_array_long_conversion_allowed();
extern int _92_array_to_long(const void *pValue, long *nValue);
extern void compare__92_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__92_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__92_array(void *pValue);
extern int release__92_array(void *pValue);
extern int copy__92_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__92_array_Utils;

/****************************************************************
 ** _93_array 
 ****************************************************************/
extern int _93_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__93_array_string(const char *str, char **endptr);
extern int string_to__93_array(const char *str, void *pValue, char **endptr);
extern int is__93_array_double_conversion_allowed();
extern int _93_array_to_double(const void *pValue, double *nValue);
extern int is__93_array_long_conversion_allowed();
extern int _93_array_to_long(const void *pValue, long *nValue);
extern void compare__93_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__93_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__93_array(void *pValue);
extern int release__93_array(void *pValue);
extern int copy__93_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__93_array_Utils;

/****************************************************************
 ** _94_array 
 ****************************************************************/
extern int _94_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__94_array_string(const char *str, char **endptr);
extern int string_to__94_array(const char *str, void *pValue, char **endptr);
extern int is__94_array_double_conversion_allowed();
extern int _94_array_to_double(const void *pValue, double *nValue);
extern int is__94_array_long_conversion_allowed();
extern int _94_array_to_long(const void *pValue, long *nValue);
extern void compare__94_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__94_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__94_array(void *pValue);
extern int release__94_array(void *pValue);
extern int copy__94_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__94_array_Utils;

/****************************************************************
 ** _95_array 
 ****************************************************************/
extern int _95_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__95_array_string(const char *str, char **endptr);
extern int string_to__95_array(const char *str, void *pValue, char **endptr);
extern int is__95_array_double_conversion_allowed();
extern int _95_array_to_double(const void *pValue, double *nValue);
extern int is__95_array_long_conversion_allowed();
extern int _95_array_to_long(const void *pValue, long *nValue);
extern void compare__95_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__95_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__95_array(void *pValue);
extern int release__95_array(void *pValue);
extern int copy__95_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__95_array_Utils;

/****************************************************************
 ** _96_array 
 ****************************************************************/
extern int _96_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__96_array_string(const char *str, char **endptr);
extern int string_to__96_array(const char *str, void *pValue, char **endptr);
extern int is__96_array_double_conversion_allowed();
extern int _96_array_to_double(const void *pValue, double *nValue);
extern int is__96_array_long_conversion_allowed();
extern int _96_array_to_long(const void *pValue, long *nValue);
extern void compare__96_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__96_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__96_array(void *pValue);
extern int release__96_array(void *pValue);
extern int copy__96_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__96_array_Utils;

/****************************************************************
 ** _97_array 
 ****************************************************************/
extern int _97_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__97_array_string(const char *str, char **endptr);
extern int string_to__97_array(const char *str, void *pValue, char **endptr);
extern int is__97_array_double_conversion_allowed();
extern int _97_array_to_double(const void *pValue, double *nValue);
extern int is__97_array_long_conversion_allowed();
extern int _97_array_to_long(const void *pValue, long *nValue);
extern void compare__97_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__97_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__97_array(void *pValue);
extern int release__97_array(void *pValue);
extern int copy__97_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__97_array_Utils;

/****************************************************************
 ** _98_array 
 ****************************************************************/
extern int _98_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__98_array_string(const char *str, char **endptr);
extern int string_to__98_array(const char *str, void *pValue, char **endptr);
extern int is__98_array_double_conversion_allowed();
extern int _98_array_to_double(const void *pValue, double *nValue);
extern int is__98_array_long_conversion_allowed();
extern int _98_array_to_long(const void *pValue, long *nValue);
extern void compare__98_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__98_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__98_array(void *pValue);
extern int release__98_array(void *pValue);
extern int copy__98_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__98_array_Utils;

/****************************************************************
 ** _99_array 
 ****************************************************************/
extern int _99_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__99_array_string(const char *str, char **endptr);
extern int string_to__99_array(const char *str, void *pValue, char **endptr);
extern int is__99_array_double_conversion_allowed();
extern int _99_array_to_double(const void *pValue, double *nValue);
extern int is__99_array_long_conversion_allowed();
extern int _99_array_to_long(const void *pValue, long *nValue);
extern void compare__99_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__99_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__99_array(void *pValue);
extern int release__99_array(void *pValue);
extern int copy__99_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__99_array_Utils;

/****************************************************************
 ** _9_array 
 ****************************************************************/
extern int _9_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__9_array_string(const char *str, char **endptr);
extern int string_to__9_array(const char *str, void *pValue, char **endptr);
extern int is__9_array_double_conversion_allowed();
extern int _9_array_to_double(const void *pValue, double *nValue);
extern int is__9_array_long_conversion_allowed();
extern int _9_array_to_long(const void *pValue, long *nValue);
extern void compare__9_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__9_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__9_array(void *pValue);
extern int release__9_array(void *pValue);
extern int copy__9_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__9_array_Utils;

/****************************************************************
 ** a_Brake_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_Brake_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_a_Brake_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_Brake_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_Brake_t_SDMConversionModelPkg_double_conversion_allowed();
extern int a_Brake_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_a_Brake_t_SDMConversionModelPkg_long_conversion_allowed();
extern int a_Brake_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_a_Brake_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_a_Brake_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_a_Brake_t_SDMConversionModelPkg(void *pValue);
extern int release_a_Brake_t_SDMConversionModelPkg(void *pValue);
extern int copy_a_Brake_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_a_Brake_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_a_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_BrakeSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_a_BrakeSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_a_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_a_BrakeSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_a_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_a_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_a_BrakeSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_a_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** A_gradient_element_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_gradient_element_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_element_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_element_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_A_gradient_element_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_A_gradient_element_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_gradient_element_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_gradient_element_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_A_gradient_element_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_A_gradient_element_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_gradient_element_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_gradient_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_gradient_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int A_gradient_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_A_gradient_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int A_gradient_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_A_gradient_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_gradient_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_gradient_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_A_gradient_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_A_gradient_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_gradient_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int A_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int A_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_A_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int A_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_A_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_A_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_A_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** A_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_A_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_A_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_A_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_A_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** a_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_a_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_MergedSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int a_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_a_MergedSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int a_MergedSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_a_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_a_MergedSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_a_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_a_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_a_MergedSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_a_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** A_NVMAXREDADH1 
 ****************************************************************/
extern int A_NVMAXREDADH1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVMAXREDADH1_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH1(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH1_double_conversion_allowed();
extern int A_NVMAXREDADH1_to_double(const void *pValue, double *nValue);
extern int is_A_NVMAXREDADH1_long_conversion_allowed();
extern int A_NVMAXREDADH1_to_long(const void *pValue, long *nValue);
extern void compare_A_NVMAXREDADH1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVMAXREDADH1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVMAXREDADH1(void *pValue);
extern int release_A_NVMAXREDADH1(void *pValue);
extern int copy_A_NVMAXREDADH1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVMAXREDADH1_Utils;

/****************************************************************
 ** A_NVMAXREDADH2 
 ****************************************************************/
extern int A_NVMAXREDADH2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVMAXREDADH2_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH2(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH2_double_conversion_allowed();
extern int A_NVMAXREDADH2_to_double(const void *pValue, double *nValue);
extern int is_A_NVMAXREDADH2_long_conversion_allowed();
extern int A_NVMAXREDADH2_to_long(const void *pValue, long *nValue);
extern void compare_A_NVMAXREDADH2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVMAXREDADH2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVMAXREDADH2(void *pValue);
extern int release_A_NVMAXREDADH2(void *pValue);
extern int copy_A_NVMAXREDADH2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVMAXREDADH2_Utils;

/****************************************************************
 ** A_NVMAXREDADH3 
 ****************************************************************/
extern int A_NVMAXREDADH3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVMAXREDADH3_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH3(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH3_double_conversion_allowed();
extern int A_NVMAXREDADH3_to_double(const void *pValue, double *nValue);
extern int is_A_NVMAXREDADH3_long_conversion_allowed();
extern int A_NVMAXREDADH3_to_long(const void *pValue, long *nValue);
extern void compare_A_NVMAXREDADH3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVMAXREDADH3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVMAXREDADH3(void *pValue);
extern int release_A_NVMAXREDADH3(void *pValue);
extern int copy_A_NVMAXREDADH3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVMAXREDADH3_Utils;

/****************************************************************
 ** A_NVP12 
 ****************************************************************/
extern int A_NVP12_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVP12_string(const char *str, char **endptr);
extern int string_to_A_NVP12(const char *str, void *pValue, char **endptr);
extern int is_A_NVP12_double_conversion_allowed();
extern int A_NVP12_to_double(const void *pValue, double *nValue);
extern int is_A_NVP12_long_conversion_allowed();
extern int A_NVP12_to_long(const void *pValue, long *nValue);
extern void compare_A_NVP12(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVP12_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVP12(void *pValue);
extern int release_A_NVP12(void *pValue);
extern int copy_A_NVP12(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVP12_Utils;

/****************************************************************
 ** A_NVP23 
 ****************************************************************/
extern int A_NVP23_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVP23_string(const char *str, char **endptr);
extern int string_to_A_NVP23(const char *str, void *pValue, char **endptr);
extern int is_A_NVP23_double_conversion_allowed();
extern int A_NVP23_to_double(const void *pValue, double *nValue);
extern int is_A_NVP23_long_conversion_allowed();
extern int A_NVP23_to_long(const void *pValue, long *nValue);
extern void compare_A_NVP23(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVP23_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVP23(void *pValue);
extern int release_A_NVP23(void *pValue);
extern int copy_A_NVP23(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVP23_Utils;

/****************************************************************
 ** abilityToHandleCommunicationSessions_Handover_Pkg 
 ****************************************************************/
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_abilityToHandleCommunicationSessions_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_abilityToHandleCommunicationSessions_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_abilityToHandleCommunicationSessions_Handover_Pkg_double_conversion_allowed();
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int is_abilityToHandleCommunicationSessions_Handover_Pkg_long_conversion_allowed();
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_abilityToHandleCommunicationSessions_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_abilityToHandleCommunicationSessions_Handover_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_abilityToHandleCommunicationSessions_Handover_Pkg(void *pValue);
extern int release_abilityToHandleCommunicationSessions_Handover_Pkg(void *pValue);
extern int copy_abilityToHandleCommunicationSessions_Handover_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_abilityToHandleCommunicationSessions_Handover_Pkg_Utils;

/****************************************************************
 ** ACC_SDM_GradientAcceleration_Pkg 
 ****************************************************************/
extern int ACC_SDM_GradientAcceleration_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ACC_SDM_GradientAcceleration_Pkg_string(const char *str, char **endptr);
extern int string_to_ACC_SDM_GradientAcceleration_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ACC_SDM_GradientAcceleration_Pkg_double_conversion_allowed();
extern int ACC_SDM_GradientAcceleration_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ACC_SDM_GradientAcceleration_Pkg_long_conversion_allowed();
extern int ACC_SDM_GradientAcceleration_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ACC_SDM_GradientAcceleration_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ACC_SDM_GradientAcceleration_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ACC_SDM_GradientAcceleration_Pkg(void *pValue);
extern int release_ACC_SDM_GradientAcceleration_Pkg(void *pValue);
extern int copy_ACC_SDM_GradientAcceleration_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ACC_SDM_GradientAcceleration_Pkg_Utils;

/****************************************************************
 ** AccuDistanceProfileMA_TA_MA_new 
 ****************************************************************/
extern int AccuDistanceProfileMA_TA_MA_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_AccuDistanceProfileMA_TA_MA_new_string(const char *str, char **endptr);
extern int string_to_AccuDistanceProfileMA_TA_MA_new(const char *str, void *pValue, char **endptr);
extern int is_AccuDistanceProfileMA_TA_MA_new_double_conversion_allowed();
extern int AccuDistanceProfileMA_TA_MA_new_to_double(const void *pValue, double *nValue);
extern int is_AccuDistanceProfileMA_TA_MA_new_long_conversion_allowed();
extern int AccuDistanceProfileMA_TA_MA_new_to_long(const void *pValue, long *nValue);
extern void compare_AccuDistanceProfileMA_TA_MA_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_AccuDistanceProfileMA_TA_MA_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_AccuDistanceProfileMA_TA_MA_new(void *pValue);
extern int release_AccuDistanceProfileMA_TA_MA_new(void *pValue);
extern int copy_AccuDistanceProfileMA_TA_MA_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_AccuDistanceProfileMA_TA_MA_new_Utils;

/****************************************************************
 ** ActionType_TA_MA_new 
 ****************************************************************/
extern int ActionType_TA_MA_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ActionType_TA_MA_new_string(const char *str, char **endptr);
extern int string_to_ActionType_TA_MA_new(const char *str, void *pValue, char **endptr);
extern int is_ActionType_TA_MA_new_double_conversion_allowed();
extern int ActionType_TA_MA_new_to_double(const void *pValue, double *nValue);
extern int is_ActionType_TA_MA_new_long_conversion_allowed();
extern int ActionType_TA_MA_new_to_long(const void *pValue, long *nValue);
extern void compare_ActionType_TA_MA_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ActionType_TA_MA_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ActionType_TA_MA_new(void *pValue);
extern int release_ActionType_TA_MA_new(void *pValue);
extern int copy_ActionType_TA_MA_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ActionType_TA_MA_new_Utils;

/****************************************************************
 ** aNID_NTC_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_aNID_NTC_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_NTC_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_NTC_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_aNID_NTC_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_aNID_NTC_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_aNID_NTC_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_aNID_NTC_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_aNID_NTC_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_aNID_NTC_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_aNID_NTC_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** aNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_aNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_RADIO_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_aNID_RADIO_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_aNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_aNID_RADIO_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_aNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_aNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_aNID_RADIO_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_aNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** API_RadioMsgHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_API_RadioMsgHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_RadioMsgHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_RadioMsgHeader_T_API_Msg_Pkg_double_conversion_allowed();
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_API_RadioMsgHeader_T_API_Msg_Pkg_long_conversion_allowed();
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_API_RadioMsgHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_API_RadioMsgHeader_T_API_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_API_RadioMsgHeader_T_API_Msg_Pkg(void *pValue);
extern int release_API_RadioMsgHeader_T_API_Msg_Pkg(void *pValue);
extern int copy_API_RadioMsgHeader_T_API_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_API_RadioMsgHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_TelegramHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TelegramHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_API_TelegramHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TelegramHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TelegramHeader_T_API_Msg_Pkg_double_conversion_allowed();
extern int API_TelegramHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_API_TelegramHeader_T_API_Msg_Pkg_long_conversion_allowed();
extern int API_TelegramHeader_T_API_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_API_TelegramHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_API_TelegramHeader_T_API_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_API_TelegramHeader_T_API_Msg_Pkg(void *pValue);
extern int release_API_TelegramHeader_T_API_Msg_Pkg(void *pValue);
extern int copy_API_TelegramHeader_T_API_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_API_TelegramHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_TrackSideInput_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TrackSideInput_T_API_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_API_TrackSideInput_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TrackSideInput_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TrackSideInput_T_API_Msg_Pkg_double_conversion_allowed();
extern int API_TrackSideInput_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_API_TrackSideInput_T_API_Msg_Pkg_long_conversion_allowed();
extern int API_TrackSideInput_T_API_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_API_TrackSideInput_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_API_TrackSideInput_T_API_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_API_TrackSideInput_T_API_Msg_Pkg(void *pValue);
extern int release_API_TrackSideInput_T_API_Msg_Pkg(void *pValue);
extern int copy_API_TrackSideInput_T_API_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_API_TrackSideInput_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** Area_group_INT_T_DATA 
 ****************************************************************/
extern int Area_group_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Area_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Area_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Area_group_INT_T_DATA_double_conversion_allowed();
extern int Area_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_Area_group_INT_T_DATA_long_conversion_allowed();
extern int Area_group_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_Area_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Area_group_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Area_group_INT_T_DATA(void *pValue);
extern int release_Area_group_INT_T_DATA(void *pValue);
extern int copy_Area_group_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Area_group_INT_T_DATA_Utils;

/****************************************************************
 ** Area_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Area_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Area_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Area_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Area_group_T_DMI_Types_Pkg_double_conversion_allowed();
extern int Area_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Area_group_T_DMI_Types_Pkg_long_conversion_allowed();
extern int Area_group_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Area_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Area_group_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Area_group_T_DMI_Types_Pkg(void *pValue);
extern int release_Area_group_T_DMI_Types_Pkg(void *pValue);
extern int copy_Area_group_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Area_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** array 
 ****************************************************************/
extern int array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_string(const char *str, char **endptr);
extern int string_to_array(const char *str, void *pValue, char **endptr);
extern int is_array_double_conversion_allowed();
extern int array_to_double(const void *pValue, double *nValue);
extern int is_array_long_conversion_allowed();
extern int array_to_long(const void *pValue, long *nValue);
extern void compare_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array(void *pValue);
extern int release_array(void *pValue);
extern int copy_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_Utils;

/****************************************************************
 ** Array03_TM 
 ****************************************************************/
extern int Array03_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array03_TM_string(const char *str, char **endptr);
extern int string_to_Array03_TM(const char *str, void *pValue, char **endptr);
extern int is_Array03_TM_double_conversion_allowed();
extern int Array03_TM_to_double(const void *pValue, double *nValue);
extern int is_Array03_TM_long_conversion_allowed();
extern int Array03_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array03_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array03_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array03_TM(void *pValue);
extern int release_Array03_TM(void *pValue);
extern int copy_Array03_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array03_TM_Utils;

/****************************************************************
 ** Array03_TM_TrainToTrack 
 ****************************************************************/
extern int Array03_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array03_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Array03_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Array03_TM_TrainToTrack_double_conversion_allowed();
extern int Array03_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_Array03_TM_TrainToTrack_long_conversion_allowed();
extern int Array03_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_Array03_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array03_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array03_TM_TrainToTrack(void *pValue);
extern int release_Array03_TM_TrainToTrack(void *pValue);
extern int copy_Array03_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array03_TM_TrainToTrack_Utils;

/****************************************************************
 ** Array04_TM 
 ****************************************************************/
extern int Array04_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array04_TM_string(const char *str, char **endptr);
extern int string_to_Array04_TM(const char *str, void *pValue, char **endptr);
extern int is_Array04_TM_double_conversion_allowed();
extern int Array04_TM_to_double(const void *pValue, double *nValue);
extern int is_Array04_TM_long_conversion_allowed();
extern int Array04_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array04_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array04_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array04_TM(void *pValue);
extern int release_Array04_TM(void *pValue);
extern int copy_Array04_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array04_TM_Utils;

/****************************************************************
 ** Array05_TM 
 ****************************************************************/
extern int Array05_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array05_TM_string(const char *str, char **endptr);
extern int string_to_Array05_TM(const char *str, void *pValue, char **endptr);
extern int is_Array05_TM_double_conversion_allowed();
extern int Array05_TM_to_double(const void *pValue, double *nValue);
extern int is_Array05_TM_long_conversion_allowed();
extern int Array05_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array05_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array05_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array05_TM(void *pValue);
extern int release_Array05_TM(void *pValue);
extern int copy_Array05_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array05_TM_Utils;

/****************************************************************
 ** Array06_TM 
 ****************************************************************/
extern int Array06_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array06_TM_string(const char *str, char **endptr);
extern int string_to_Array06_TM(const char *str, void *pValue, char **endptr);
extern int is_Array06_TM_double_conversion_allowed();
extern int Array06_TM_to_double(const void *pValue, double *nValue);
extern int is_Array06_TM_long_conversion_allowed();
extern int Array06_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array06_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array06_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array06_TM(void *pValue);
extern int release_Array06_TM(void *pValue);
extern int copy_Array06_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array06_TM_Utils;

/****************************************************************
 ** Array07_TM 
 ****************************************************************/
extern int Array07_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array07_TM_string(const char *str, char **endptr);
extern int string_to_Array07_TM(const char *str, void *pValue, char **endptr);
extern int is_Array07_TM_double_conversion_allowed();
extern int Array07_TM_to_double(const void *pValue, double *nValue);
extern int is_Array07_TM_long_conversion_allowed();
extern int Array07_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array07_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array07_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array07_TM(void *pValue);
extern int release_Array07_TM(void *pValue);
extern int copy_Array07_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array07_TM_Utils;

/****************************************************************
 ** Array08_TM 
 ****************************************************************/
extern int Array08_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array08_TM_string(const char *str, char **endptr);
extern int string_to_Array08_TM(const char *str, void *pValue, char **endptr);
extern int is_Array08_TM_double_conversion_allowed();
extern int Array08_TM_to_double(const void *pValue, double *nValue);
extern int is_Array08_TM_long_conversion_allowed();
extern int Array08_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array08_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array08_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array08_TM(void *pValue);
extern int release_Array08_TM(void *pValue);
extern int copy_Array08_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array08_TM_Utils;

/****************************************************************
 ** Array09_TM 
 ****************************************************************/
extern int Array09_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array09_TM_string(const char *str, char **endptr);
extern int string_to_Array09_TM(const char *str, void *pValue, char **endptr);
extern int is_Array09_TM_double_conversion_allowed();
extern int Array09_TM_to_double(const void *pValue, double *nValue);
extern int is_Array09_TM_long_conversion_allowed();
extern int Array09_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array09_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array09_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array09_TM(void *pValue);
extern int release_Array09_TM(void *pValue);
extern int copy_Array09_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array09_TM_Utils;

/****************************************************************
 ** Array11_TM_TrainToTrack 
 ****************************************************************/
extern int Array11_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array11_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Array11_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Array11_TM_TrainToTrack_double_conversion_allowed();
extern int Array11_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_Array11_TM_TrainToTrack_long_conversion_allowed();
extern int Array11_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_Array11_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array11_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array11_TM_TrainToTrack(void *pValue);
extern int release_Array11_TM_TrainToTrack(void *pValue);
extern int copy_Array11_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array11_TM_TrainToTrack_Utils;

/****************************************************************
 ** Array15_TM 
 ****************************************************************/
extern int Array15_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array15_TM_string(const char *str, char **endptr);
extern int string_to_Array15_TM(const char *str, void *pValue, char **endptr);
extern int is_Array15_TM_double_conversion_allowed();
extern int Array15_TM_to_double(const void *pValue, double *nValue);
extern int is_Array15_TM_long_conversion_allowed();
extern int Array15_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array15_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array15_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array15_TM(void *pValue);
extern int release_Array15_TM(void *pValue);
extern int copy_Array15_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array15_TM_Utils;

/****************************************************************
 ** Array24_TM 
 ****************************************************************/
extern int Array24_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array24_TM_string(const char *str, char **endptr);
extern int string_to_Array24_TM(const char *str, void *pValue, char **endptr);
extern int is_Array24_TM_double_conversion_allowed();
extern int Array24_TM_to_double(const void *pValue, double *nValue);
extern int is_Array24_TM_long_conversion_allowed();
extern int Array24_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array24_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array24_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array24_TM(void *pValue);
extern int release_Array24_TM(void *pValue);
extern int copy_Array24_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array24_TM_Utils;

/****************************************************************
 ** array_bool_1 
 ****************************************************************/
extern int array_bool_1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_1_string(const char *str, char **endptr);
extern int string_to_array_bool_1(const char *str, void *pValue, char **endptr);
extern int is_array_bool_1_double_conversion_allowed();
extern int array_bool_1_to_double(const void *pValue, double *nValue);
extern int is_array_bool_1_long_conversion_allowed();
extern int array_bool_1_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_1(void *pValue);
extern int release_array_bool_1(void *pValue);
extern int copy_array_bool_1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_1_Utils;

/****************************************************************
 ** array_bool_10 
 ****************************************************************/
extern int array_bool_10_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_10_string(const char *str, char **endptr);
extern int string_to_array_bool_10(const char *str, void *pValue, char **endptr);
extern int is_array_bool_10_double_conversion_allowed();
extern int array_bool_10_to_double(const void *pValue, double *nValue);
extern int is_array_bool_10_long_conversion_allowed();
extern int array_bool_10_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_10(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_10_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_10(void *pValue);
extern int release_array_bool_10(void *pValue);
extern int copy_array_bool_10(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_10_Utils;

/****************************************************************
 ** array_bool_100 
 ****************************************************************/
extern int array_bool_100_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_100_string(const char *str, char **endptr);
extern int string_to_array_bool_100(const char *str, void *pValue, char **endptr);
extern int is_array_bool_100_double_conversion_allowed();
extern int array_bool_100_to_double(const void *pValue, double *nValue);
extern int is_array_bool_100_long_conversion_allowed();
extern int array_bool_100_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_100(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_100_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_100(void *pValue);
extern int release_array_bool_100(void *pValue);
extern int copy_array_bool_100(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_100_Utils;

/****************************************************************
 ** array_bool_110 
 ****************************************************************/
extern int array_bool_110_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_110_string(const char *str, char **endptr);
extern int string_to_array_bool_110(const char *str, void *pValue, char **endptr);
extern int is_array_bool_110_double_conversion_allowed();
extern int array_bool_110_to_double(const void *pValue, double *nValue);
extern int is_array_bool_110_long_conversion_allowed();
extern int array_bool_110_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_110(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_110_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_110(void *pValue);
extern int release_array_bool_110(void *pValue);
extern int copy_array_bool_110(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_110_Utils;

/****************************************************************
 ** array_bool_113 
 ****************************************************************/
extern int array_bool_113_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_113_string(const char *str, char **endptr);
extern int string_to_array_bool_113(const char *str, void *pValue, char **endptr);
extern int is_array_bool_113_double_conversion_allowed();
extern int array_bool_113_to_double(const void *pValue, double *nValue);
extern int is_array_bool_113_long_conversion_allowed();
extern int array_bool_113_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_113(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_113_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_113(void *pValue);
extern int release_array_bool_113(void *pValue);
extern int copy_array_bool_113(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_113_Utils;

/****************************************************************
 ** array_bool_12 
 ****************************************************************/
extern int array_bool_12_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_12_string(const char *str, char **endptr);
extern int string_to_array_bool_12(const char *str, void *pValue, char **endptr);
extern int is_array_bool_12_double_conversion_allowed();
extern int array_bool_12_to_double(const void *pValue, double *nValue);
extern int is_array_bool_12_long_conversion_allowed();
extern int array_bool_12_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_12(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_12_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_12(void *pValue);
extern int release_array_bool_12(void *pValue);
extern int copy_array_bool_12(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_12_Utils;

/****************************************************************
 ** array_bool_15 
 ****************************************************************/
extern int array_bool_15_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_15_string(const char *str, char **endptr);
extern int string_to_array_bool_15(const char *str, void *pValue, char **endptr);
extern int is_array_bool_15_double_conversion_allowed();
extern int array_bool_15_to_double(const void *pValue, double *nValue);
extern int is_array_bool_15_long_conversion_allowed();
extern int array_bool_15_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_15(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_15_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_15(void *pValue);
extern int release_array_bool_15(void *pValue);
extern int copy_array_bool_15(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_15_Utils;

/****************************************************************
 ** array_bool_256 
 ****************************************************************/
extern int array_bool_256_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_256_string(const char *str, char **endptr);
extern int string_to_array_bool_256(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_double_conversion_allowed();
extern int array_bool_256_to_double(const void *pValue, double *nValue);
extern int is_array_bool_256_long_conversion_allowed();
extern int array_bool_256_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_256(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_256_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_256(void *pValue);
extern int release_array_bool_256(void *pValue);
extern int copy_array_bool_256(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_256_Utils;

/****************************************************************
 ** array_bool_256_46_30 
 ****************************************************************/
extern int array_bool_256_46_30_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_256_46_30_string(const char *str, char **endptr);
extern int string_to_array_bool_256_46_30(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_46_30_double_conversion_allowed();
extern int array_bool_256_46_30_to_double(const void *pValue, double *nValue);
extern int is_array_bool_256_46_30_long_conversion_allowed();
extern int array_bool_256_46_30_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_256_46_30(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_256_46_30_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_256_46_30(void *pValue);
extern int release_array_bool_256_46_30(void *pValue);
extern int copy_array_bool_256_46_30(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_256_46_30_Utils;

/****************************************************************
 ** array_bool_32 
 ****************************************************************/
extern int array_bool_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_32_string(const char *str, char **endptr);
extern int string_to_array_bool_32(const char *str, void *pValue, char **endptr);
extern int is_array_bool_32_double_conversion_allowed();
extern int array_bool_32_to_double(const void *pValue, double *nValue);
extern int is_array_bool_32_long_conversion_allowed();
extern int array_bool_32_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_32(void *pValue);
extern int release_array_bool_32(void *pValue);
extern int copy_array_bool_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_32_Utils;

/****************************************************************
 ** array_bool_4 
 ****************************************************************/
extern int array_bool_4_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_4_string(const char *str, char **endptr);
extern int string_to_array_bool_4(const char *str, void *pValue, char **endptr);
extern int is_array_bool_4_double_conversion_allowed();
extern int array_bool_4_to_double(const void *pValue, double *nValue);
extern int is_array_bool_4_long_conversion_allowed();
extern int array_bool_4_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_4(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_4_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_4(void *pValue);
extern int release_array_bool_4(void *pValue);
extern int copy_array_bool_4(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_4_Utils;

/****************************************************************
 ** array_bool_41 
 ****************************************************************/
extern int array_bool_41_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_41_string(const char *str, char **endptr);
extern int string_to_array_bool_41(const char *str, void *pValue, char **endptr);
extern int is_array_bool_41_double_conversion_allowed();
extern int array_bool_41_to_double(const void *pValue, double *nValue);
extern int is_array_bool_41_long_conversion_allowed();
extern int array_bool_41_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_41(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_41_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_41(void *pValue);
extern int release_array_bool_41(void *pValue);
extern int copy_array_bool_41(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_41_Utils;

/****************************************************************
 ** array_bool_5 
 ****************************************************************/
extern int array_bool_5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_5_string(const char *str, char **endptr);
extern int string_to_array_bool_5(const char *str, void *pValue, char **endptr);
extern int is_array_bool_5_double_conversion_allowed();
extern int array_bool_5_to_double(const void *pValue, double *nValue);
extern int is_array_bool_5_long_conversion_allowed();
extern int array_bool_5_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_5(void *pValue);
extern int release_array_bool_5(void *pValue);
extern int copy_array_bool_5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_5_Utils;

/****************************************************************
 ** array_bool_6 
 ****************************************************************/
extern int array_bool_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_6_string(const char *str, char **endptr);
extern int string_to_array_bool_6(const char *str, void *pValue, char **endptr);
extern int is_array_bool_6_double_conversion_allowed();
extern int array_bool_6_to_double(const void *pValue, double *nValue);
extern int is_array_bool_6_long_conversion_allowed();
extern int array_bool_6_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_6(void *pValue);
extern int release_array_bool_6(void *pValue);
extern int copy_array_bool_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_6_Utils;

/****************************************************************
 ** array_bool_7 
 ****************************************************************/
extern int array_bool_7_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_7_string(const char *str, char **endptr);
extern int string_to_array_bool_7(const char *str, void *pValue, char **endptr);
extern int is_array_bool_7_double_conversion_allowed();
extern int array_bool_7_to_double(const void *pValue, double *nValue);
extern int is_array_bool_7_long_conversion_allowed();
extern int array_bool_7_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_7(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_7_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_7(void *pValue);
extern int release_array_bool_7(void *pValue);
extern int copy_array_bool_7(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_7_Utils;

/****************************************************************
 ** array_bool_8 
 ****************************************************************/
extern int array_bool_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_8_string(const char *str, char **endptr);
extern int string_to_array_bool_8(const char *str, void *pValue, char **endptr);
extern int is_array_bool_8_double_conversion_allowed();
extern int array_bool_8_to_double(const void *pValue, double *nValue);
extern int is_array_bool_8_long_conversion_allowed();
extern int array_bool_8_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_8(void *pValue);
extern int release_array_bool_8(void *pValue);
extern int copy_array_bool_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_8_Utils;

/****************************************************************
 ** array_char_12 
 ****************************************************************/
extern int array_char_12_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_char_12_string(const char *str, char **endptr);
extern int string_to_array_char_12(const char *str, void *pValue, char **endptr);
extern int is_array_char_12_double_conversion_allowed();
extern int array_char_12_to_double(const void *pValue, double *nValue);
extern int is_array_char_12_long_conversion_allowed();
extern int array_char_12_to_long(const void *pValue, long *nValue);
extern void compare_array_char_12(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_char_12_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_char_12(void *pValue);
extern int release_array_char_12(void *pValue);
extern int copy_array_char_12(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_char_12_Utils;

/****************************************************************
 ** array_char_243 
 ****************************************************************/
extern int array_char_243_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_char_243_string(const char *str, char **endptr);
extern int string_to_array_char_243(const char *str, void *pValue, char **endptr);
extern int is_array_char_243_double_conversion_allowed();
extern int array_char_243_to_double(const void *pValue, double *nValue);
extern int is_array_char_243_long_conversion_allowed();
extern int array_char_243_to_long(const void *pValue, long *nValue);
extern void compare_array_char_243(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_char_243_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_char_243(void *pValue);
extern int release_array_char_243(void *pValue);
extern int copy_array_char_243(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_char_243_Utils;

/****************************************************************
 ** array_char_30 
 ****************************************************************/
extern int array_char_30_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_char_30_string(const char *str, char **endptr);
extern int string_to_array_char_30(const char *str, void *pValue, char **endptr);
extern int is_array_char_30_double_conversion_allowed();
extern int array_char_30_to_double(const void *pValue, double *nValue);
extern int is_array_char_30_long_conversion_allowed();
extern int array_char_30_to_long(const void *pValue, long *nValue);
extern void compare_array_char_30(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_char_30_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_char_30(void *pValue);
extern int release_array_char_30(void *pValue);
extern int copy_array_char_30(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_char_30_Utils;

/****************************************************************
 ** array_char_30_5 
 ****************************************************************/
extern int array_char_30_5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_char_30_5_string(const char *str, char **endptr);
extern int string_to_array_char_30_5(const char *str, void *pValue, char **endptr);
extern int is_array_char_30_5_double_conversion_allowed();
extern int array_char_30_5_to_double(const void *pValue, double *nValue);
extern int is_array_char_30_5_long_conversion_allowed();
extern int array_char_30_5_to_long(const void *pValue, long *nValue);
extern void compare_array_char_30_5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_char_30_5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_char_30_5(void *pValue);
extern int release_array_char_30_5(void *pValue);
extern int copy_array_char_30_5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_char_30_5_Utils;

/****************************************************************
 ** array_char_30_5_5 
 ****************************************************************/
extern int array_char_30_5_5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_char_30_5_5_string(const char *str, char **endptr);
extern int string_to_array_char_30_5_5(const char *str, void *pValue, char **endptr);
extern int is_array_char_30_5_5_double_conversion_allowed();
extern int array_char_30_5_5_to_double(const void *pValue, double *nValue);
extern int is_array_char_30_5_5_long_conversion_allowed();
extern int array_char_30_5_5_to_long(const void *pValue, long *nValue);
extern void compare_array_char_30_5_5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_char_30_5_5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_char_30_5_5(void *pValue);
extern int release_array_char_30_5_5(void *pValue);
extern int copy_array_char_30_5_5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_char_30_5_5_Utils;

/****************************************************************
 ** Array_DMI_List_Entry_Request 
 ****************************************************************/
extern int Array_DMI_List_Entry_Request_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array_DMI_List_Entry_Request_string(const char *str, char **endptr);
extern int string_to_Array_DMI_List_Entry_Request(const char *str, void *pValue, char **endptr);
extern int is_Array_DMI_List_Entry_Request_double_conversion_allowed();
extern int Array_DMI_List_Entry_Request_to_double(const void *pValue, double *nValue);
extern int is_Array_DMI_List_Entry_Request_long_conversion_allowed();
extern int Array_DMI_List_Entry_Request_to_long(const void *pValue, long *nValue);
extern void compare_Array_DMI_List_Entry_Request(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array_DMI_List_Entry_Request_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array_DMI_List_Entry_Request(void *pValue);
extern int release_Array_DMI_List_Entry_Request(void *pValue);
extern int copy_Array_DMI_List_Entry_Request(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array_DMI_List_Entry_Request_Utils;

/****************************************************************
 ** Array_DMI_Q_Text 
 ****************************************************************/
extern int Array_DMI_Q_Text_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array_DMI_Q_Text_string(const char *str, char **endptr);
extern int string_to_Array_DMI_Q_Text(const char *str, void *pValue, char **endptr);
extern int is_Array_DMI_Q_Text_double_conversion_allowed();
extern int Array_DMI_Q_Text_to_double(const void *pValue, double *nValue);
extern int is_Array_DMI_Q_Text_long_conversion_allowed();
extern int Array_DMI_Q_Text_to_long(const void *pValue, long *nValue);
extern void compare_Array_DMI_Q_Text(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array_DMI_Q_Text_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array_DMI_Q_Text(void *pValue);
extern int release_Array_DMI_Q_Text(void *pValue);
extern int copy_Array_DMI_Q_Text(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array_DMI_Q_Text_Utils;

/****************************************************************
 ** array_float32_1 
 ****************************************************************/
extern int array_float32_1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_1_string(const char *str, char **endptr);
extern int string_to_array_float32_1(const char *str, void *pValue, char **endptr);
extern int is_array_float32_1_double_conversion_allowed();
extern int array_float32_1_to_double(const void *pValue, double *nValue);
extern int is_array_float32_1_long_conversion_allowed();
extern int array_float32_1_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_1(void *pValue);
extern int release_array_float32_1(void *pValue);
extern int copy_array_float32_1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_1_Utils;

/****************************************************************
 ** array_float32_10 
 ****************************************************************/
extern int array_float32_10_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_10_string(const char *str, char **endptr);
extern int string_to_array_float32_10(const char *str, void *pValue, char **endptr);
extern int is_array_float32_10_double_conversion_allowed();
extern int array_float32_10_to_double(const void *pValue, double *nValue);
extern int is_array_float32_10_long_conversion_allowed();
extern int array_float32_10_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_10(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_10_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_10(void *pValue);
extern int release_array_float32_10(void *pValue);
extern int copy_array_float32_10(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_10_Utils;

/****************************************************************
 ** array_float32_100 
 ****************************************************************/
extern int array_float32_100_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_string(const char *str, char **endptr);
extern int string_to_array_float32_100(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_double_conversion_allowed();
extern int array_float32_100_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_long_conversion_allowed();
extern int array_float32_100_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100(void *pValue);
extern int release_array_float32_100(void *pValue);
extern int copy_array_float32_100(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_Utils;

/****************************************************************
 ** array_float32_100_1 
 ****************************************************************/
extern int array_float32_100_1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_1_string(const char *str, char **endptr);
extern int string_to_array_float32_100_1(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_1_double_conversion_allowed();
extern int array_float32_100_1_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_1_long_conversion_allowed();
extern int array_float32_100_1_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_1(void *pValue);
extern int release_array_float32_100_1(void *pValue);
extern int copy_array_float32_100_1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_1_Utils;

/****************************************************************
 ** array_float32_100_13 
 ****************************************************************/
extern int array_float32_100_13_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_13_string(const char *str, char **endptr);
extern int string_to_array_float32_100_13(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_13_double_conversion_allowed();
extern int array_float32_100_13_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_13_long_conversion_allowed();
extern int array_float32_100_13_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_13(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_13_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_13(void *pValue);
extern int release_array_float32_100_13(void *pValue);
extern int copy_array_float32_100_13(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_13_Utils;

/****************************************************************
 ** array_float32_100_6 
 ****************************************************************/
extern int array_float32_100_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_6_string(const char *str, char **endptr);
extern int string_to_array_float32_100_6(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_6_double_conversion_allowed();
extern int array_float32_100_6_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_6_long_conversion_allowed();
extern int array_float32_100_6_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_6(void *pValue);
extern int release_array_float32_100_6(void *pValue);
extern int copy_array_float32_100_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_6_Utils;

/****************************************************************
 ** array_float32_100_8 
 ****************************************************************/
extern int array_float32_100_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_8_string(const char *str, char **endptr);
extern int string_to_array_float32_100_8(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_8_double_conversion_allowed();
extern int array_float32_100_8_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_8_long_conversion_allowed();
extern int array_float32_100_8_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_8(void *pValue);
extern int release_array_float32_100_8(void *pValue);
extern int copy_array_float32_100_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_8_Utils;

/****************************************************************
 ** array_float32_10_10 
 ****************************************************************/
extern int array_float32_10_10_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_10_10_string(const char *str, char **endptr);
extern int string_to_array_float32_10_10(const char *str, void *pValue, char **endptr);
extern int is_array_float32_10_10_double_conversion_allowed();
extern int array_float32_10_10_to_double(const void *pValue, double *nValue);
extern int is_array_float32_10_10_long_conversion_allowed();
extern int array_float32_10_10_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_10_10(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_10_10_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_10_10(void *pValue);
extern int release_array_float32_10_10(void *pValue);
extern int copy_array_float32_10_10(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_10_10_Utils;

/****************************************************************
 ** array_float32_110 
 ****************************************************************/
extern int array_float32_110_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_110_string(const char *str, char **endptr);
extern int string_to_array_float32_110(const char *str, void *pValue, char **endptr);
extern int is_array_float32_110_double_conversion_allowed();
extern int array_float32_110_to_double(const void *pValue, double *nValue);
extern int is_array_float32_110_long_conversion_allowed();
extern int array_float32_110_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_110(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_110_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_110(void *pValue);
extern int release_array_float32_110(void *pValue);
extern int copy_array_float32_110(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_110_Utils;

/****************************************************************
 ** array_float32_113 
 ****************************************************************/
extern int array_float32_113_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_113_string(const char *str, char **endptr);
extern int string_to_array_float32_113(const char *str, void *pValue, char **endptr);
extern int is_array_float32_113_double_conversion_allowed();
extern int array_float32_113_to_double(const void *pValue, double *nValue);
extern int is_array_float32_113_long_conversion_allowed();
extern int array_float32_113_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_113(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_113_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_113(void *pValue);
extern int release_array_float32_113(void *pValue);
extern int copy_array_float32_113(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_113_Utils;

/****************************************************************
 ** array_float32_114 
 ****************************************************************/
extern int array_float32_114_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_114_string(const char *str, char **endptr);
extern int string_to_array_float32_114(const char *str, void *pValue, char **endptr);
extern int is_array_float32_114_double_conversion_allowed();
extern int array_float32_114_to_double(const void *pValue, double *nValue);
extern int is_array_float32_114_long_conversion_allowed();
extern int array_float32_114_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_114(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_114_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_114(void *pValue);
extern int release_array_float32_114(void *pValue);
extern int copy_array_float32_114(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_114_Utils;

/****************************************************************
 ** array_float32_12 
 ****************************************************************/
extern int array_float32_12_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_12_string(const char *str, char **endptr);
extern int string_to_array_float32_12(const char *str, void *pValue, char **endptr);
extern int is_array_float32_12_double_conversion_allowed();
extern int array_float32_12_to_double(const void *pValue, double *nValue);
extern int is_array_float32_12_long_conversion_allowed();
extern int array_float32_12_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_12(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_12_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_12(void *pValue);
extern int release_array_float32_12(void *pValue);
extern int copy_array_float32_12(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_12_Utils;

/****************************************************************
 ** array_float32_13 
 ****************************************************************/
extern int array_float32_13_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_13_string(const char *str, char **endptr);
extern int string_to_array_float32_13(const char *str, void *pValue, char **endptr);
extern int is_array_float32_13_double_conversion_allowed();
extern int array_float32_13_to_double(const void *pValue, double *nValue);
extern int is_array_float32_13_long_conversion_allowed();
extern int array_float32_13_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_13(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_13_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_13(void *pValue);
extern int release_array_float32_13(void *pValue);
extern int copy_array_float32_13(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_13_Utils;

/****************************************************************
 ** array_float32_3 
 ****************************************************************/
extern int array_float32_3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_3_string(const char *str, char **endptr);
extern int string_to_array_float32_3(const char *str, void *pValue, char **endptr);
extern int is_array_float32_3_double_conversion_allowed();
extern int array_float32_3_to_double(const void *pValue, double *nValue);
extern int is_array_float32_3_long_conversion_allowed();
extern int array_float32_3_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_3(void *pValue);
extern int release_array_float32_3(void *pValue);
extern int copy_array_float32_3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_3_Utils;

/****************************************************************
 ** array_float32_32 
 ****************************************************************/
extern int array_float32_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_32_string(const char *str, char **endptr);
extern int string_to_array_float32_32(const char *str, void *pValue, char **endptr);
extern int is_array_float32_32_double_conversion_allowed();
extern int array_float32_32_to_double(const void *pValue, double *nValue);
extern int is_array_float32_32_long_conversion_allowed();
extern int array_float32_32_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_32(void *pValue);
extern int release_array_float32_32(void *pValue);
extern int copy_array_float32_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_32_Utils;

/****************************************************************
 ** array_float32_5 
 ****************************************************************/
extern int array_float32_5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_5_string(const char *str, char **endptr);
extern int string_to_array_float32_5(const char *str, void *pValue, char **endptr);
extern int is_array_float32_5_double_conversion_allowed();
extern int array_float32_5_to_double(const void *pValue, double *nValue);
extern int is_array_float32_5_long_conversion_allowed();
extern int array_float32_5_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_5(void *pValue);
extern int release_array_float32_5(void *pValue);
extern int copy_array_float32_5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_5_Utils;

/****************************************************************
 ** array_float32_50 
 ****************************************************************/
extern int array_float32_50_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_50_string(const char *str, char **endptr);
extern int string_to_array_float32_50(const char *str, void *pValue, char **endptr);
extern int is_array_float32_50_double_conversion_allowed();
extern int array_float32_50_to_double(const void *pValue, double *nValue);
extern int is_array_float32_50_long_conversion_allowed();
extern int array_float32_50_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_50(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_50_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_50(void *pValue);
extern int release_array_float32_50(void *pValue);
extern int copy_array_float32_50(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_50_Utils;

/****************************************************************
 ** array_float32_5_5 
 ****************************************************************/
extern int array_float32_5_5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_5_5_string(const char *str, char **endptr);
extern int string_to_array_float32_5_5(const char *str, void *pValue, char **endptr);
extern int is_array_float32_5_5_double_conversion_allowed();
extern int array_float32_5_5_to_double(const void *pValue, double *nValue);
extern int is_array_float32_5_5_long_conversion_allowed();
extern int array_float32_5_5_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_5_5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_5_5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_5_5(void *pValue);
extern int release_array_float32_5_5(void *pValue);
extern int copy_array_float32_5_5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_5_5_Utils;

/****************************************************************
 ** array_float32_6 
 ****************************************************************/
extern int array_float32_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_6_string(const char *str, char **endptr);
extern int string_to_array_float32_6(const char *str, void *pValue, char **endptr);
extern int is_array_float32_6_double_conversion_allowed();
extern int array_float32_6_to_double(const void *pValue, double *nValue);
extern int is_array_float32_6_long_conversion_allowed();
extern int array_float32_6_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_6(void *pValue);
extern int release_array_float32_6(void *pValue);
extern int copy_array_float32_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_6_Utils;

/****************************************************************
 ** array_float32_8 
 ****************************************************************/
extern int array_float32_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_8_string(const char *str, char **endptr);
extern int string_to_array_float32_8(const char *str, void *pValue, char **endptr);
extern int is_array_float32_8_double_conversion_allowed();
extern int array_float32_8_to_double(const void *pValue, double *nValue);
extern int is_array_float32_8_long_conversion_allowed();
extern int array_float32_8_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_8(void *pValue);
extern int release_array_float32_8(void *pValue);
extern int copy_array_float32_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_8_Utils;

/****************************************************************
 ** array_float32_9_6 
 ****************************************************************/
extern int array_float32_9_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_9_6_string(const char *str, char **endptr);
extern int string_to_array_float32_9_6(const char *str, void *pValue, char **endptr);
extern int is_array_float32_9_6_double_conversion_allowed();
extern int array_float32_9_6_to_double(const void *pValue, double *nValue);
extern int is_array_float32_9_6_long_conversion_allowed();
extern int array_float32_9_6_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_9_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_9_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_9_6(void *pValue);
extern int release_array_float32_9_6(void *pValue);
extern int copy_array_float32_9_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_9_6_Utils;

/****************************************************************
 ** array_int32_10 
 ****************************************************************/
extern int array_int32_10_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_10_string(const char *str, char **endptr);
extern int string_to_array_int32_10(const char *str, void *pValue, char **endptr);
extern int is_array_int32_10_double_conversion_allowed();
extern int array_int32_10_to_double(const void *pValue, double *nValue);
extern int is_array_int32_10_long_conversion_allowed();
extern int array_int32_10_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_10(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_10_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_10(void *pValue);
extern int release_array_int32_10(void *pValue);
extern int copy_array_int32_10(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_10_Utils;

/****************************************************************
 ** array_int32_100 
 ****************************************************************/
extern int array_int32_100_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_100_string(const char *str, char **endptr);
extern int string_to_array_int32_100(const char *str, void *pValue, char **endptr);
extern int is_array_int32_100_double_conversion_allowed();
extern int array_int32_100_to_double(const void *pValue, double *nValue);
extern int is_array_int32_100_long_conversion_allowed();
extern int array_int32_100_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_100(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_100_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_100(void *pValue);
extern int release_array_int32_100(void *pValue);
extern int copy_array_int32_100(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_100_Utils;

/****************************************************************
 ** array_int32_104 
 ****************************************************************/
extern int array_int32_104_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_104_string(const char *str, char **endptr);
extern int string_to_array_int32_104(const char *str, void *pValue, char **endptr);
extern int is_array_int32_104_double_conversion_allowed();
extern int array_int32_104_to_double(const void *pValue, double *nValue);
extern int is_array_int32_104_long_conversion_allowed();
extern int array_int32_104_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_104(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_104_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_104(void *pValue);
extern int release_array_int32_104(void *pValue);
extern int copy_array_int32_104(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_104_Utils;

/****************************************************************
 ** array_int32_105 
 ****************************************************************/
extern int array_int32_105_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_105_string(const char *str, char **endptr);
extern int string_to_array_int32_105(const char *str, void *pValue, char **endptr);
extern int is_array_int32_105_double_conversion_allowed();
extern int array_int32_105_to_double(const void *pValue, double *nValue);
extern int is_array_int32_105_long_conversion_allowed();
extern int array_int32_105_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_105(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_105_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_105(void *pValue);
extern int release_array_int32_105(void *pValue);
extern int copy_array_int32_105(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_105_Utils;

/****************************************************************
 ** array_int32_11 
 ****************************************************************/
extern int array_int32_11_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_11_string(const char *str, char **endptr);
extern int string_to_array_int32_11(const char *str, void *pValue, char **endptr);
extern int is_array_int32_11_double_conversion_allowed();
extern int array_int32_11_to_double(const void *pValue, double *nValue);
extern int is_array_int32_11_long_conversion_allowed();
extern int array_int32_11_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_11(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_11_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_11(void *pValue);
extern int release_array_int32_11(void *pValue);
extern int copy_array_int32_11(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_11_Utils;

/****************************************************************
 ** array_int32_110 
 ****************************************************************/
extern int array_int32_110_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_110_string(const char *str, char **endptr);
extern int string_to_array_int32_110(const char *str, void *pValue, char **endptr);
extern int is_array_int32_110_double_conversion_allowed();
extern int array_int32_110_to_double(const void *pValue, double *nValue);
extern int is_array_int32_110_long_conversion_allowed();
extern int array_int32_110_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_110(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_110_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_110(void *pValue);
extern int release_array_int32_110(void *pValue);
extern int copy_array_int32_110(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_110_Utils;

/****************************************************************
 ** array_int32_114 
 ****************************************************************/
extern int array_int32_114_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_114_string(const char *str, char **endptr);
extern int string_to_array_int32_114(const char *str, void *pValue, char **endptr);
extern int is_array_int32_114_double_conversion_allowed();
extern int array_int32_114_to_double(const void *pValue, double *nValue);
extern int is_array_int32_114_long_conversion_allowed();
extern int array_int32_114_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_114(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_114_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_114(void *pValue);
extern int release_array_int32_114(void *pValue);
extern int copy_array_int32_114(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_114_Utils;

/****************************************************************
 ** array_int32_12 
 ****************************************************************/
extern int array_int32_12_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_12_string(const char *str, char **endptr);
extern int string_to_array_int32_12(const char *str, void *pValue, char **endptr);
extern int is_array_int32_12_double_conversion_allowed();
extern int array_int32_12_to_double(const void *pValue, double *nValue);
extern int is_array_int32_12_long_conversion_allowed();
extern int array_int32_12_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_12(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_12_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_12(void *pValue);
extern int release_array_int32_12(void *pValue);
extern int copy_array_int32_12(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_12_Utils;

/****************************************************************
 ** array_int32_128 
 ****************************************************************/
extern int array_int32_128_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_128_string(const char *str, char **endptr);
extern int string_to_array_int32_128(const char *str, void *pValue, char **endptr);
extern int is_array_int32_128_double_conversion_allowed();
extern int array_int32_128_to_double(const void *pValue, double *nValue);
extern int is_array_int32_128_long_conversion_allowed();
extern int array_int32_128_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_128(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_128_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_128(void *pValue);
extern int release_array_int32_128(void *pValue);
extern int copy_array_int32_128(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_128_Utils;

/****************************************************************
 ** array_int32_128_32 
 ****************************************************************/
extern int array_int32_128_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_128_32_string(const char *str, char **endptr);
extern int string_to_array_int32_128_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_128_32_double_conversion_allowed();
extern int array_int32_128_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_128_32_long_conversion_allowed();
extern int array_int32_128_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_128_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_128_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_128_32(void *pValue);
extern int release_array_int32_128_32(void *pValue);
extern int copy_array_int32_128_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_128_32_Utils;

/****************************************************************
 ** array_int32_129 
 ****************************************************************/
extern int array_int32_129_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_129_string(const char *str, char **endptr);
extern int string_to_array_int32_129(const char *str, void *pValue, char **endptr);
extern int is_array_int32_129_double_conversion_allowed();
extern int array_int32_129_to_double(const void *pValue, double *nValue);
extern int is_array_int32_129_long_conversion_allowed();
extern int array_int32_129_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_129(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_129_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_129(void *pValue);
extern int release_array_int32_129(void *pValue);
extern int copy_array_int32_129(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_129_Utils;

/****************************************************************
 ** array_int32_13 
 ****************************************************************/
extern int array_int32_13_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_13_string(const char *str, char **endptr);
extern int string_to_array_int32_13(const char *str, void *pValue, char **endptr);
extern int is_array_int32_13_double_conversion_allowed();
extern int array_int32_13_to_double(const void *pValue, double *nValue);
extern int is_array_int32_13_long_conversion_allowed();
extern int array_int32_13_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_13(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_13_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_13(void *pValue);
extern int release_array_int32_13(void *pValue);
extern int copy_array_int32_13(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_13_Utils;

/****************************************************************
 ** array_int32_131 
 ****************************************************************/
extern int array_int32_131_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_131_string(const char *str, char **endptr);
extern int string_to_array_int32_131(const char *str, void *pValue, char **endptr);
extern int is_array_int32_131_double_conversion_allowed();
extern int array_int32_131_to_double(const void *pValue, double *nValue);
extern int is_array_int32_131_long_conversion_allowed();
extern int array_int32_131_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_131(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_131_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_131(void *pValue);
extern int release_array_int32_131(void *pValue);
extern int copy_array_int32_131(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_131_Utils;

/****************************************************************
 ** array_int32_14 
 ****************************************************************/
extern int array_int32_14_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_14_string(const char *str, char **endptr);
extern int string_to_array_int32_14(const char *str, void *pValue, char **endptr);
extern int is_array_int32_14_double_conversion_allowed();
extern int array_int32_14_to_double(const void *pValue, double *nValue);
extern int is_array_int32_14_long_conversion_allowed();
extern int array_int32_14_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_14(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_14_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_14(void *pValue);
extern int release_array_int32_14(void *pValue);
extern int copy_array_int32_14(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_14_Utils;

/****************************************************************
 ** array_int32_15 
 ****************************************************************/
extern int array_int32_15_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_15_string(const char *str, char **endptr);
extern int string_to_array_int32_15(const char *str, void *pValue, char **endptr);
extern int is_array_int32_15_double_conversion_allowed();
extern int array_int32_15_to_double(const void *pValue, double *nValue);
extern int is_array_int32_15_long_conversion_allowed();
extern int array_int32_15_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_15(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_15_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_15(void *pValue);
extern int release_array_int32_15(void *pValue);
extern int copy_array_int32_15(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_15_Utils;

/****************************************************************
 ** array_int32_150 
 ****************************************************************/
extern int array_int32_150_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_150_string(const char *str, char **endptr);
extern int string_to_array_int32_150(const char *str, void *pValue, char **endptr);
extern int is_array_int32_150_double_conversion_allowed();
extern int array_int32_150_to_double(const void *pValue, double *nValue);
extern int is_array_int32_150_long_conversion_allowed();
extern int array_int32_150_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_150(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_150_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_150(void *pValue);
extern int release_array_int32_150(void *pValue);
extern int copy_array_int32_150(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_150_Utils;

/****************************************************************
 ** array_int32_17 
 ****************************************************************/
extern int array_int32_17_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_17_string(const char *str, char **endptr);
extern int string_to_array_int32_17(const char *str, void *pValue, char **endptr);
extern int is_array_int32_17_double_conversion_allowed();
extern int array_int32_17_to_double(const void *pValue, double *nValue);
extern int is_array_int32_17_long_conversion_allowed();
extern int array_int32_17_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_17(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_17_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_17(void *pValue);
extern int release_array_int32_17(void *pValue);
extern int copy_array_int32_17(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_17_Utils;

/****************************************************************
 ** array_int32_18 
 ****************************************************************/
extern int array_int32_18_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_18_string(const char *str, char **endptr);
extern int string_to_array_int32_18(const char *str, void *pValue, char **endptr);
extern int is_array_int32_18_double_conversion_allowed();
extern int array_int32_18_to_double(const void *pValue, double *nValue);
extern int is_array_int32_18_long_conversion_allowed();
extern int array_int32_18_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_18(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_18_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_18(void *pValue);
extern int release_array_int32_18(void *pValue);
extern int copy_array_int32_18(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_18_Utils;

/****************************************************************
 ** array_int32_198_33 
 ****************************************************************/
extern int array_int32_198_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_198_33_string(const char *str, char **endptr);
extern int string_to_array_int32_198_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_198_33_double_conversion_allowed();
extern int array_int32_198_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_198_33_long_conversion_allowed();
extern int array_int32_198_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_198_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_198_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_198_33(void *pValue);
extern int release_array_int32_198_33(void *pValue);
extern int copy_array_int32_198_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_198_33_Utils;

/****************************************************************
 ** array_int32_2 
 ****************************************************************/
extern int array_int32_2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_string(const char *str, char **endptr);
extern int string_to_array_int32_2(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_double_conversion_allowed();
extern int array_int32_2_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_long_conversion_allowed();
extern int array_int32_2_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2(void *pValue);
extern int release_array_int32_2(void *pValue);
extern int copy_array_int32_2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_Utils;

/****************************************************************
 ** array_int32_20 
 ****************************************************************/
extern int array_int32_20_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_20_string(const char *str, char **endptr);
extern int string_to_array_int32_20(const char *str, void *pValue, char **endptr);
extern int is_array_int32_20_double_conversion_allowed();
extern int array_int32_20_to_double(const void *pValue, double *nValue);
extern int is_array_int32_20_long_conversion_allowed();
extern int array_int32_20_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_20(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_20_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_20(void *pValue);
extern int release_array_int32_20(void *pValue);
extern int copy_array_int32_20(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_20_Utils;

/****************************************************************
 ** array_int32_21 
 ****************************************************************/
extern int array_int32_21_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_21_string(const char *str, char **endptr);
extern int string_to_array_int32_21(const char *str, void *pValue, char **endptr);
extern int is_array_int32_21_double_conversion_allowed();
extern int array_int32_21_to_double(const void *pValue, double *nValue);
extern int is_array_int32_21_long_conversion_allowed();
extern int array_int32_21_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_21(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_21_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_21(void *pValue);
extern int release_array_int32_21(void *pValue);
extern int copy_array_int32_21(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_21_Utils;

/****************************************************************
 ** array_int32_22 
 ****************************************************************/
extern int array_int32_22_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_22_string(const char *str, char **endptr);
extern int string_to_array_int32_22(const char *str, void *pValue, char **endptr);
extern int is_array_int32_22_double_conversion_allowed();
extern int array_int32_22_to_double(const void *pValue, double *nValue);
extern int is_array_int32_22_long_conversion_allowed();
extern int array_int32_22_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_22(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_22_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_22(void *pValue);
extern int release_array_int32_22(void *pValue);
extern int copy_array_int32_22(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_22_Utils;

/****************************************************************
 ** array_int32_221 
 ****************************************************************/
extern int array_int32_221_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_221_string(const char *str, char **endptr);
extern int string_to_array_int32_221(const char *str, void *pValue, char **endptr);
extern int is_array_int32_221_double_conversion_allowed();
extern int array_int32_221_to_double(const void *pValue, double *nValue);
extern int is_array_int32_221_long_conversion_allowed();
extern int array_int32_221_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_221(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_221_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_221(void *pValue);
extern int release_array_int32_221(void *pValue);
extern int copy_array_int32_221(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_221_Utils;

/****************************************************************
 ** array_int32_23 
 ****************************************************************/
extern int array_int32_23_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_23_string(const char *str, char **endptr);
extern int string_to_array_int32_23(const char *str, void *pValue, char **endptr);
extern int is_array_int32_23_double_conversion_allowed();
extern int array_int32_23_to_double(const void *pValue, double *nValue);
extern int is_array_int32_23_long_conversion_allowed();
extern int array_int32_23_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_23(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_23_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_23(void *pValue);
extern int release_array_int32_23(void *pValue);
extern int copy_array_int32_23(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_23_Utils;

/****************************************************************
 ** array_int32_24 
 ****************************************************************/
extern int array_int32_24_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_24_string(const char *str, char **endptr);
extern int string_to_array_int32_24(const char *str, void *pValue, char **endptr);
extern int is_array_int32_24_double_conversion_allowed();
extern int array_int32_24_to_double(const void *pValue, double *nValue);
extern int is_array_int32_24_long_conversion_allowed();
extern int array_int32_24_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_24(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_24_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_24(void *pValue);
extern int release_array_int32_24(void *pValue);
extern int copy_array_int32_24(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_24_Utils;

/****************************************************************
 ** array_int32_25 
 ****************************************************************/
extern int array_int32_25_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_25_string(const char *str, char **endptr);
extern int string_to_array_int32_25(const char *str, void *pValue, char **endptr);
extern int is_array_int32_25_double_conversion_allowed();
extern int array_int32_25_to_double(const void *pValue, double *nValue);
extern int is_array_int32_25_long_conversion_allowed();
extern int array_int32_25_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_25(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_25_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_25(void *pValue);
extern int release_array_int32_25(void *pValue);
extern int copy_array_int32_25(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_25_Utils;

/****************************************************************
 ** array_int32_260 
 ****************************************************************/
extern int array_int32_260_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_260_string(const char *str, char **endptr);
extern int string_to_array_int32_260(const char *str, void *pValue, char **endptr);
extern int is_array_int32_260_double_conversion_allowed();
extern int array_int32_260_to_double(const void *pValue, double *nValue);
extern int is_array_int32_260_long_conversion_allowed();
extern int array_int32_260_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_260(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_260_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_260(void *pValue);
extern int release_array_int32_260(void *pValue);
extern int copy_array_int32_260(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_260_Utils;

/****************************************************************
 ** array_int32_261 
 ****************************************************************/
extern int array_int32_261_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_261_string(const char *str, char **endptr);
extern int string_to_array_int32_261(const char *str, void *pValue, char **endptr);
extern int is_array_int32_261_double_conversion_allowed();
extern int array_int32_261_to_double(const void *pValue, double *nValue);
extern int is_array_int32_261_long_conversion_allowed();
extern int array_int32_261_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_261(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_261_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_261(void *pValue);
extern int release_array_int32_261(void *pValue);
extern int copy_array_int32_261(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_261_Utils;

/****************************************************************
 ** array_int32_266 
 ****************************************************************/
extern int array_int32_266_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_266_string(const char *str, char **endptr);
extern int string_to_array_int32_266(const char *str, void *pValue, char **endptr);
extern int is_array_int32_266_double_conversion_allowed();
extern int array_int32_266_to_double(const void *pValue, double *nValue);
extern int is_array_int32_266_long_conversion_allowed();
extern int array_int32_266_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_266(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_266_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_266(void *pValue);
extern int release_array_int32_266(void *pValue);
extern int copy_array_int32_266(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_266_Utils;

/****************************************************************
 ** array_int32_269 
 ****************************************************************/
extern int array_int32_269_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_269_string(const char *str, char **endptr);
extern int string_to_array_int32_269(const char *str, void *pValue, char **endptr);
extern int is_array_int32_269_double_conversion_allowed();
extern int array_int32_269_to_double(const void *pValue, double *nValue);
extern int is_array_int32_269_long_conversion_allowed();
extern int array_int32_269_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_269(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_269_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_269(void *pValue);
extern int release_array_int32_269(void *pValue);
extern int copy_array_int32_269(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_269_Utils;

/****************************************************************
 ** array_int32_28 
 ****************************************************************/
extern int array_int32_28_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_28_string(const char *str, char **endptr);
extern int string_to_array_int32_28(const char *str, void *pValue, char **endptr);
extern int is_array_int32_28_double_conversion_allowed();
extern int array_int32_28_to_double(const void *pValue, double *nValue);
extern int is_array_int32_28_long_conversion_allowed();
extern int array_int32_28_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_28(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_28_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_28(void *pValue);
extern int release_array_int32_28(void *pValue);
extern int copy_array_int32_28(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_28_Utils;

/****************************************************************
 ** array_int32_280 
 ****************************************************************/
extern int array_int32_280_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_280_string(const char *str, char **endptr);
extern int string_to_array_int32_280(const char *str, void *pValue, char **endptr);
extern int is_array_int32_280_double_conversion_allowed();
extern int array_int32_280_to_double(const void *pValue, double *nValue);
extern int is_array_int32_280_long_conversion_allowed();
extern int array_int32_280_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_280(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_280_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_280(void *pValue);
extern int release_array_int32_280(void *pValue);
extern int copy_array_int32_280(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_280_Utils;

/****************************************************************
 ** array_int32_283 
 ****************************************************************/
extern int array_int32_283_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_283_string(const char *str, char **endptr);
extern int string_to_array_int32_283(const char *str, void *pValue, char **endptr);
extern int is_array_int32_283_double_conversion_allowed();
extern int array_int32_283_to_double(const void *pValue, double *nValue);
extern int is_array_int32_283_long_conversion_allowed();
extern int array_int32_283_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_283(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_283_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_283(void *pValue);
extern int release_array_int32_283(void *pValue);
extern int copy_array_int32_283(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_283_Utils;

/****************************************************************
 ** array_int32_285 
 ****************************************************************/
extern int array_int32_285_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_285_string(const char *str, char **endptr);
extern int string_to_array_int32_285(const char *str, void *pValue, char **endptr);
extern int is_array_int32_285_double_conversion_allowed();
extern int array_int32_285_to_double(const void *pValue, double *nValue);
extern int is_array_int32_285_long_conversion_allowed();
extern int array_int32_285_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_285(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_285_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_285(void *pValue);
extern int release_array_int32_285(void *pValue);
extern int copy_array_int32_285(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_285_Utils;

/****************************************************************
 ** array_int32_289 
 ****************************************************************/
extern int array_int32_289_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_289_string(const char *str, char **endptr);
extern int string_to_array_int32_289(const char *str, void *pValue, char **endptr);
extern int is_array_int32_289_double_conversion_allowed();
extern int array_int32_289_to_double(const void *pValue, double *nValue);
extern int is_array_int32_289_long_conversion_allowed();
extern int array_int32_289_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_289(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_289_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_289(void *pValue);
extern int release_array_int32_289(void *pValue);
extern int copy_array_int32_289(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_289_Utils;

/****************************************************************
 ** array_int32_292 
 ****************************************************************/
extern int array_int32_292_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_292_string(const char *str, char **endptr);
extern int string_to_array_int32_292(const char *str, void *pValue, char **endptr);
extern int is_array_int32_292_double_conversion_allowed();
extern int array_int32_292_to_double(const void *pValue, double *nValue);
extern int is_array_int32_292_long_conversion_allowed();
extern int array_int32_292_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_292(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_292_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_292(void *pValue);
extern int release_array_int32_292(void *pValue);
extern int copy_array_int32_292(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_292_Utils;

/****************************************************************
 ** array_int32_2_32 
 ****************************************************************/
extern int array_int32_2_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_32_string(const char *str, char **endptr);
extern int string_to_array_int32_2_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_32_double_conversion_allowed();
extern int array_int32_2_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_32_long_conversion_allowed();
extern int array_int32_2_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2_32(void *pValue);
extern int release_array_int32_2_32(void *pValue);
extern int copy_array_int32_2_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_32_Utils;

/****************************************************************
 ** array_int32_2_32_32 
 ****************************************************************/
extern int array_int32_2_32_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_32_32_string(const char *str, char **endptr);
extern int string_to_array_int32_2_32_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_32_32_double_conversion_allowed();
extern int array_int32_2_32_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_32_32_long_conversion_allowed();
extern int array_int32_2_32_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2_32_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_32_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2_32_32(void *pValue);
extern int release_array_int32_2_32_32(void *pValue);
extern int copy_array_int32_2_32_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_32_32_Utils;

/****************************************************************
 ** array_int32_2_32_64 
 ****************************************************************/
extern int array_int32_2_32_64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_32_64_string(const char *str, char **endptr);
extern int string_to_array_int32_2_32_64(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_32_64_double_conversion_allowed();
extern int array_int32_2_32_64_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_32_64_long_conversion_allowed();
extern int array_int32_2_32_64_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2_32_64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_32_64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2_32_64(void *pValue);
extern int release_array_int32_2_32_64(void *pValue);
extern int copy_array_int32_2_32_64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_32_64_Utils;

/****************************************************************
 ** array_int32_2_33_99 
 ****************************************************************/
extern int array_int32_2_33_99_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_33_99_string(const char *str, char **endptr);
extern int string_to_array_int32_2_33_99(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_33_99_double_conversion_allowed();
extern int array_int32_2_33_99_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_33_99_long_conversion_allowed();
extern int array_int32_2_33_99_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2_33_99(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_33_99_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2_33_99(void *pValue);
extern int release_array_int32_2_33_99(void *pValue);
extern int copy_array_int32_2_33_99(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_33_99_Utils;

/****************************************************************
 ** array_int32_2_4_8 
 ****************************************************************/
extern int array_int32_2_4_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_4_8_string(const char *str, char **endptr);
extern int string_to_array_int32_2_4_8(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_4_8_double_conversion_allowed();
extern int array_int32_2_4_8_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_4_8_long_conversion_allowed();
extern int array_int32_2_4_8_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2_4_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_4_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2_4_8(void *pValue);
extern int release_array_int32_2_4_8(void *pValue);
extern int copy_array_int32_2_4_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_4_8_Utils;

/****************************************************************
 ** array_int32_3 
 ****************************************************************/
extern int array_int32_3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_3_string(const char *str, char **endptr);
extern int string_to_array_int32_3(const char *str, void *pValue, char **endptr);
extern int is_array_int32_3_double_conversion_allowed();
extern int array_int32_3_to_double(const void *pValue, double *nValue);
extern int is_array_int32_3_long_conversion_allowed();
extern int array_int32_3_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_3(void *pValue);
extern int release_array_int32_3(void *pValue);
extern int copy_array_int32_3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_3_Utils;

/****************************************************************
 ** array_int32_30 
 ****************************************************************/
extern int array_int32_30_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_30_string(const char *str, char **endptr);
extern int string_to_array_int32_30(const char *str, void *pValue, char **endptr);
extern int is_array_int32_30_double_conversion_allowed();
extern int array_int32_30_to_double(const void *pValue, double *nValue);
extern int is_array_int32_30_long_conversion_allowed();
extern int array_int32_30_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_30(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_30_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_30(void *pValue);
extern int release_array_int32_30(void *pValue);
extern int copy_array_int32_30(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_30_Utils;

/****************************************************************
 ** array_int32_301 
 ****************************************************************/
extern int array_int32_301_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_301_string(const char *str, char **endptr);
extern int string_to_array_int32_301(const char *str, void *pValue, char **endptr);
extern int is_array_int32_301_double_conversion_allowed();
extern int array_int32_301_to_double(const void *pValue, double *nValue);
extern int is_array_int32_301_long_conversion_allowed();
extern int array_int32_301_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_301(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_301_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_301(void *pValue);
extern int release_array_int32_301(void *pValue);
extern int copy_array_int32_301(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_301_Utils;

/****************************************************************
 ** array_int32_302 
 ****************************************************************/
extern int array_int32_302_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_302_string(const char *str, char **endptr);
extern int string_to_array_int32_302(const char *str, void *pValue, char **endptr);
extern int is_array_int32_302_double_conversion_allowed();
extern int array_int32_302_to_double(const void *pValue, double *nValue);
extern int is_array_int32_302_long_conversion_allowed();
extern int array_int32_302_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_302(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_302_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_302(void *pValue);
extern int release_array_int32_302(void *pValue);
extern int copy_array_int32_302(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_302_Utils;

/****************************************************************
 ** array_int32_304 
 ****************************************************************/
extern int array_int32_304_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_304_string(const char *str, char **endptr);
extern int string_to_array_int32_304(const char *str, void *pValue, char **endptr);
extern int is_array_int32_304_double_conversion_allowed();
extern int array_int32_304_to_double(const void *pValue, double *nValue);
extern int is_array_int32_304_long_conversion_allowed();
extern int array_int32_304_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_304(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_304_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_304(void *pValue);
extern int release_array_int32_304(void *pValue);
extern int copy_array_int32_304(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_304_Utils;

/****************************************************************
 ** array_int32_307 
 ****************************************************************/
extern int array_int32_307_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_307_string(const char *str, char **endptr);
extern int string_to_array_int32_307(const char *str, void *pValue, char **endptr);
extern int is_array_int32_307_double_conversion_allowed();
extern int array_int32_307_to_double(const void *pValue, double *nValue);
extern int is_array_int32_307_long_conversion_allowed();
extern int array_int32_307_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_307(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_307_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_307(void *pValue);
extern int release_array_int32_307(void *pValue);
extern int copy_array_int32_307(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_307_Utils;

/****************************************************************
 ** array_int32_31 
 ****************************************************************/
extern int array_int32_31_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_31_string(const char *str, char **endptr);
extern int string_to_array_int32_31(const char *str, void *pValue, char **endptr);
extern int is_array_int32_31_double_conversion_allowed();
extern int array_int32_31_to_double(const void *pValue, double *nValue);
extern int is_array_int32_31_long_conversion_allowed();
extern int array_int32_31_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_31(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_31_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_31(void *pValue);
extern int release_array_int32_31(void *pValue);
extern int copy_array_int32_31(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_31_Utils;

/****************************************************************
 ** array_int32_32 
 ****************************************************************/
extern int array_int32_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_32_string(const char *str, char **endptr);
extern int string_to_array_int32_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_32_double_conversion_allowed();
extern int array_int32_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_32_long_conversion_allowed();
extern int array_int32_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_32(void *pValue);
extern int release_array_int32_32(void *pValue);
extern int copy_array_int32_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_32_Utils;

/****************************************************************
 ** array_int32_32_32 
 ****************************************************************/
extern int array_int32_32_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_32_32_string(const char *str, char **endptr);
extern int string_to_array_int32_32_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_32_32_double_conversion_allowed();
extern int array_int32_32_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_32_32_long_conversion_allowed();
extern int array_int32_32_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_32_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_32_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_32_32(void *pValue);
extern int release_array_int32_32_32(void *pValue);
extern int copy_array_int32_32_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_32_32_Utils;

/****************************************************************
 ** array_int32_33 
 ****************************************************************/
extern int array_int32_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_33_string(const char *str, char **endptr);
extern int string_to_array_int32_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_33_double_conversion_allowed();
extern int array_int32_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_33_long_conversion_allowed();
extern int array_int32_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_33(void *pValue);
extern int release_array_int32_33(void *pValue);
extern int copy_array_int32_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_33_Utils;

/****************************************************************
 ** array_int32_350 
 ****************************************************************/
extern int array_int32_350_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_350_string(const char *str, char **endptr);
extern int string_to_array_int32_350(const char *str, void *pValue, char **endptr);
extern int is_array_int32_350_double_conversion_allowed();
extern int array_int32_350_to_double(const void *pValue, double *nValue);
extern int is_array_int32_350_long_conversion_allowed();
extern int array_int32_350_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_350(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_350_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_350(void *pValue);
extern int release_array_int32_350(void *pValue);
extern int copy_array_int32_350(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_350_Utils;

/****************************************************************
 ** array_int32_395 
 ****************************************************************/
extern int array_int32_395_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_395_string(const char *str, char **endptr);
extern int string_to_array_int32_395(const char *str, void *pValue, char **endptr);
extern int is_array_int32_395_double_conversion_allowed();
extern int array_int32_395_to_double(const void *pValue, double *nValue);
extern int is_array_int32_395_long_conversion_allowed();
extern int array_int32_395_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_395(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_395_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_395(void *pValue);
extern int release_array_int32_395(void *pValue);
extern int copy_array_int32_395(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_395_Utils;

/****************************************************************
 ** array_int32_396 
 ****************************************************************/
extern int array_int32_396_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_396_string(const char *str, char **endptr);
extern int string_to_array_int32_396(const char *str, void *pValue, char **endptr);
extern int is_array_int32_396_double_conversion_allowed();
extern int array_int32_396_to_double(const void *pValue, double *nValue);
extern int is_array_int32_396_long_conversion_allowed();
extern int array_int32_396_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_396(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_396_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_396(void *pValue);
extern int release_array_int32_396(void *pValue);
extern int copy_array_int32_396(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_396_Utils;

/****************************************************************
 ** array_int32_3_33 
 ****************************************************************/
extern int array_int32_3_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_3_33_string(const char *str, char **endptr);
extern int string_to_array_int32_3_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_3_33_double_conversion_allowed();
extern int array_int32_3_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_3_33_long_conversion_allowed();
extern int array_int32_3_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_3_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_3_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_3_33(void *pValue);
extern int release_array_int32_3_33(void *pValue);
extern int copy_array_int32_3_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_3_33_Utils;

/****************************************************************
 ** array_int32_3_33_231 
 ****************************************************************/
extern int array_int32_3_33_231_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_3_33_231_string(const char *str, char **endptr);
extern int string_to_array_int32_3_33_231(const char *str, void *pValue, char **endptr);
extern int is_array_int32_3_33_231_double_conversion_allowed();
extern int array_int32_3_33_231_to_double(const void *pValue, double *nValue);
extern int is_array_int32_3_33_231_long_conversion_allowed();
extern int array_int32_3_33_231_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_3_33_231(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_3_33_231_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_3_33_231(void *pValue);
extern int release_array_int32_3_33_231(void *pValue);
extern int copy_array_int32_3_33_231(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_3_33_231_Utils;

/****************************************************************
 ** array_int32_3_33_99 
 ****************************************************************/
extern int array_int32_3_33_99_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_3_33_99_string(const char *str, char **endptr);
extern int string_to_array_int32_3_33_99(const char *str, void *pValue, char **endptr);
extern int is_array_int32_3_33_99_double_conversion_allowed();
extern int array_int32_3_33_99_to_double(const void *pValue, double *nValue);
extern int is_array_int32_3_33_99_long_conversion_allowed();
extern int array_int32_3_33_99_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_3_33_99(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_3_33_99_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_3_33_99(void *pValue);
extern int release_array_int32_3_33_99(void *pValue);
extern int copy_array_int32_3_33_99(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_3_33_99_Utils;

/****************************************************************
 ** array_int32_4 
 ****************************************************************/
extern int array_int32_4_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_4_string(const char *str, char **endptr);
extern int string_to_array_int32_4(const char *str, void *pValue, char **endptr);
extern int is_array_int32_4_double_conversion_allowed();
extern int array_int32_4_to_double(const void *pValue, double *nValue);
extern int is_array_int32_4_long_conversion_allowed();
extern int array_int32_4_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_4(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_4_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_4(void *pValue);
extern int release_array_int32_4(void *pValue);
extern int copy_array_int32_4(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_4_Utils;

/****************************************************************
 ** array_int32_40 
 ****************************************************************/
extern int array_int32_40_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_40_string(const char *str, char **endptr);
extern int string_to_array_int32_40(const char *str, void *pValue, char **endptr);
extern int is_array_int32_40_double_conversion_allowed();
extern int array_int32_40_to_double(const void *pValue, double *nValue);
extern int is_array_int32_40_long_conversion_allowed();
extern int array_int32_40_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_40(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_40_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_40(void *pValue);
extern int release_array_int32_40(void *pValue);
extern int copy_array_int32_40(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_40_Utils;

/****************************************************************
 ** array_int32_400 
 ****************************************************************/
extern int array_int32_400_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_400_string(const char *str, char **endptr);
extern int string_to_array_int32_400(const char *str, void *pValue, char **endptr);
extern int is_array_int32_400_double_conversion_allowed();
extern int array_int32_400_to_double(const void *pValue, double *nValue);
extern int is_array_int32_400_long_conversion_allowed();
extern int array_int32_400_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_400(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_400_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_400(void *pValue);
extern int release_array_int32_400(void *pValue);
extern int copy_array_int32_400(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_400_Utils;

/****************************************************************
 ** array_int32_41 
 ****************************************************************/
extern int array_int32_41_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_41_string(const char *str, char **endptr);
extern int string_to_array_int32_41(const char *str, void *pValue, char **endptr);
extern int is_array_int32_41_double_conversion_allowed();
extern int array_int32_41_to_double(const void *pValue, double *nValue);
extern int is_array_int32_41_long_conversion_allowed();
extern int array_int32_41_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_41(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_41_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_41(void *pValue);
extern int release_array_int32_41(void *pValue);
extern int copy_array_int32_41(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_41_Utils;

/****************************************************************
 ** array_int32_42 
 ****************************************************************/
extern int array_int32_42_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_42_string(const char *str, char **endptr);
extern int string_to_array_int32_42(const char *str, void *pValue, char **endptr);
extern int is_array_int32_42_double_conversion_allowed();
extern int array_int32_42_to_double(const void *pValue, double *nValue);
extern int is_array_int32_42_long_conversion_allowed();
extern int array_int32_42_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_42(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_42_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_42(void *pValue);
extern int release_array_int32_42(void *pValue);
extern int copy_array_int32_42(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_42_Utils;

/****************************************************************
 ** array_int32_428 
 ****************************************************************/
extern int array_int32_428_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_428_string(const char *str, char **endptr);
extern int string_to_array_int32_428(const char *str, void *pValue, char **endptr);
extern int is_array_int32_428_double_conversion_allowed();
extern int array_int32_428_to_double(const void *pValue, double *nValue);
extern int is_array_int32_428_long_conversion_allowed();
extern int array_int32_428_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_428(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_428_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_428(void *pValue);
extern int release_array_int32_428(void *pValue);
extern int copy_array_int32_428(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_428_Utils;

/****************************************************************
 ** array_int32_430 
 ****************************************************************/
extern int array_int32_430_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_430_string(const char *str, char **endptr);
extern int string_to_array_int32_430(const char *str, void *pValue, char **endptr);
extern int is_array_int32_430_double_conversion_allowed();
extern int array_int32_430_to_double(const void *pValue, double *nValue);
extern int is_array_int32_430_long_conversion_allowed();
extern int array_int32_430_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_430(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_430_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_430(void *pValue);
extern int release_array_int32_430(void *pValue);
extern int copy_array_int32_430(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_430_Utils;

/****************************************************************
 ** array_int32_432 
 ****************************************************************/
extern int array_int32_432_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_432_string(const char *str, char **endptr);
extern int string_to_array_int32_432(const char *str, void *pValue, char **endptr);
extern int is_array_int32_432_double_conversion_allowed();
extern int array_int32_432_to_double(const void *pValue, double *nValue);
extern int is_array_int32_432_long_conversion_allowed();
extern int array_int32_432_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_432(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_432_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_432(void *pValue);
extern int release_array_int32_432(void *pValue);
extern int copy_array_int32_432(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_432_Utils;

/****************************************************************
 ** array_int32_444 
 ****************************************************************/
extern int array_int32_444_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_444_string(const char *str, char **endptr);
extern int string_to_array_int32_444(const char *str, void *pValue, char **endptr);
extern int is_array_int32_444_double_conversion_allowed();
extern int array_int32_444_to_double(const void *pValue, double *nValue);
extern int is_array_int32_444_long_conversion_allowed();
extern int array_int32_444_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_444(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_444_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_444(void *pValue);
extern int release_array_int32_444(void *pValue);
extern int copy_array_int32_444(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_444_Utils;

/****************************************************************
 ** array_int32_48 
 ****************************************************************/
extern int array_int32_48_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_48_string(const char *str, char **endptr);
extern int string_to_array_int32_48(const char *str, void *pValue, char **endptr);
extern int is_array_int32_48_double_conversion_allowed();
extern int array_int32_48_to_double(const void *pValue, double *nValue);
extern int is_array_int32_48_long_conversion_allowed();
extern int array_int32_48_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_48(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_48_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_48(void *pValue);
extern int release_array_int32_48(void *pValue);
extern int copy_array_int32_48(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_48_Utils;

/****************************************************************
 ** array_int32_491 
 ****************************************************************/
extern int array_int32_491_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_491_string(const char *str, char **endptr);
extern int string_to_array_int32_491(const char *str, void *pValue, char **endptr);
extern int is_array_int32_491_double_conversion_allowed();
extern int array_int32_491_to_double(const void *pValue, double *nValue);
extern int is_array_int32_491_long_conversion_allowed();
extern int array_int32_491_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_491(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_491_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_491(void *pValue);
extern int release_array_int32_491(void *pValue);
extern int copy_array_int32_491(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_491_Utils;

/****************************************************************
 ** array_int32_492 
 ****************************************************************/
extern int array_int32_492_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_492_string(const char *str, char **endptr);
extern int string_to_array_int32_492(const char *str, void *pValue, char **endptr);
extern int is_array_int32_492_double_conversion_allowed();
extern int array_int32_492_to_double(const void *pValue, double *nValue);
extern int is_array_int32_492_long_conversion_allowed();
extern int array_int32_492_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_492(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_492_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_492(void *pValue);
extern int release_array_int32_492(void *pValue);
extern int copy_array_int32_492(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_492_Utils;

/****************************************************************
 ** array_int32_494 
 ****************************************************************/
extern int array_int32_494_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_494_string(const char *str, char **endptr);
extern int string_to_array_int32_494(const char *str, void *pValue, char **endptr);
extern int is_array_int32_494_double_conversion_allowed();
extern int array_int32_494_to_double(const void *pValue, double *nValue);
extern int is_array_int32_494_long_conversion_allowed();
extern int array_int32_494_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_494(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_494_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_494(void *pValue);
extern int release_array_int32_494(void *pValue);
extern int copy_array_int32_494(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_494_Utils;

/****************************************************************
 ** array_int32_496 
 ****************************************************************/
extern int array_int32_496_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_496_string(const char *str, char **endptr);
extern int string_to_array_int32_496(const char *str, void *pValue, char **endptr);
extern int is_array_int32_496_double_conversion_allowed();
extern int array_int32_496_to_double(const void *pValue, double *nValue);
extern int is_array_int32_496_long_conversion_allowed();
extern int array_int32_496_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_496(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_496_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_496(void *pValue);
extern int release_array_int32_496(void *pValue);
extern int copy_array_int32_496(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_496_Utils;

/****************************************************************
 ** array_int32_499 
 ****************************************************************/
extern int array_int32_499_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_499_string(const char *str, char **endptr);
extern int string_to_array_int32_499(const char *str, void *pValue, char **endptr);
extern int is_array_int32_499_double_conversion_allowed();
extern int array_int32_499_to_double(const void *pValue, double *nValue);
extern int is_array_int32_499_long_conversion_allowed();
extern int array_int32_499_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_499(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_499_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_499(void *pValue);
extern int release_array_int32_499(void *pValue);
extern int copy_array_int32_499(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_499_Utils;

/****************************************************************
 ** array_int32_4_32_128 
 ****************************************************************/
extern int array_int32_4_32_128_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_4_32_128_string(const char *str, char **endptr);
extern int string_to_array_int32_4_32_128(const char *str, void *pValue, char **endptr);
extern int is_array_int32_4_32_128_double_conversion_allowed();
extern int array_int32_4_32_128_to_double(const void *pValue, double *nValue);
extern int is_array_int32_4_32_128_long_conversion_allowed();
extern int array_int32_4_32_128_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_4_32_128(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_4_32_128_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_4_32_128(void *pValue);
extern int release_array_int32_4_32_128(void *pValue);
extern int copy_array_int32_4_32_128(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_4_32_128_Utils;

/****************************************************************
 ** array_int32_5 
 ****************************************************************/
extern int array_int32_5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_5_string(const char *str, char **endptr);
extern int string_to_array_int32_5(const char *str, void *pValue, char **endptr);
extern int is_array_int32_5_double_conversion_allowed();
extern int array_int32_5_to_double(const void *pValue, double *nValue);
extern int is_array_int32_5_long_conversion_allowed();
extern int array_int32_5_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_5(void *pValue);
extern int release_array_int32_5(void *pValue);
extern int copy_array_int32_5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_5_Utils;

/****************************************************************
 ** array_int32_500_500 
 ****************************************************************/
extern int array_int32_500_500_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_500_500_string(const char *str, char **endptr);
extern int string_to_array_int32_500_500(const char *str, void *pValue, char **endptr);
extern int is_array_int32_500_500_double_conversion_allowed();
extern int array_int32_500_500_to_double(const void *pValue, double *nValue);
extern int is_array_int32_500_500_long_conversion_allowed();
extern int array_int32_500_500_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_500_500(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_500_500_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_500_500(void *pValue);
extern int release_array_int32_500_500(void *pValue);
extern int copy_array_int32_500_500(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_500_500_Utils;

/****************************************************************
 ** array_int32_56 
 ****************************************************************/
extern int array_int32_56_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_56_string(const char *str, char **endptr);
extern int string_to_array_int32_56(const char *str, void *pValue, char **endptr);
extern int is_array_int32_56_double_conversion_allowed();
extern int array_int32_56_to_double(const void *pValue, double *nValue);
extern int is_array_int32_56_long_conversion_allowed();
extern int array_int32_56_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_56(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_56_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_56(void *pValue);
extern int release_array_int32_56(void *pValue);
extern int copy_array_int32_56(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_56_Utils;

/****************************************************************
 ** array_int32_6 
 ****************************************************************/
extern int array_int32_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_6_string(const char *str, char **endptr);
extern int string_to_array_int32_6(const char *str, void *pValue, char **endptr);
extern int is_array_int32_6_double_conversion_allowed();
extern int array_int32_6_to_double(const void *pValue, double *nValue);
extern int is_array_int32_6_long_conversion_allowed();
extern int array_int32_6_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_6(void *pValue);
extern int release_array_int32_6(void *pValue);
extern int copy_array_int32_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_6_Utils;

/****************************************************************
 ** array_int32_627 
 ****************************************************************/
extern int array_int32_627_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_627_string(const char *str, char **endptr);
extern int string_to_array_int32_627(const char *str, void *pValue, char **endptr);
extern int is_array_int32_627_double_conversion_allowed();
extern int array_int32_627_to_double(const void *pValue, double *nValue);
extern int is_array_int32_627_long_conversion_allowed();
extern int array_int32_627_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_627(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_627_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_627(void *pValue);
extern int release_array_int32_627(void *pValue);
extern int copy_array_int32_627(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_627_Utils;

/****************************************************************
 ** array_int32_64 
 ****************************************************************/
extern int array_int32_64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_64_string(const char *str, char **endptr);
extern int string_to_array_int32_64(const char *str, void *pValue, char **endptr);
extern int is_array_int32_64_double_conversion_allowed();
extern int array_int32_64_to_double(const void *pValue, double *nValue);
extern int is_array_int32_64_long_conversion_allowed();
extern int array_int32_64_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_64(void *pValue);
extern int release_array_int32_64(void *pValue);
extern int copy_array_int32_64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_64_Utils;

/****************************************************************
 ** array_int32_64_32 
 ****************************************************************/
extern int array_int32_64_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_64_32_string(const char *str, char **endptr);
extern int string_to_array_int32_64_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_64_32_double_conversion_allowed();
extern int array_int32_64_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_64_32_long_conversion_allowed();
extern int array_int32_64_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_64_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_64_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_64_32(void *pValue);
extern int release_array_int32_64_32(void *pValue);
extern int copy_array_int32_64_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_64_32_Utils;

/****************************************************************
 ** array_int32_65 
 ****************************************************************/
extern int array_int32_65_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_65_string(const char *str, char **endptr);
extern int string_to_array_int32_65(const char *str, void *pValue, char **endptr);
extern int is_array_int32_65_double_conversion_allowed();
extern int array_int32_65_to_double(const void *pValue, double *nValue);
extern int is_array_int32_65_long_conversion_allowed();
extern int array_int32_65_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_65(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_65_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_65(void *pValue);
extern int release_array_int32_65(void *pValue);
extern int copy_array_int32_65(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_65_Utils;

/****************************************************************
 ** array_int32_66_33 
 ****************************************************************/
extern int array_int32_66_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_66_33_string(const char *str, char **endptr);
extern int string_to_array_int32_66_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_66_33_double_conversion_allowed();
extern int array_int32_66_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_66_33_long_conversion_allowed();
extern int array_int32_66_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_66_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_66_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_66_33(void *pValue);
extern int release_array_int32_66_33(void *pValue);
extern int copy_array_int32_66_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_66_33_Utils;

/****************************************************************
 ** array_int32_68 
 ****************************************************************/
extern int array_int32_68_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_68_string(const char *str, char **endptr);
extern int string_to_array_int32_68(const char *str, void *pValue, char **endptr);
extern int is_array_int32_68_double_conversion_allowed();
extern int array_int32_68_to_double(const void *pValue, double *nValue);
extern int is_array_int32_68_long_conversion_allowed();
extern int array_int32_68_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_68(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_68_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_68(void *pValue);
extern int release_array_int32_68(void *pValue);
extern int copy_array_int32_68(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_68_Utils;

/****************************************************************
 ** array_int32_6_221 
 ****************************************************************/
extern int array_int32_6_221_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_6_221_string(const char *str, char **endptr);
extern int string_to_array_int32_6_221(const char *str, void *pValue, char **endptr);
extern int is_array_int32_6_221_double_conversion_allowed();
extern int array_int32_6_221_to_double(const void *pValue, double *nValue);
extern int is_array_int32_6_221_long_conversion_allowed();
extern int array_int32_6_221_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_6_221(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_6_221_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_6_221(void *pValue);
extern int release_array_int32_6_221(void *pValue);
extern int copy_array_int32_6_221(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_6_221_Utils;

/****************************************************************
 ** array_int32_7 
 ****************************************************************/
extern int array_int32_7_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_7_string(const char *str, char **endptr);
extern int string_to_array_int32_7(const char *str, void *pValue, char **endptr);
extern int is_array_int32_7_double_conversion_allowed();
extern int array_int32_7_to_double(const void *pValue, double *nValue);
extern int is_array_int32_7_long_conversion_allowed();
extern int array_int32_7_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_7(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_7_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_7(void *pValue);
extern int release_array_int32_7(void *pValue);
extern int copy_array_int32_7(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_7_Utils;

/****************************************************************
 ** array_int32_70 
 ****************************************************************/
extern int array_int32_70_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_70_string(const char *str, char **endptr);
extern int string_to_array_int32_70(const char *str, void *pValue, char **endptr);
extern int is_array_int32_70_double_conversion_allowed();
extern int array_int32_70_to_double(const void *pValue, double *nValue);
extern int is_array_int32_70_long_conversion_allowed();
extern int array_int32_70_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_70(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_70_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_70(void *pValue);
extern int release_array_int32_70(void *pValue);
extern int copy_array_int32_70(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_70_Utils;

/****************************************************************
 ** array_int32_72 
 ****************************************************************/
extern int array_int32_72_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_72_string(const char *str, char **endptr);
extern int string_to_array_int32_72(const char *str, void *pValue, char **endptr);
extern int is_array_int32_72_double_conversion_allowed();
extern int array_int32_72_to_double(const void *pValue, double *nValue);
extern int is_array_int32_72_long_conversion_allowed();
extern int array_int32_72_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_72(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_72_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_72(void *pValue);
extern int release_array_int32_72(void *pValue);
extern int copy_array_int32_72(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_72_Utils;

/****************************************************************
 ** array_int32_7_33_231 
 ****************************************************************/
extern int array_int32_7_33_231_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_7_33_231_string(const char *str, char **endptr);
extern int string_to_array_int32_7_33_231(const char *str, void *pValue, char **endptr);
extern int is_array_int32_7_33_231_double_conversion_allowed();
extern int array_int32_7_33_231_to_double(const void *pValue, double *nValue);
extern int is_array_int32_7_33_231_long_conversion_allowed();
extern int array_int32_7_33_231_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_7_33_231(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_7_33_231_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_7_33_231(void *pValue);
extern int release_array_int32_7_33_231(void *pValue);
extern int copy_array_int32_7_33_231(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_7_33_231_Utils;

/****************************************************************
 ** array_int32_8 
 ****************************************************************/
extern int array_int32_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_8_string(const char *str, char **endptr);
extern int string_to_array_int32_8(const char *str, void *pValue, char **endptr);
extern int is_array_int32_8_double_conversion_allowed();
extern int array_int32_8_to_double(const void *pValue, double *nValue);
extern int is_array_int32_8_long_conversion_allowed();
extern int array_int32_8_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_8(void *pValue);
extern int release_array_int32_8(void *pValue);
extern int copy_array_int32_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_8_Utils;

/****************************************************************
 ** array_int32_888 
 ****************************************************************/
extern int array_int32_888_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_888_string(const char *str, char **endptr);
extern int string_to_array_int32_888(const char *str, void *pValue, char **endptr);
extern int is_array_int32_888_double_conversion_allowed();
extern int array_int32_888_to_double(const void *pValue, double *nValue);
extern int is_array_int32_888_long_conversion_allowed();
extern int array_int32_888_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_888(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_888_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_888(void *pValue);
extern int release_array_int32_888(void *pValue);
extern int copy_array_int32_888(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_888_Utils;

/****************************************************************
 ** array_int32_891 
 ****************************************************************/
extern int array_int32_891_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_891_string(const char *str, char **endptr);
extern int string_to_array_int32_891(const char *str, void *pValue, char **endptr);
extern int is_array_int32_891_double_conversion_allowed();
extern int array_int32_891_to_double(const void *pValue, double *nValue);
extern int is_array_int32_891_long_conversion_allowed();
extern int array_int32_891_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_891(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_891_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_891(void *pValue);
extern int release_array_int32_891(void *pValue);
extern int copy_array_int32_891(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_891_Utils;

/****************************************************************
 ** array_int32_894 
 ****************************************************************/
extern int array_int32_894_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_894_string(const char *str, char **endptr);
extern int string_to_array_int32_894(const char *str, void *pValue, char **endptr);
extern int is_array_int32_894_double_conversion_allowed();
extern int array_int32_894_to_double(const void *pValue, double *nValue);
extern int is_array_int32_894_long_conversion_allowed();
extern int array_int32_894_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_894(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_894_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_894(void *pValue);
extern int release_array_int32_894(void *pValue);
extern int copy_array_int32_894(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_894_Utils;

/****************************************************************
 ** array_int32_8_4 
 ****************************************************************/
extern int array_int32_8_4_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_8_4_string(const char *str, char **endptr);
extern int string_to_array_int32_8_4(const char *str, void *pValue, char **endptr);
extern int is_array_int32_8_4_double_conversion_allowed();
extern int array_int32_8_4_to_double(const void *pValue, double *nValue);
extern int is_array_int32_8_4_long_conversion_allowed();
extern int array_int32_8_4_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_8_4(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_8_4_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_8_4(void *pValue);
extern int release_array_int32_8_4(void *pValue);
extern int copy_array_int32_8_4(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_8_4_Utils;

/****************************************************************
 ** array_int32_9 
 ****************************************************************/
extern int array_int32_9_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_9_string(const char *str, char **endptr);
extern int string_to_array_int32_9(const char *str, void *pValue, char **endptr);
extern int is_array_int32_9_double_conversion_allowed();
extern int array_int32_9_to_double(const void *pValue, double *nValue);
extern int is_array_int32_9_long_conversion_allowed();
extern int array_int32_9_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_9(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_9_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_9(void *pValue);
extern int release_array_int32_9(void *pValue);
extern int copy_array_int32_9(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_9_Utils;

/****************************************************************
 ** array_int32_95_33 
 ****************************************************************/
extern int array_int32_95_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_95_33_string(const char *str, char **endptr);
extern int string_to_array_int32_95_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_95_33_double_conversion_allowed();
extern int array_int32_95_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_95_33_long_conversion_allowed();
extern int array_int32_95_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_95_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_95_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_95_33(void *pValue);
extern int release_array_int32_95_33(void *pValue);
extern int copy_array_int32_95_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_95_33_Utils;

/****************************************************************
 ** array_int32_961 
 ****************************************************************/
extern int array_int32_961_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_961_string(const char *str, char **endptr);
extern int string_to_array_int32_961(const char *str, void *pValue, char **endptr);
extern int is_array_int32_961_double_conversion_allowed();
extern int array_int32_961_to_double(const void *pValue, double *nValue);
extern int is_array_int32_961_long_conversion_allowed();
extern int array_int32_961_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_961(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_961_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_961(void *pValue);
extern int release_array_int32_961(void *pValue);
extern int copy_array_int32_961(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_961_Utils;

/****************************************************************
 ** array_int32_964 
 ****************************************************************/
extern int array_int32_964_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_964_string(const char *str, char **endptr);
extern int string_to_array_int32_964(const char *str, void *pValue, char **endptr);
extern int is_array_int32_964_double_conversion_allowed();
extern int array_int32_964_to_double(const void *pValue, double *nValue);
extern int is_array_int32_964_long_conversion_allowed();
extern int array_int32_964_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_964(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_964_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_964(void *pValue);
extern int release_array_int32_964(void *pValue);
extern int copy_array_int32_964(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_964_Utils;

/****************************************************************
 ** array_int32_97 
 ****************************************************************/
extern int array_int32_97_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_97_string(const char *str, char **endptr);
extern int string_to_array_int32_97(const char *str, void *pValue, char **endptr);
extern int is_array_int32_97_double_conversion_allowed();
extern int array_int32_97_to_double(const void *pValue, double *nValue);
extern int is_array_int32_97_long_conversion_allowed();
extern int array_int32_97_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_97(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_97_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_97(void *pValue);
extern int release_array_int32_97(void *pValue);
extern int copy_array_int32_97(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_97_Utils;

/****************************************************************
 ** array_int32_975 
 ****************************************************************/
extern int array_int32_975_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_975_string(const char *str, char **endptr);
extern int string_to_array_int32_975(const char *str, void *pValue, char **endptr);
extern int is_array_int32_975_double_conversion_allowed();
extern int array_int32_975_to_double(const void *pValue, double *nValue);
extern int is_array_int32_975_long_conversion_allowed();
extern int array_int32_975_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_975(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_975_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_975(void *pValue);
extern int release_array_int32_975(void *pValue);
extern int copy_array_int32_975(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_975_Utils;

/****************************************************************
 ** array_int32_978 
 ****************************************************************/
extern int array_int32_978_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_978_string(const char *str, char **endptr);
extern int string_to_array_int32_978(const char *str, void *pValue, char **endptr);
extern int is_array_int32_978_double_conversion_allowed();
extern int array_int32_978_to_double(const void *pValue, double *nValue);
extern int is_array_int32_978_long_conversion_allowed();
extern int array_int32_978_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_978(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_978_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_978(void *pValue);
extern int release_array_int32_978(void *pValue);
extern int copy_array_int32_978(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_978_Utils;

/****************************************************************
 ** array_int32_987 
 ****************************************************************/
extern int array_int32_987_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_987_string(const char *str, char **endptr);
extern int string_to_array_int32_987(const char *str, void *pValue, char **endptr);
extern int is_array_int32_987_double_conversion_allowed();
extern int array_int32_987_to_double(const void *pValue, double *nValue);
extern int is_array_int32_987_long_conversion_allowed();
extern int array_int32_987_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_987(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_987_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_987(void *pValue);
extern int release_array_int32_987(void *pValue);
extern int copy_array_int32_987(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_987_Utils;

/****************************************************************
 ** array_int32_99 
 ****************************************************************/
extern int array_int32_99_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_99_string(const char *str, char **endptr);
extern int string_to_array_int32_99(const char *str, void *pValue, char **endptr);
extern int is_array_int32_99_double_conversion_allowed();
extern int array_int32_99_to_double(const void *pValue, double *nValue);
extern int is_array_int32_99_long_conversion_allowed();
extern int array_int32_99_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_99(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_99_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_99(void *pValue);
extern int release_array_int32_99(void *pValue);
extern int copy_array_int32_99(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_99_Utils;

/****************************************************************
 ** array_int32_990 
 ****************************************************************/
extern int array_int32_990_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_990_string(const char *str, char **endptr);
extern int string_to_array_int32_990(const char *str, void *pValue, char **endptr);
extern int is_array_int32_990_double_conversion_allowed();
extern int array_int32_990_to_double(const void *pValue, double *nValue);
extern int is_array_int32_990_long_conversion_allowed();
extern int array_int32_990_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_990(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_990_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_990(void *pValue);
extern int release_array_int32_990(void *pValue);
extern int copy_array_int32_990(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_990_Utils;

/****************************************************************
 ** array_int32_99_33 
 ****************************************************************/
extern int array_int32_99_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_99_33_string(const char *str, char **endptr);
extern int string_to_array_int32_99_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_99_33_double_conversion_allowed();
extern int array_int32_99_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_99_33_long_conversion_allowed();
extern int array_int32_99_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_99_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_99_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_99_33(void *pValue);
extern int release_array_int32_99_33(void *pValue);
extern int copy_array_int32_99_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_99_33_Utils;

/****************************************************************
 ** ASafe_Data_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_Data_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafe_Data_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_Data_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_Data_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafe_Data_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafe_Data_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafe_Data_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafe_Data_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafe_Data_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafe_Data_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafe_Data_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafe_Data_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafe_Data_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafe_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafe_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafe_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafe_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafe_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafe_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafe_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafe_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafe_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafe_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafe_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeDistanceDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafeDistanceDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeDistanceDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeDistanceDefinition_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafeDistanceDefinition_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafeDistanceDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafeDistanceDefinition_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafeDistanceDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafeDistanceDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafeDistanceDefinition_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafeDistanceDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeRow_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeRow_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafeRow_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeRow_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeRow_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafeRow_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafeRow_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafeRow_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafeRow_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafeRow_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafeRow_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafeRow_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafeRow_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafeRow_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeSpeedDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafeSpeedDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeSpeedDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeSpeedDefinition_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafeSpeedDefinition_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafeSpeedDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafeSpeedDefinition_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafeSpeedDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafeSpeedDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafeSpeedDefinition_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafeSpeedDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** aTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_aTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aTractionIdentity_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_aTractionIdentity_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_aTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_aTractionIdentity_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_aTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_aTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_aTractionIdentity_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_aTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** av_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_av_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_Map_t_SDMConversionModelPkg_double_conversion_allowed();
extern int av_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_av_Map_t_SDMConversionModelPkg_long_conversion_allowed();
extern int av_Map_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_av_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_av_Map_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_av_Map_t_SDMConversionModelPkg(void *pValue);
extern int release_av_Map_t_SDMConversionModelPkg(void *pValue);
extern int copy_av_Map_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_av_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** av_MergedMap_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_MergedMap_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_av_MergedMap_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_MergedMap_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_MergedMap_t_SDMConversionModelPkg_double_conversion_allowed();
extern int av_MergedMap_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_av_MergedMap_t_SDMConversionModelPkg_long_conversion_allowed();
extern int av_MergedMap_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_av_MergedMap_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_av_MergedMap_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_av_MergedMap_t_SDMConversionModelPkg(void *pValue);
extern int release_av_MergedMap_t_SDMConversionModelPkg(void *pValue);
extern int copy_av_MergedMap_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_av_MergedMap_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** B_data_internal_T_InfraLib 
 ****************************************************************/
extern int B_data_internal_T_InfraLib_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_B_data_internal_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_B_data_internal_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_B_data_internal_T_InfraLib_double_conversion_allowed();
extern int B_data_internal_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int is_B_data_internal_T_InfraLib_long_conversion_allowed();
extern int B_data_internal_T_InfraLib_to_long(const void *pValue, long *nValue);
extern void compare_B_data_internal_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_B_data_internal_T_InfraLib_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_B_data_internal_T_InfraLib(void *pValue);
extern int release_B_data_internal_T_InfraLib(void *pValue);
extern int copy_B_data_internal_T_InfraLib(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_B_data_internal_T_InfraLib_Utils;

/****************************************************************
 ** BaliseGroupData_Basics 
 ****************************************************************/
extern int BaliseGroupData_Basics_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BaliseGroupData_Basics_string(const char *str, char **endptr);
extern int string_to_BaliseGroupData_Basics(const char *str, void *pValue, char **endptr);
extern int is_BaliseGroupData_Basics_double_conversion_allowed();
extern int BaliseGroupData_Basics_to_double(const void *pValue, double *nValue);
extern int is_BaliseGroupData_Basics_long_conversion_allowed();
extern int BaliseGroupData_Basics_to_long(const void *pValue, long *nValue);
extern void compare_BaliseGroupData_Basics(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BaliseGroupData_Basics_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BaliseGroupData_Basics(void *pValue);
extern int release_BaliseGroupData_Basics(void *pValue);
extern int copy_BaliseGroupData_Basics(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BaliseGroupData_Basics_Utils;

/****************************************************************
 ** BaliseGroupData_TM 
 ****************************************************************/
extern int BaliseGroupData_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BaliseGroupData_TM_string(const char *str, char **endptr);
extern int string_to_BaliseGroupData_TM(const char *str, void *pValue, char **endptr);
extern int is_BaliseGroupData_TM_double_conversion_allowed();
extern int BaliseGroupData_TM_to_double(const void *pValue, double *nValue);
extern int is_BaliseGroupData_TM_long_conversion_allowed();
extern int BaliseGroupData_TM_to_long(const void *pValue, long *nValue);
extern void compare_BaliseGroupData_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BaliseGroupData_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BaliseGroupData_TM(void *pValue);
extern int release_BaliseGroupData_TM(void *pValue);
extern int copy_BaliseGroupData_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BaliseGroupData_TM_Utils;

/****************************************************************
 ** BaliseTelegramHeader_int_T_TM 
 ****************************************************************/
extern int BaliseTelegramHeader_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BaliseTelegramHeader_int_T_TM_string(const char *str, char **endptr);
extern int string_to_BaliseTelegramHeader_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_BaliseTelegramHeader_int_T_TM_double_conversion_allowed();
extern int BaliseTelegramHeader_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_BaliseTelegramHeader_int_T_TM_long_conversion_allowed();
extern int BaliseTelegramHeader_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_BaliseTelegramHeader_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BaliseTelegramHeader_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BaliseTelegramHeader_int_T_TM(void *pValue);
extern int release_BaliseTelegramHeader_int_T_TM(void *pValue);
extern int copy_BaliseTelegramHeader_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BaliseTelegramHeader_int_T_TM_Utils;

/****************************************************************
 ** BCAccumulator_type_CalcBrakingCurves_Pkg 
 ****************************************************************/
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BCAccumulator_type_CalcBrakingCurves_Pkg_string(const char *str, char **endptr);
extern int string_to_BCAccumulator_type_CalcBrakingCurves_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCAccumulator_type_CalcBrakingCurves_Pkg_double_conversion_allowed();
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BCAccumulator_type_CalcBrakingCurves_Pkg_long_conversion_allowed();
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BCAccumulator_type_CalcBrakingCurves_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BCAccumulator_type_CalcBrakingCurves_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BCAccumulator_type_CalcBrakingCurves_Pkg(void *pValue);
extern int release_BCAccumulator_type_CalcBrakingCurves_Pkg(void *pValue);
extern int copy_BCAccumulator_type_CalcBrakingCurves_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BCAccumulator_type_CalcBrakingCurves_Pkg_Utils;

/****************************************************************
 ** BCD_DMI_Types_Pkg 
 ****************************************************************/
extern int BCD_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BCD_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_DMI_Types_Pkg_double_conversion_allowed();
extern int BCD_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BCD_DMI_Types_Pkg_long_conversion_allowed();
extern int BCD_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BCD_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BCD_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BCD_DMI_Types_Pkg(void *pValue);
extern int release_BCD_DMI_Types_Pkg(void *pValue);
extern int copy_BCD_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BCD_DMI_Types_Pkg_Utils;

/****************************************************************
 ** BCD_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int BCD_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BCD_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int BCD_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BCD_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int BCD_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BCD_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BCD_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BCD_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_BCD_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_BCD_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BCD_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** bec_t_TargetLimits_Pkg 
 ****************************************************************/
extern int bec_t_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_bec_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_bec_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_bec_t_TargetLimits_Pkg_double_conversion_allowed();
extern int bec_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_bec_t_TargetLimits_Pkg_long_conversion_allowed();
extern int bec_t_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_bec_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_bec_t_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_bec_t_TargetLimits_Pkg(void *pValue);
extern int release_bec_t_TargetLimits_Pkg(void *pValue);
extern int copy_bec_t_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_bec_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_double_conversion_allowed();
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_long_conversion_allowed();
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int release_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int copy_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_double_conversion_allowed();
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_long_conversion_allowed();
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int release_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int copy_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** BG_Header_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Header_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_Header_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Header_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Header_T_BG_Types_Pkg_double_conversion_allowed();
extern int BG_Header_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_Header_T_BG_Types_Pkg_long_conversion_allowed();
extern int BG_Header_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_Header_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_Header_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_Header_T_BG_Types_Pkg(void *pValue);
extern int release_BG_Header_T_BG_Types_Pkg(void *pValue);
extern int copy_BG_Header_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_Header_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Message_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Message_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_Message_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Message_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Message_T_BG_Types_Pkg_double_conversion_allowed();
extern int BG_Message_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_Message_T_BG_Types_Pkg_long_conversion_allowed();
extern int BG_Message_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_Message_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_Message_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_Message_T_BG_Types_Pkg(void *pValue);
extern int release_BG_Message_T_BG_Types_Pkg(void *pValue);
extern int copy_BG_Message_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_Message_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Orientation_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_Orientation_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Orientation_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Orientation_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_Orientation_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_Orientation_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_Orientation_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_Orientation_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_BG_Orientation_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_BG_Orientation_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_Orientation_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** BGCollector_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BGCollector_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_BGCollector_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BGCollector_T_Receive_TrackSide_Msg_Pkg_double_conversion_allowed();
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BGCollector_T_Receive_TrackSide_Msg_Pkg_long_conversion_allowed();
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BGCollector_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BGCollector_T_Receive_TrackSide_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BGCollector_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int release_BGCollector_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int copy_BGCollector_T_Receive_TrackSide_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BGCollector_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** Brake_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_command_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_inhibition_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_inhibition_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_inhibition_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_inhibition_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_inhibition_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_inhibition_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_inhibition_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_inhibition_command_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_inhibition_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_inhibition_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_inhibition_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_pressure_value_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_pressure_value_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_pressure_value_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_pressure_value_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_pressure_value_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_pressure_value_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_pressure_value_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_pressure_value_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_pressure_value_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_pressure_value_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_pressure_value_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_status_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** cab_ID_T_TIU_Types_Pkg 
 ****************************************************************/
extern int cab_ID_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_cab_ID_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_cab_ID_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cab_ID_T_TIU_Types_Pkg_double_conversion_allowed();
extern int cab_ID_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_cab_ID_T_TIU_Types_Pkg_long_conversion_allowed();
extern int cab_ID_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_cab_ID_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_cab_ID_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_cab_ID_T_TIU_Types_Pkg(void *pValue);
extern int release_cab_ID_T_TIU_Types_Pkg(void *pValue);
extern int copy_cab_ID_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_cab_ID_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** centerOfBalisePosition_T_BG_Types_Pkg 
 ****************************************************************/
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_centerOfBalisePosition_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_centerOfBalisePosition_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_centerOfBalisePosition_T_BG_Types_Pkg_double_conversion_allowed();
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_centerOfBalisePosition_T_BG_Types_Pkg_long_conversion_allowed();
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_centerOfBalisePosition_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_centerOfBalisePosition_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_centerOfBalisePosition_T_BG_Types_Pkg(void *pValue);
extern int release_centerOfBalisePosition_T_BG_Types_Pkg(void *pValue);
extern int copy_centerOfBalisePosition_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_centerOfBalisePosition_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** Change_of_allowed_current_consumption_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(void *pValue);
extern int release_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(void *pValue);
extern int copy_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Change_traction_system_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_traction_system_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Change_traction_system_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_traction_system_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_traction_system_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Change_traction_system_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Change_traction_system_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Change_traction_system_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Change_traction_system_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Change_traction_system_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Change_traction_system_T_TIU_Types_Pkg(void *pValue);
extern int release_Change_traction_system_T_TIU_Types_Pkg(void *pValue);
extern int copy_Change_traction_system_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Change_traction_system_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Clock_T 
 ****************************************************************/
extern int Clock_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Clock_T_string(const char *str, char **endptr);
extern int string_to_Clock_T(const char *str, void *pValue, char **endptr);
extern int is_Clock_T_double_conversion_allowed();
extern int Clock_T_to_double(const void *pValue, double *nValue);
extern int is_Clock_T_long_conversion_allowed();
extern int Clock_T_to_long(const void *pValue, long *nValue);
extern void compare_Clock_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Clock_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Clock_T(void *pValue);
extern int release_Clock_T(void *pValue);
extern int copy_Clock_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Clock_T_Utils;

/****************************************************************
 ** cmdRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_cmdRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_cmdRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cmdRadioUnit_T_API_RadioCommunication_Pkg_double_conversion_allowed();
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int is_cmdRadioUnit_T_API_RadioCommunication_Pkg_long_conversion_allowed();
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_cmdRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_cmdRadioUnit_T_API_RadioCommunication_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_cmdRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int release_cmdRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int copy_cmdRadioUnit_T_API_RadioCommunication_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_cmdRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** coeff_BrakeBasic_t_SDMConversionModelPkg 
 ****************************************************************/
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_coeff_BrakeBasic_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_coeff_BrakeBasic_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_coeff_BrakeBasic_t_SDMConversionModelPkg_double_conversion_allowed();
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_coeff_BrakeBasic_t_SDMConversionModelPkg_long_conversion_allowed();
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_coeff_BrakeBasic_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_coeff_BrakeBasic_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_coeff_BrakeBasic_t_SDMConversionModelPkg(void *pValue);
extern int release_coeff_BrakeBasic_t_SDMConversionModelPkg(void *pValue);
extern int copy_coeff_BrakeBasic_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_coeff_BrakeBasic_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** CompressedBaliseMessage_TM 
 ****************************************************************/
extern int CompressedBaliseMessage_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CompressedBaliseMessage_TM_string(const char *str, char **endptr);
extern int string_to_CompressedBaliseMessage_TM(const char *str, void *pValue, char **endptr);
extern int is_CompressedBaliseMessage_TM_double_conversion_allowed();
extern int CompressedBaliseMessage_TM_to_double(const void *pValue, double *nValue);
extern int is_CompressedBaliseMessage_TM_long_conversion_allowed();
extern int CompressedBaliseMessage_TM_to_long(const void *pValue, long *nValue);
extern void compare_CompressedBaliseMessage_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CompressedBaliseMessage_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CompressedBaliseMessage_TM(void *pValue);
extern int release_CompressedBaliseMessage_TM(void *pValue);
extern int copy_CompressedBaliseMessage_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CompressedBaliseMessage_TM_Utils;

/****************************************************************
 ** CompressedPacketData_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPacketData_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CompressedPacketData_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPacketData_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPacketData_T_Common_Types_Pkg_double_conversion_allowed();
extern int CompressedPacketData_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_CompressedPacketData_T_Common_Types_Pkg_long_conversion_allowed();
extern int CompressedPacketData_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_CompressedPacketData_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CompressedPacketData_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CompressedPacketData_T_Common_Types_Pkg(void *pValue);
extern int release_CompressedPacketData_T_Common_Types_Pkg(void *pValue);
extern int copy_CompressedPacketData_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CompressedPacketData_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** CompressedPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CompressedPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPackets_T_Common_Types_Pkg_double_conversion_allowed();
extern int CompressedPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_CompressedPackets_T_Common_Types_Pkg_long_conversion_allowed();
extern int CompressedPackets_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_CompressedPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CompressedPackets_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CompressedPackets_T_Common_Types_Pkg(void *pValue);
extern int release_CompressedPackets_T_Common_Types_Pkg(void *pValue);
extern int copy_CompressedPackets_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CompressedPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** CompressedRadioMessage_TM 
 ****************************************************************/
extern int CompressedRadioMessage_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CompressedRadioMessage_TM_string(const char *str, char **endptr);
extern int string_to_CompressedRadioMessage_TM(const char *str, void *pValue, char **endptr);
extern int is_CompressedRadioMessage_TM_double_conversion_allowed();
extern int CompressedRadioMessage_TM_to_double(const void *pValue, double *nValue);
extern int is_CompressedRadioMessage_TM_long_conversion_allowed();
extern int CompressedRadioMessage_TM_to_long(const void *pValue, long *nValue);
extern void compare_CompressedRadioMessage_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CompressedRadioMessage_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CompressedRadioMessage_TM(void *pValue);
extern int release_CompressedRadioMessage_TM(void *pValue);
extern int copy_CompressedRadioMessage_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CompressedRadioMessage_TM_Utils;

/****************************************************************
 ** connection_ids_T_Handover_Pkg 
 ****************************************************************/
extern int connection_ids_T_Handover_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_connection_ids_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_connection_ids_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connection_ids_T_Handover_Pkg_double_conversion_allowed();
extern int connection_ids_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int is_connection_ids_T_Handover_Pkg_long_conversion_allowed();
extern int connection_ids_T_Handover_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_connection_ids_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_connection_ids_T_Handover_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_connection_ids_T_Handover_Pkg(void *pValue);
extern int release_connection_ids_T_Handover_Pkg(void *pValue);
extern int copy_connection_ids_T_Handover_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_connection_ids_T_Handover_Pkg_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_INT_T_DATA 
 ****************************************************************/
extern int connectionStatusRadioUnit_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_connectionStatusRadioUnit_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_INT_T_DATA_double_conversion_allowed();
extern int connectionStatusRadioUnit_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_connectionStatusRadioUnit_INT_T_DATA_long_conversion_allowed();
extern int connectionStatusRadioUnit_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_connectionStatusRadioUnit_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_connectionStatusRadioUnit_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_connectionStatusRadioUnit_INT_T_DATA(void *pValue);
extern int release_connectionStatusRadioUnit_INT_T_DATA(void *pValue);
extern int copy_connectionStatusRadioUnit_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_INT_T_DATA_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_double_conversion_allowed();
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int is_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_long_conversion_allowed();
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int release_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int copy_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** CurveCollection_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int CurveCollection_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CurveCollection_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_CurveCollection_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_CurveCollection_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int CurveCollection_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_CurveCollection_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int CurveCollection_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_CurveCollection_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CurveCollection_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CurveCollection_T_CalcBrakingCurves_types(void *pValue);
extern int release_CurveCollection_T_CalcBrakingCurves_types(void *pValue);
extern int copy_CurveCollection_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CurveCollection_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** D_CYCLOC 
 ****************************************************************/
extern int D_CYCLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_CYCLOC_string(const char *str, char **endptr);
extern int string_to_D_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_D_CYCLOC_double_conversion_allowed();
extern int D_CYCLOC_to_double(const void *pValue, double *nValue);
extern int is_D_CYCLOC_long_conversion_allowed();
extern int D_CYCLOC_to_long(const void *pValue, long *nValue);
extern void compare_D_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_CYCLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_CYCLOC(void *pValue);
extern int release_D_CYCLOC(void *pValue);
extern int copy_D_CYCLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_CYCLOC_Utils;

/****************************************************************
 ** D_DP 
 ****************************************************************/
extern int D_DP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_DP_string(const char *str, char **endptr);
extern int string_to_D_DP(const char *str, void *pValue, char **endptr);
extern int is_D_DP_double_conversion_allowed();
extern int D_DP_to_double(const void *pValue, double *nValue);
extern int is_D_DP_long_conversion_allowed();
extern int D_DP_to_long(const void *pValue, long *nValue);
extern void compare_D_DP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_DP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_DP(void *pValue);
extern int release_D_DP(void *pValue);
extern int copy_D_DP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_DP_Utils;

/****************************************************************
 ** D_EMERGENCYSTOP 
 ****************************************************************/
extern int D_EMERGENCYSTOP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_D_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_D_EMERGENCYSTOP_double_conversion_allowed();
extern int D_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int is_D_EMERGENCYSTOP_long_conversion_allowed();
extern int D_EMERGENCYSTOP_to_long(const void *pValue, long *nValue);
extern void compare_D_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_EMERGENCYSTOP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_EMERGENCYSTOP(void *pValue);
extern int release_D_EMERGENCYSTOP(void *pValue);
extern int copy_D_EMERGENCYSTOP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_EMERGENCYSTOP_Utils;

/****************************************************************
 ** D_ENDTIMERSTARTLOC 
 ****************************************************************/
extern int D_ENDTIMERSTARTLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_ENDTIMERSTARTLOC_string(const char *str, char **endptr);
extern int string_to_D_ENDTIMERSTARTLOC(const char *str, void *pValue, char **endptr);
extern int is_D_ENDTIMERSTARTLOC_double_conversion_allowed();
extern int D_ENDTIMERSTARTLOC_to_double(const void *pValue, double *nValue);
extern int is_D_ENDTIMERSTARTLOC_long_conversion_allowed();
extern int D_ENDTIMERSTARTLOC_to_long(const void *pValue, long *nValue);
extern void compare_D_ENDTIMERSTARTLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_ENDTIMERSTARTLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_ENDTIMERSTARTLOC(void *pValue);
extern int release_D_ENDTIMERSTARTLOC(void *pValue);
extern int copy_D_ENDTIMERSTARTLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_ENDTIMERSTARTLOC_Utils;

/****************************************************************
 ** D_GRADIENT 
 ****************************************************************/
extern int D_GRADIENT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_GRADIENT_string(const char *str, char **endptr);
extern int string_to_D_GRADIENT(const char *str, void *pValue, char **endptr);
extern int is_D_GRADIENT_double_conversion_allowed();
extern int D_GRADIENT_to_double(const void *pValue, double *nValue);
extern int is_D_GRADIENT_long_conversion_allowed();
extern int D_GRADIENT_to_long(const void *pValue, long *nValue);
extern void compare_D_GRADIENT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_GRADIENT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_GRADIENT(void *pValue);
extern int release_D_GRADIENT(void *pValue);
extern int copy_D_GRADIENT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_GRADIENT_Utils;

/****************************************************************
 ** D_LEVELTR 
 ****************************************************************/
extern int D_LEVELTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LEVELTR_string(const char *str, char **endptr);
extern int string_to_D_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_D_LEVELTR_double_conversion_allowed();
extern int D_LEVELTR_to_double(const void *pValue, double *nValue);
extern int is_D_LEVELTR_long_conversion_allowed();
extern int D_LEVELTR_to_long(const void *pValue, long *nValue);
extern void compare_D_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LEVELTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LEVELTR(void *pValue);
extern int release_D_LEVELTR(void *pValue);
extern int copy_D_LEVELTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LEVELTR_Utils;

/****************************************************************
 ** D_LINK 
 ****************************************************************/
extern int D_LINK_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LINK_string(const char *str, char **endptr);
extern int string_to_D_LINK(const char *str, void *pValue, char **endptr);
extern int is_D_LINK_double_conversion_allowed();
extern int D_LINK_to_double(const void *pValue, double *nValue);
extern int is_D_LINK_long_conversion_allowed();
extern int D_LINK_to_long(const void *pValue, long *nValue);
extern void compare_D_LINK(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LINK_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LINK(void *pValue);
extern int release_D_LINK(void *pValue);
extern int copy_D_LINK(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LINK_Utils;

/****************************************************************
 ** D_LOC 
 ****************************************************************/
extern int D_LOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LOC_string(const char *str, char **endptr);
extern int string_to_D_LOC(const char *str, void *pValue, char **endptr);
extern int is_D_LOC_double_conversion_allowed();
extern int D_LOC_to_double(const void *pValue, double *nValue);
extern int is_D_LOC_long_conversion_allowed();
extern int D_LOC_to_long(const void *pValue, long *nValue);
extern void compare_D_LOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LOC(void *pValue);
extern int release_D_LOC(void *pValue);
extern int copy_D_LOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LOC_Utils;

/****************************************************************
 ** D_LRBG 
 ****************************************************************/
extern int D_LRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LRBG_string(const char *str, char **endptr);
extern int string_to_D_LRBG(const char *str, void *pValue, char **endptr);
extern int is_D_LRBG_double_conversion_allowed();
extern int D_LRBG_to_double(const void *pValue, double *nValue);
extern int is_D_LRBG_long_conversion_allowed();
extern int D_LRBG_to_long(const void *pValue, long *nValue);
extern void compare_D_LRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LRBG(void *pValue);
extern int release_D_LRBG(void *pValue);
extern int copy_D_LRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LRBG_Utils;

/****************************************************************
 ** D_MAMODE 
 ****************************************************************/
extern int D_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_MAMODE_string(const char *str, char **endptr);
extern int string_to_D_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_D_MAMODE_double_conversion_allowed();
extern int D_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_D_MAMODE_long_conversion_allowed();
extern int D_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_D_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_MAMODE(void *pValue);
extern int release_D_MAMODE(void *pValue);
extern int copy_D_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_MAMODE_Utils;

/****************************************************************
 ** D_NVOVTRP 
 ****************************************************************/
extern int D_NVOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_D_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVOVTRP_double_conversion_allowed();
extern int D_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int is_D_NVOVTRP_long_conversion_allowed();
extern int D_NVOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_D_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVOVTRP(void *pValue);
extern int release_D_NVOVTRP(void *pValue);
extern int copy_D_NVOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVOVTRP_Utils;

/****************************************************************
 ** D_NVPOTRP 
 ****************************************************************/
extern int D_NVPOTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVPOTRP_string(const char *str, char **endptr);
extern int string_to_D_NVPOTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVPOTRP_double_conversion_allowed();
extern int D_NVPOTRP_to_double(const void *pValue, double *nValue);
extern int is_D_NVPOTRP_long_conversion_allowed();
extern int D_NVPOTRP_to_long(const void *pValue, long *nValue);
extern void compare_D_NVPOTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVPOTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVPOTRP(void *pValue);
extern int release_D_NVPOTRP(void *pValue);
extern int copy_D_NVPOTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVPOTRP_Utils;

/****************************************************************
 ** D_NVROLL 
 ****************************************************************/
extern int D_NVROLL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVROLL_string(const char *str, char **endptr);
extern int string_to_D_NVROLL(const char *str, void *pValue, char **endptr);
extern int is_D_NVROLL_double_conversion_allowed();
extern int D_NVROLL_to_double(const void *pValue, double *nValue);
extern int is_D_NVROLL_long_conversion_allowed();
extern int D_NVROLL_to_long(const void *pValue, long *nValue);
extern void compare_D_NVROLL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVROLL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVROLL(void *pValue);
extern int release_D_NVROLL(void *pValue);
extern int copy_D_NVROLL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVROLL_Utils;

/****************************************************************
 ** D_NVSTFF 
 ****************************************************************/
extern int D_NVSTFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVSTFF_string(const char *str, char **endptr);
extern int string_to_D_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_D_NVSTFF_double_conversion_allowed();
extern int D_NVSTFF_to_double(const void *pValue, double *nValue);
extern int is_D_NVSTFF_long_conversion_allowed();
extern int D_NVSTFF_to_long(const void *pValue, long *nValue);
extern void compare_D_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVSTFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVSTFF(void *pValue);
extern int release_D_NVSTFF(void *pValue);
extern int copy_D_NVSTFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVSTFF_Utils;

/****************************************************************
 ** D_OL 
 ****************************************************************/
extern int D_OL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_OL_string(const char *str, char **endptr);
extern int string_to_D_OL(const char *str, void *pValue, char **endptr);
extern int is_D_OL_double_conversion_allowed();
extern int D_OL_to_double(const void *pValue, double *nValue);
extern int is_D_OL_long_conversion_allowed();
extern int D_OL_to_long(const void *pValue, long *nValue);
extern void compare_D_OL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_OL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_OL(void *pValue);
extern int release_D_OL(void *pValue);
extern int copy_D_OL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_OL_Utils;

/****************************************************************
 ** D_RBCTR 
 ****************************************************************/
extern int D_RBCTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_RBCTR_string(const char *str, char **endptr);
extern int string_to_D_RBCTR(const char *str, void *pValue, char **endptr);
extern int is_D_RBCTR_double_conversion_allowed();
extern int D_RBCTR_to_double(const void *pValue, double *nValue);
extern int is_D_RBCTR_long_conversion_allowed();
extern int D_RBCTR_to_long(const void *pValue, long *nValue);
extern void compare_D_RBCTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_RBCTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_RBCTR(void *pValue);
extern int release_D_RBCTR(void *pValue);
extern int copy_D_RBCTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_RBCTR_Utils;

/****************************************************************
 ** D_REF 
 ****************************************************************/
extern int D_REF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_REF_string(const char *str, char **endptr);
extern int string_to_D_REF(const char *str, void *pValue, char **endptr);
extern int is_D_REF_double_conversion_allowed();
extern int D_REF_to_double(const void *pValue, double *nValue);
extern int is_D_REF_long_conversion_allowed();
extern int D_REF_to_long(const void *pValue, long *nValue);
extern void compare_D_REF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_REF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_REF(void *pValue);
extern int release_D_REF(void *pValue);
extern int copy_D_REF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_REF_Utils;

/****************************************************************
 ** D_REVERSE 
 ****************************************************************/
extern int D_REVERSE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_REVERSE_string(const char *str, char **endptr);
extern int string_to_D_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_REVERSE_double_conversion_allowed();
extern int D_REVERSE_to_double(const void *pValue, double *nValue);
extern int is_D_REVERSE_long_conversion_allowed();
extern int D_REVERSE_to_long(const void *pValue, long *nValue);
extern void compare_D_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_REVERSE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_REVERSE(void *pValue);
extern int release_D_REVERSE(void *pValue);
extern int copy_D_REVERSE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_REVERSE_Utils;

/****************************************************************
 ** D_SECTIONTIMERSTOPLOC 
 ****************************************************************/
extern int D_SECTIONTIMERSTOPLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_SECTIONTIMERSTOPLOC_string(const char *str, char **endptr);
extern int string_to_D_SECTIONTIMERSTOPLOC(const char *str, void *pValue, char **endptr);
extern int is_D_SECTIONTIMERSTOPLOC_double_conversion_allowed();
extern int D_SECTIONTIMERSTOPLOC_to_double(const void *pValue, double *nValue);
extern int is_D_SECTIONTIMERSTOPLOC_long_conversion_allowed();
extern int D_SECTIONTIMERSTOPLOC_to_long(const void *pValue, long *nValue);
extern void compare_D_SECTIONTIMERSTOPLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_SECTIONTIMERSTOPLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_SECTIONTIMERSTOPLOC(void *pValue);
extern int release_D_SECTIONTIMERSTOPLOC(void *pValue);
extern int copy_D_SECTIONTIMERSTOPLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_SECTIONTIMERSTOPLOC_Utils;

/****************************************************************
 ** D_SR 
 ****************************************************************/
extern int D_SR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_SR_string(const char *str, char **endptr);
extern int string_to_D_SR(const char *str, void *pValue, char **endptr);
extern int is_D_SR_double_conversion_allowed();
extern int D_SR_to_double(const void *pValue, double *nValue);
extern int is_D_SR_long_conversion_allowed();
extern int D_SR_to_long(const void *pValue, long *nValue);
extern void compare_D_SR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_SR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_SR(void *pValue);
extern int release_D_SR(void *pValue);
extern int copy_D_SR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_SR_Utils;

/****************************************************************
 ** D_STARTOL 
 ****************************************************************/
extern int D_STARTOL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_STARTOL_string(const char *str, char **endptr);
extern int string_to_D_STARTOL(const char *str, void *pValue, char **endptr);
extern int is_D_STARTOL_double_conversion_allowed();
extern int D_STARTOL_to_double(const void *pValue, double *nValue);
extern int is_D_STARTOL_long_conversion_allowed();
extern int D_STARTOL_to_long(const void *pValue, long *nValue);
extern void compare_D_STARTOL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_STARTOL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_STARTOL(void *pValue);
extern int release_D_STARTOL(void *pValue);
extern int copy_D_STARTOL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_STARTOL_Utils;

/****************************************************************
 ** D_STARTREVERSE 
 ****************************************************************/
extern int D_STARTREVERSE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_STARTREVERSE_string(const char *str, char **endptr);
extern int string_to_D_STARTREVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_STARTREVERSE_double_conversion_allowed();
extern int D_STARTREVERSE_to_double(const void *pValue, double *nValue);
extern int is_D_STARTREVERSE_long_conversion_allowed();
extern int D_STARTREVERSE_to_long(const void *pValue, long *nValue);
extern void compare_D_STARTREVERSE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_STARTREVERSE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_STARTREVERSE(void *pValue);
extern int release_D_STARTREVERSE(void *pValue);
extern int copy_D_STARTREVERSE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_STARTREVERSE_Utils;

/****************************************************************
 ** D_STATIC 
 ****************************************************************/
extern int D_STATIC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_STATIC_string(const char *str, char **endptr);
extern int string_to_D_STATIC(const char *str, void *pValue, char **endptr);
extern int is_D_STATIC_double_conversion_allowed();
extern int D_STATIC_to_double(const void *pValue, double *nValue);
extern int is_D_STATIC_long_conversion_allowed();
extern int D_STATIC_to_long(const void *pValue, long *nValue);
extern void compare_D_STATIC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_STATIC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_STATIC(void *pValue);
extern int release_D_STATIC(void *pValue);
extern int copy_D_STATIC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_STATIC_Utils;

/****************************************************************
 ** D_TAFDISPLAY 
 ****************************************************************/
extern int D_TAFDISPLAY_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_TAFDISPLAY_string(const char *str, char **endptr);
extern int string_to_D_TAFDISPLAY(const char *str, void *pValue, char **endptr);
extern int is_D_TAFDISPLAY_double_conversion_allowed();
extern int D_TAFDISPLAY_to_double(const void *pValue, double *nValue);
extern int is_D_TAFDISPLAY_long_conversion_allowed();
extern int D_TAFDISPLAY_to_long(const void *pValue, long *nValue);
extern void compare_D_TAFDISPLAY(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_TAFDISPLAY_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_TAFDISPLAY(void *pValue);
extern int release_D_TAFDISPLAY(void *pValue);
extern int copy_D_TAFDISPLAY(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_TAFDISPLAY_Utils;

/****************************************************************
 ** D_test_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_current_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_current_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_current_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_current_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_current_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_current_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_current_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_distance_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_distance_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_distance_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_distance_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_distance_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_distance_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_distance_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_distance_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_distance_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_distance_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_distance_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_distance_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_distance_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_distance_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackcond_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_trackcond_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_trackcond_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_trackcond_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_trackcond_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackinit_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackinit_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_trackinit_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackinit_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackinit_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_trackinit_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_trackinit_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_trackinit_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_trackinit_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_trackinit_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_trackinit_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_trackinit_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_trackinit_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_trackinit_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_traction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_traction_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_traction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_traction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_traction_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_traction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_traction_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_traction_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_traction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_traction_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_traction_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_traction_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_traction_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_traction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_TRACKCOND 
 ****************************************************************/
extern int D_TRACKCOND_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_D_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_D_TRACKCOND_double_conversion_allowed();
extern int D_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int is_D_TRACKCOND_long_conversion_allowed();
extern int D_TRACKCOND_to_long(const void *pValue, long *nValue);
extern void compare_D_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_TRACKCOND_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_TRACKCOND(void *pValue);
extern int release_D_TRACKCOND(void *pValue);
extern int copy_D_TRACKCOND(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_TRACKCOND_Utils;

/****************************************************************
 ** D_TSR 
 ****************************************************************/
extern int D_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_TSR_string(const char *str, char **endptr);
extern int string_to_D_TSR(const char *str, void *pValue, char **endptr);
extern int is_D_TSR_double_conversion_allowed();
extern int D_TSR_to_double(const void *pValue, double *nValue);
extern int is_D_TSR_long_conversion_allowed();
extern int D_TSR_to_long(const void *pValue, long *nValue);
extern void compare_D_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_TSR(void *pValue);
extern int release_D_TSR(void *pValue);
extern int copy_D_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_TSR_Utils;

/****************************************************************
 ** D_VALIDNV 
 ****************************************************************/
extern int D_VALIDNV_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_VALIDNV_string(const char *str, char **endptr);
extern int string_to_D_VALIDNV(const char *str, void *pValue, char **endptr);
extern int is_D_VALIDNV_double_conversion_allowed();
extern int D_VALIDNV_to_double(const void *pValue, double *nValue);
extern int is_D_VALIDNV_long_conversion_allowed();
extern int D_VALIDNV_to_long(const void *pValue, long *nValue);
extern void compare_D_VALIDNV(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_VALIDNV_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_VALIDNV(void *pValue);
extern int release_D_VALIDNV(void *pValue);
extern int copy_D_VALIDNV(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_VALIDNV_Utils;

/****************************************************************
 ** dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg 
 ****************************************************************/
extern int dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_string(const char *str, char **endptr);
extern int string_to_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_double_conversion_allowed();
extern int dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_to_double(const void *pValue, double *nValue);
extern int is_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_long_conversion_allowed();
extern int dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(void *pValue);
extern int release_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(void *pValue);
extern int copy_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_Utils;

/****************************************************************
 ** DataForDMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForDMI_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DataForDMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForDMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForDMI_t_TrackAtlasTypes_double_conversion_allowed();
extern int DataForDMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DataForDMI_t_TrackAtlasTypes_long_conversion_allowed();
extern int DataForDMI_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DataForDMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DataForDMI_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DataForDMI_t_TrackAtlasTypes(void *pValue);
extern int release_DataForDMI_t_TrackAtlasTypes(void *pValue);
extern int copy_DataForDMI_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DataForDMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForModeAndLevel_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DataForModeAndLevel_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForModeAndLevel_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForModeAndLevel_t_TrackAtlasTypes_double_conversion_allowed();
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DataForModeAndLevel_t_TrackAtlasTypes_long_conversion_allowed();
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DataForModeAndLevel_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DataForModeAndLevel_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DataForModeAndLevel_t_TrackAtlasTypes(void *pValue);
extern int release_DataForModeAndLevel_t_TrackAtlasTypes(void *pValue);
extern int copy_DataForModeAndLevel_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DataForModeAndLevel_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForSupervision_nextGen_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DataForSupervision_nextGen_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForSupervision_nextGen_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForSupervision_nextGen_t_TrackAtlasTypes_double_conversion_allowed();
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DataForSupervision_nextGen_t_TrackAtlasTypes_long_conversion_allowed();
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DataForSupervision_nextGen_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DataForSupervision_nextGen_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DataForSupervision_nextGen_t_TrackAtlasTypes(void *pValue);
extern int release_DataForSupervision_nextGen_t_TrackAtlasTypes(void *pValue);
extern int copy_DataForSupervision_nextGen_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DataForSupervision_nextGen_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DiagMsg_T_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsg_T_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DiagMsg_T_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsg_T_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsg_T_RBC_Diagnostic_Pkg_double_conversion_allowed();
extern int DiagMsg_T_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DiagMsg_T_RBC_Diagnostic_Pkg_long_conversion_allowed();
extern int DiagMsg_T_RBC_Diagnostic_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DiagMsg_T_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DiagMsg_T_RBC_Diagnostic_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DiagMsg_T_RBC_Diagnostic_Pkg(void *pValue);
extern int release_DiagMsg_T_RBC_Diagnostic_Pkg(void *pValue);
extern int copy_DiagMsg_T_RBC_Diagnostic_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DiagMsg_T_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgSrc_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgSrc_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DiagMsgSrc_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgSrc_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgSrc_E_RBC_Diagnostic_Pkg_double_conversion_allowed();
extern int DiagMsgSrc_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DiagMsgSrc_E_RBC_Diagnostic_Pkg_long_conversion_allowed();
extern int DiagMsgSrc_E_RBC_Diagnostic_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DiagMsgSrc_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DiagMsgSrc_E_RBC_Diagnostic_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DiagMsgSrc_E_RBC_Diagnostic_Pkg(void *pValue);
extern int release_DiagMsgSrc_E_RBC_Diagnostic_Pkg(void *pValue);
extern int copy_DiagMsgSrc_E_RBC_Diagnostic_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DiagMsgSrc_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgText_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgText_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DiagMsgText_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgText_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgText_E_RBC_Diagnostic_Pkg_double_conversion_allowed();
extern int DiagMsgText_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DiagMsgText_E_RBC_Diagnostic_Pkg_long_conversion_allowed();
extern int DiagMsgText_E_RBC_Diagnostic_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DiagMsgText_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DiagMsgText_E_RBC_Diagnostic_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DiagMsgText_E_RBC_Diagnostic_Pkg(void *pValue);
extern int release_DiagMsgText_E_RBC_Diagnostic_Pkg(void *pValue);
extern int copy_DiagMsgText_E_RBC_Diagnostic_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DiagMsgText_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** DiagMsgType_E_RBC_Diagnostic_Pkg 
 ****************************************************************/
extern int DiagMsgType_E_RBC_Diagnostic_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DiagMsgType_E_RBC_Diagnostic_Pkg_string(const char *str, char **endptr);
extern int string_to_DiagMsgType_E_RBC_Diagnostic_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiagMsgType_E_RBC_Diagnostic_Pkg_double_conversion_allowed();
extern int DiagMsgType_E_RBC_Diagnostic_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DiagMsgType_E_RBC_Diagnostic_Pkg_long_conversion_allowed();
extern int DiagMsgType_E_RBC_Diagnostic_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DiagMsgType_E_RBC_Diagnostic_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DiagMsgType_E_RBC_Diagnostic_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DiagMsgType_E_RBC_Diagnostic_Pkg(void *pValue);
extern int release_DiagMsgType_E_RBC_Diagnostic_Pkg(void *pValue);
extern int copy_DiagMsgType_E_RBC_Diagnostic_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DiagMsgType_E_RBC_Diagnostic_Pkg_Utils;

/****************************************************************
 ** Diff_T_Packet_Types_Pkg 
 ****************************************************************/
extern int Diff_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Diff_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Diff_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Diff_T_Packet_Types_Pkg_double_conversion_allowed();
extern int Diff_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Diff_T_Packet_Types_Pkg_long_conversion_allowed();
extern int Diff_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Diff_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Diff_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Diff_T_Packet_Types_Pkg(void *pValue);
extern int release_Diff_T_Packet_Types_Pkg(void *pValue);
extern int copy_Diff_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Diff_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** DiffArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int DiffArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DiffArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DiffArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiffArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int DiffArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DiffArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int DiffArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DiffArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DiffArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DiffArray_T_Packet_Types_Pkg(void *pValue);
extern int release_DiffArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_DiffArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DiffArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Adhesion_Factor_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Adhesion_Factor_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Adhesion_Factor_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Adhesion_Factor_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Adhesion_Factor_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Adhesion_Factor_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Adhesion_Factor_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Adhesion_Factor_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Adhesion_Factor_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Adhesion_Factor_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Adhesion_Factor_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_Adhesion_Factor_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_Adhesion_Factor_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Adhesion_Factor_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_airtightSystem_INT_T_DATA 
 ****************************************************************/
extern int DMI_airtightSystem_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_airtightSystem_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_INT_T_DATA_double_conversion_allowed();
extern int DMI_airtightSystem_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_airtightSystem_INT_T_DATA_long_conversion_allowed();
extern int DMI_airtightSystem_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_airtightSystem_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_airtightSystem_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_airtightSystem_INT_T_DATA(void *pValue);
extern int release_DMI_airtightSystem_INT_T_DATA(void *pValue);
extern int copy_DMI_airtightSystem_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_airtightSystem_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_airtightSystem_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_airtightSystem_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_airtightSystem_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_airtightSystem_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_airtightSystem_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_airtightSystem_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_airtightSystem_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_airtightSystem_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_airtightSystem_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Available_Menu_INT_T_DATA 
 ****************************************************************/
extern int DMI_Available_Menu_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Available_Menu_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_INT_T_DATA_double_conversion_allowed();
extern int DMI_Available_Menu_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Available_Menu_INT_T_DATA_long_conversion_allowed();
extern int DMI_Available_Menu_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Available_Menu_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Available_Menu_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Available_Menu_INT_T_DATA(void *pValue);
extern int release_DMI_Available_Menu_INT_T_DATA(void *pValue);
extern int copy_DMI_Available_Menu_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Available_Menu_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Available_Menu_int_T_DATA 
 ****************************************************************/
extern int DMI_Available_Menu_int_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Available_Menu_int_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_int_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_int_T_DATA_double_conversion_allowed();
extern int DMI_Available_Menu_int_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Available_Menu_int_T_DATA_long_conversion_allowed();
extern int DMI_Available_Menu_int_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Available_Menu_int_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Available_Menu_int_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Available_Menu_int_T_DATA(void *pValue);
extern int release_DMI_Available_Menu_int_T_DATA(void *pValue);
extern int copy_DMI_Available_Menu_int_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Available_Menu_int_T_DATA_Utils;

/****************************************************************
 ** DMI_Available_Menu_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Available_Menu_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Available_Menu_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Available_Menu_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Available_Menu_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Available_Menu_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Available_Menu_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Available_Menu_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Available_Menu_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_brakeModel_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_brakeModel_id_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_brakeModel_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_INT_T_DATA_double_conversion_allowed();
extern int DMI_brakeModel_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_brakeModel_id_INT_T_DATA_long_conversion_allowed();
extern int DMI_brakeModel_id_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_brakeModel_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_brakeModel_id_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_brakeModel_id_INT_T_DATA(void *pValue);
extern int release_DMI_brakeModel_id_INT_T_DATA(void *pValue);
extern int copy_DMI_brakeModel_id_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_brakeModel_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_brakeModel_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_brakeModel_id_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_brakeModel_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_brakeModel_id_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_brakeModel_id_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_brakeModel_id_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_brakeModel_id_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Cabin_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Cabin_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Cabin_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Cabin_Identifier_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Cabin_Identifier_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Cabin_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Cabin_Identifier_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Cabin_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Cabin_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Cabin_Identifier_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Cabin_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_context_TXT_MSG_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_context_TXT_MSG_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_context_TXT_MSG_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_context_TXT_MSG_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_context_TXT_MSG_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_context_TXT_MSG_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_context_TXT_MSG_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_context_TXT_MSG_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_context_TXT_MSG_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_context_TXT_MSG_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_context_TXT_MSG_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Display_Control_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Display_Control_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Display_Control_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Display_Control_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Display_Control_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Display_Control_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Display_Control_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Display_Control_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Display_Control_int_array_T_DATA(void *pValue);
extern int release_DMI_Display_Control_int_array_T_DATA(void *pValue);
extern int copy_DMI_Display_Control_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Display_Control_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_DMI_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_DMI_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DMI_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DMI_Identifier_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_DMI_Identifier_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_DMI_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_DMI_Identifier_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_DMI_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_DMI_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_DMI_Identifier_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_DMI_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Driver_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Identifier_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Driver_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Identifier_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Driver_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Driver_Identifier_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Driver_Identifier_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Driver_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Driver_Identifier_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Driver_Identifier_int_array_T_DATA(void *pValue);
extern int release_DMI_Driver_Identifier_int_array_T_DATA(void *pValue);
extern int copy_DMI_Driver_Identifier_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Driver_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_Driver_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Driver_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Driver_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Driver_Request_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Driver_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Driver_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Driver_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Driver_Request_int_array_T_DATA(void *pValue);
extern int release_DMI_Driver_Request_int_array_T_DATA(void *pValue);
extern int copy_DMI_Driver_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Driver_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_DriverAck_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_DriverAck_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverAck_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverAck_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_DriverAck_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_DriverAck_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_DriverAck_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_DriverAck_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_DriverAck_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_DriverAck_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_DriverAck_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DriverRequest_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_DriverRequest_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverRequest_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverRequest_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_DriverRequest_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_DriverRequest_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_DriverRequest_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_DriverRequest_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_DriverRequest_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_DriverRequest_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_DriverRequest_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Dynamic_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Dynamic_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Dynamic_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Dynamic_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Dynamic_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Dynamic_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Dynamic_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Dynamic_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Dynamic_int_array_T_DATA(void *pValue);
extern int release_DMI_Dynamic_int_array_T_DATA(void *pValue);
extern int copy_DMI_Dynamic_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Dynamic_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Entry_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Entry_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Entry_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Entry_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Entry_Request_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Entry_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Entry_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Entry_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Entry_Request_int_array_T_DATA(void *pValue);
extern int release_DMI_Entry_Request_int_array_T_DATA(void *pValue);
extern int copy_DMI_Entry_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Entry_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Coded_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Coded_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Coded_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Coded_Train_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Coded_Train_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Coded_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Coded_Train_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Coded_Train_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_EVC_Coded_Train_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_EVC_Coded_Train_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Coded_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Level_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Level_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Level_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_EVC_Level_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_EVC_Level_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Radio_Net_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Radio_Net_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Radio_Net_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_EVC_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_EVC_Radio_Net_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_status_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_status_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_status_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_status_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_EVC_status_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_EVC_status_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfile_int_arrayT 
 ****************************************************************/
extern int DMI_gradientProfile_int_arrayT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfile_int_arrayT_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_int_arrayT(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_int_arrayT_double_conversion_allowed();
extern int DMI_gradientProfile_int_arrayT_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfile_int_arrayT_long_conversion_allowed();
extern int DMI_gradientProfile_int_arrayT_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfile_int_arrayT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfile_int_arrayT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfile_int_arrayT(void *pValue);
extern int release_DMI_gradientProfile_int_arrayT(void *pValue);
extern int copy_DMI_gradientProfile_int_arrayT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfile_int_arrayT_Utils;

/****************************************************************
 ** DMI_gradientProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfile_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfile_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfile_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_gradientProfile_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_gradientProfile_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileArray_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfileArray_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfileArray_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_gradientProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_gradientProfileArray_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileElement_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfileElement_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfileElement_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_gradientProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_gradientProfileElement_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Icon_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icon_Ack_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icon_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Icon_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icon_Ack_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Icon_Ack_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icon_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icon_Ack_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icon_Ack_int_array_T_DATA(void *pValue);
extern int release_DMI_Icon_Ack_int_array_T_DATA(void *pValue);
extern int copy_DMI_Icon_Ack_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Icons_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icons_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icons_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Icons_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icons_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Icons_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icons_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icons_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icons_int_array_T_DATA(void *pValue);
extern int release_DMI_Icons_int_array_T_DATA(void *pValue);
extern int copy_DMI_Icons_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icons_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Identifier_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Identifier_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Identifier_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Identifier_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Identifier_int_array_T_DATA(void *pValue);
extern int release_DMI_Identifier_int_array_T_DATA(void *pValue);
extern int copy_DMI_Identifier_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Identifier_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Identifier_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Identifier_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_Request_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Identifier_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Identifier_Request_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Identifier_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Identifier_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Identifier_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Identifier_Request_int_array_T_DATA(void *pValue);
extern int release_DMI_Identifier_Request_int_array_T_DATA(void *pValue);
extern int copy_DMI_Identifier_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Identifier_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_level_array_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_array_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_level_array_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_array_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_array_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_level_array_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_level_array_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_level_array_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_level_array_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_level_array_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_level_array_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_level_array_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_level_array_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_level_array_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Level_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Level_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Level_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Level_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_Level_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_Level_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Level_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_level_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_level_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_level_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_level_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_level_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_level_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_level_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_level_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_level_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_level_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_level_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_LevelList_int_array_T_DATA 
 ****************************************************************/
extern int DMI_LevelList_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_LevelList_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_int_array_T_DATA_double_conversion_allowed();
extern int DMI_LevelList_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_LevelList_int_array_T_DATA_long_conversion_allowed();
extern int DMI_LevelList_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_LevelList_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_LevelList_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_LevelList_int_array_T_DATA(void *pValue);
extern int release_DMI_LevelList_int_array_T_DATA(void *pValue);
extern int copy_DMI_LevelList_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_LevelList_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_LevelList_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_LevelList_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_LevelList_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_LevelList_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_LevelList_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_LevelList_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_LevelList_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_LevelList_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_LevelList_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_LevelList_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_LevelList_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_LevelList_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_INT_T_DATA 
 ****************************************************************/
extern int DMI_List_Entry_Request_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_List_Entry_Request_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_INT_T_DATA_double_conversion_allowed();
extern int DMI_List_Entry_Request_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_List_Entry_Request_INT_T_DATA_long_conversion_allowed();
extern int DMI_List_Entry_Request_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_List_Entry_Request_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_List_Entry_Request_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_List_Entry_Request_INT_T_DATA(void *pValue);
extern int release_DMI_List_Entry_Request_INT_T_DATA(void *pValue);
extern int copy_DMI_List_Entry_Request_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_List_Entry_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_List_Entry_Request_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_List_Entry_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_List_Entry_Request_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_List_Entry_Request_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_List_Entry_Request_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_List_Entry_Request_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_loadingGauge_INT_T_DATA 
 ****************************************************************/
extern int DMI_loadingGauge_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_loadingGauge_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_INT_T_DATA_double_conversion_allowed();
extern int DMI_loadingGauge_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_loadingGauge_INT_T_DATA_long_conversion_allowed();
extern int DMI_loadingGauge_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_loadingGauge_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_loadingGauge_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_loadingGauge_INT_T_DATA(void *pValue);
extern int release_DMI_loadingGauge_INT_T_DATA(void *pValue);
extern int copy_DMI_loadingGauge_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_loadingGauge_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_loadingGauge_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_loadingGauge_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_loadingGauge_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_loadingGauge_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_loadingGauge_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_loadingGauge_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_loadingGauge_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_loadingGauge_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_loadingGauge_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_m_icon_flashing_freq_INT_T_DATA 
 ****************************************************************/
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_m_icon_flashing_freq_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_m_icon_flashing_freq_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_m_icon_flashing_freq_INT_T_DATA_double_conversion_allowed();
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_m_icon_flashing_freq_INT_T_DATA_long_conversion_allowed();
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_m_icon_flashing_freq_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_m_icon_flashing_freq_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_m_icon_flashing_freq_INT_T_DATA(void *pValue);
extern int release_DMI_m_icon_flashing_freq_INT_T_DATA(void *pValue);
extern int copy_DMI_m_icon_flashing_freq_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_m_icon_flashing_freq_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Menu_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Menu_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Menu_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Menu_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Menu_Request_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Menu_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Menu_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Menu_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Menu_Request_int_array_T_DATA(void *pValue);
extern int release_DMI_Menu_Request_int_array_T_DATA(void *pValue);
extern int copy_DMI_Menu_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Menu_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Q_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Q_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Q_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Q_TEXT_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Q_TEXT_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Q_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Q_TEXT_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Q_TEXT_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Q_TEXT_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Q_TEXT_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Q_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Radio_Net_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Radio_Net_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_Radio_Net_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Request_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Request_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Request_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Request_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Request_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Request_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Request_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfile_int_array_T_DATA 
 ****************************************************************/
extern int DMI_speedProfile_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_speedProfile_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_int_array_T_DATA_double_conversion_allowed();
extern int DMI_speedProfile_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_speedProfile_int_array_T_DATA_long_conversion_allowed();
extern int DMI_speedProfile_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_speedProfile_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_speedProfile_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_speedProfile_int_array_T_DATA(void *pValue);
extern int release_DMI_speedProfile_int_array_T_DATA(void *pValue);
extern int copy_DMI_speedProfile_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_speedProfile_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_speedProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_speedProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_speedProfile_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_speedProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_speedProfile_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_speedProfile_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_speedProfile_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_speedProfile_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_speedProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_SpeedProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_SpeedProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_SpeedProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_SpeedProfileArray_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_SpeedProfileArray_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_SpeedProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_SpeedProfileArray_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_SpeedProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_SpeedProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_SpeedProfileArray_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_SpeedProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_speedProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfileElement_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_speedProfileElement_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_speedProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_speedProfileElement_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_speedProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_speedProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_speedProfileElement_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_speedProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Status_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Status_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Status_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Status_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Status_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Status_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Status_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Status_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Status_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Status_int_array_T_DATA(void *pValue);
extern int release_DMI_Status_int_array_T_DATA(void *pValue);
extern int copy_DMI_Status_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Status_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_StatusSet_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_StatusSet_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_StatusSet_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_StatusSet_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_StatusSet_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_StatusSet_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_StatusSet_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_StatusSet_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_StatusSet_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_StatusSet_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_StatusSet_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_System_Version_int_array_T_DATA 
 ****************************************************************/
extern int DMI_System_Version_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_System_Version_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_int_array_T_DATA_double_conversion_allowed();
extern int DMI_System_Version_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_System_Version_int_array_T_DATA_long_conversion_allowed();
extern int DMI_System_Version_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_System_Version_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_System_Version_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_System_Version_int_array_T_DATA(void *pValue);
extern int release_DMI_System_Version_int_array_T_DATA(void *pValue);
extern int copy_DMI_System_Version_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_System_Version_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TEXT_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TEXT_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TEXT_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TEXT_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TEXT_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TEXT_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TEXT_INT_Array_T_DATA 
 ****************************************************************/
extern int DMI_TEXT_INT_Array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TEXT_INT_Array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_INT_Array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_INT_Array_T_DATA_double_conversion_allowed();
extern int DMI_TEXT_INT_Array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_TEXT_INT_Array_T_DATA_long_conversion_allowed();
extern int DMI_TEXT_INT_Array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TEXT_INT_Array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TEXT_INT_Array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TEXT_INT_Array_T_DATA(void *pValue);
extern int release_DMI_TEXT_INT_Array_T_DATA(void *pValue);
extern int copy_DMI_TEXT_INT_Array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TEXT_INT_Array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_Ack_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_Ack_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_Ack_int_array_T_DATA(void *pValue);
extern int release_DMI_Text_Message_Ack_int_array_T_DATA(void *pValue);
extern int copy_DMI_Text_Message_Ack_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Text_Message_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Text_Message_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Text_Message_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_int_array_T_DATA(void *pValue);
extern int release_DMI_Text_Message_int_array_T_DATA(void *pValue);
extern int copy_DMI_Text_Message_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_TextMessage_ID_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TextMessage_ID_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TextMessage_ID_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TextMessage_ID_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TextMessage_ID_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TextMessage_ID_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TextMessage_ID_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TextMessage_ID_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TextMessage_ID_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TextMessage_ID_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TextMessage_ID_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_to_EVC_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_int_T_API_DMI_Pkg_double_conversion_allowed();
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_to_EVC_Message_int_T_API_DMI_Pkg_long_conversion_allowed();
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_to_EVC_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_to_EVC_Message_int_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_to_EVC_Message_int_T_API_DMI_Pkg(void *pValue);
extern int release_DMI_to_EVC_Message_int_T_API_DMI_Pkg(void *pValue);
extern int copy_DMI_to_EVC_Message_int_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_to_EVC_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_T_API_DMI_Pkg_double_conversion_allowed();
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_to_EVC_Message_T_API_DMI_Pkg_long_conversion_allowed();
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_to_EVC_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_to_EVC_Message_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_to_EVC_Message_T_API_DMI_Pkg(void *pValue);
extern int release_DMI_to_EVC_Message_T_API_DMI_Pkg(void *pValue);
extern int copy_DMI_to_EVC_Message_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_To_Modes_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_To_Modes_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_To_Modes_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_To_Modes_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_To_Modes_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_To_Modes_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_To_Modes_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_To_Modes_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_To_Modes_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_To_Modes_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_To_Modes_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Track_Description_int_array_T 
 ****************************************************************/
extern int DMI_Track_Description_int_array_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Track_Description_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_Track_Description_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_Track_Description_int_array_T_double_conversion_allowed();
extern int DMI_Track_Description_int_array_T_to_double(const void *pValue, double *nValue);
extern int is_DMI_Track_Description_int_array_T_long_conversion_allowed();
extern int DMI_Track_Description_int_array_T_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Track_Description_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Track_Description_int_array_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Track_Description_int_array_T(void *pValue);
extern int release_DMI_Track_Description_int_array_T(void *pValue);
extern int copy_DMI_Track_Description_int_array_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Track_Description_int_array_T_Utils;

/****************************************************************
 ** DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_trackCondition_int_array_T 
 ****************************************************************/
extern int DMI_trackCondition_int_array_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackCondition_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_int_array_T_double_conversion_allowed();
extern int DMI_trackCondition_int_array_T_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackCondition_int_array_T_long_conversion_allowed();
extern int DMI_trackCondition_int_array_T_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackCondition_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackCondition_int_array_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackCondition_int_array_T(void *pValue);
extern int release_DMI_trackCondition_int_array_T(void *pValue);
extern int copy_DMI_trackCondition_int_array_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackCondition_int_array_T_Utils;

/****************************************************************
 ** DMI_trackCondition_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackCondition_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackCondition_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackCondition_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackCondition_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackCondition_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_trackCondition_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_trackCondition_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackCondition_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackConditionArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionArray_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackConditionArray_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackConditionArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackConditionArray_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackConditionArray_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_trackConditionArray_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_trackConditionArray_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackConditionArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackConditionElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionElement_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackConditionElement_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackConditionElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackConditionElement_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackConditionElement_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_trackConditionElement_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_trackConditionElement_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackConditionElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_Ack_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_Ack_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_Ack_int_array_T_DATA(void *pValue);
extern int release_DMI_Train_Data_Ack_int_array_T_DATA(void *pValue);
extern int copy_DMI_Train_Data_Ack_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Train_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_Train_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_Train_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_train_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_id_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_INT_T_DATA_double_conversion_allowed();
extern int DMI_train_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_id_INT_T_DATA_long_conversion_allowed();
extern int DMI_train_id_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_id_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_id_INT_T_DATA(void *pValue);
extern int release_DMI_train_id_INT_T_DATA(void *pValue);
extern int copy_DMI_train_id_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_train_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_train_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_id_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_train_id_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_id_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_id_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_train_id_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_train_id_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_train_length_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_length_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_length_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_INT_T_DATA_double_conversion_allowed();
extern int DMI_train_length_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_length_INT_T_DATA_long_conversion_allowed();
extern int DMI_train_length_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_length_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_length_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_length_INT_T_DATA(void *pValue);
extern int release_DMI_train_length_INT_T_DATA(void *pValue);
extern int copy_DMI_train_length_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_length_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_train_length_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_length_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_length_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_train_length_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_length_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_train_length_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_length_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_length_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_length_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_train_length_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_train_length_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_length_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Running_Number_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Running_Number_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Running_Number_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Running_Number_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Running_Number_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Train_Running_Number_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Running_Number_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Train_Running_Number_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Running_Number_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Running_Number_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Running_Number_int_array_T_DATA(void *pValue);
extern int release_DMI_Train_Running_Number_int_array_T_DATA(void *pValue);
extern int copy_DMI_Train_Running_Number_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Running_Number_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSG_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TXT_MSG_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSG_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSG_status_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TXT_MSG_status_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TXT_MSG_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TXT_MSG_status_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TXT_MSG_status_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TXT_MSG_status_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TXT_MSG_status_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TXT_MSG_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSGList_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_vMax_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_vMax_id_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_vMax_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_INT_T_DATA_double_conversion_allowed();
extern int DMI_vMax_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_vMax_id_INT_T_DATA_long_conversion_allowed();
extern int DMI_vMax_id_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_vMax_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_vMax_id_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_vMax_id_INT_T_DATA(void *pValue);
extern int release_DMI_vMax_id_INT_T_DATA(void *pValue);
extern int copy_DMI_vMax_id_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_vMax_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_vMax_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_vMax_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_vMax_id_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_vMax_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_vMax_id_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_vMax_id_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_vMax_id_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_vMax_id_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_vMax_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** dmiOutputs_T_manage_DMI_Output_Pkg 
 ****************************************************************/
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_dmiOutputs_T_manage_DMI_Output_Pkg_string(const char *str, char **endptr);
extern int string_to_dmiOutputs_T_manage_DMI_Output_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dmiOutputs_T_manage_DMI_Output_Pkg_double_conversion_allowed();
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_double(const void *pValue, double *nValue);
extern int is_dmiOutputs_T_manage_DMI_Output_Pkg_long_conversion_allowed();
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_dmiOutputs_T_manage_DMI_Output_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_dmiOutputs_T_manage_DMI_Output_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_dmiOutputs_T_manage_DMI_Output_Pkg(void *pValue);
extern int release_dmiOutputs_T_manage_DMI_Output_Pkg(void *pValue);
extern int copy_dmiOutputs_T_manage_DMI_Output_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_dmiOutputs_T_manage_DMI_Output_Pkg_Utils;

/****************************************************************
 ** DP_or_OL_t_TrackAtlasTypes 
 ****************************************************************/
extern int DP_or_OL_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DP_or_OL_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DP_or_OL_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DP_or_OL_t_TrackAtlasTypes_double_conversion_allowed();
extern int DP_or_OL_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DP_or_OL_t_TrackAtlasTypes_long_conversion_allowed();
extern int DP_or_OL_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DP_or_OL_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DP_or_OL_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DP_or_OL_t_TrackAtlasTypes(void *pValue);
extern int release_DP_or_OL_t_TrackAtlasTypes(void *pValue);
extern int copy_DP_or_OL_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DP_or_OL_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Driver2MAR_T_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_MA_Request_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Driver2MAR_T_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_MA_Request_double_conversion_allowed();
extern int Driver2MAR_T_MA_Request_to_double(const void *pValue, double *nValue);
extern int is_Driver2MAR_T_MA_Request_long_conversion_allowed();
extern int Driver2MAR_T_MA_Request_to_long(const void *pValue, long *nValue);
extern void compare_Driver2MAR_T_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Driver2MAR_T_MA_Request_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Driver2MAR_T_MA_Request(void *pValue);
extern int release_Driver2MAR_T_MA_Request(void *pValue);
extern int copy_Driver2MAR_T_MA_Request(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Driver2MAR_T_MA_Request_Utils;

/****************************************************************
 ** Driver2MAR_T_TA_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_TA_MA_Request_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Driver2MAR_T_TA_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_TA_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_TA_MA_Request_double_conversion_allowed();
extern int Driver2MAR_T_TA_MA_Request_to_double(const void *pValue, double *nValue);
extern int is_Driver2MAR_T_TA_MA_Request_long_conversion_allowed();
extern int Driver2MAR_T_TA_MA_Request_to_long(const void *pValue, long *nValue);
extern void compare_Driver2MAR_T_TA_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Driver2MAR_T_TA_MA_Request_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Driver2MAR_T_TA_MA_Request(void *pValue);
extern int release_Driver2MAR_T_TA_MA_Request(void *pValue);
extern int copy_Driver2MAR_T_TA_MA_Request(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Driver2MAR_T_TA_MA_Request_Utils;

/****************************************************************
 ** DriverIdentifier_INT_T_DATA 
 ****************************************************************/
extern int DriverIdentifier_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DriverIdentifier_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DriverIdentifier_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DriverIdentifier_INT_T_DATA_double_conversion_allowed();
extern int DriverIdentifier_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DriverIdentifier_INT_T_DATA_long_conversion_allowed();
extern int DriverIdentifier_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DriverIdentifier_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DriverIdentifier_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DriverIdentifier_INT_T_DATA(void *pValue);
extern int release_DriverIdentifier_INT_T_DATA(void *pValue);
extern int copy_DriverIdentifier_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DriverIdentifier_INT_T_DATA_Utils;

/****************************************************************
 ** driverIdentifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_driverIdentifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_driverIdentifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_driverIdentifier_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_driverIdentifier_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_driverIdentifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_driverIdentifier_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_driverIdentifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_driverIdentifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_driverIdentifier_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_driverIdentifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DynamicConfig_T 
 ****************************************************************/
extern int DynamicConfig_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DynamicConfig_T_string(const char *str, char **endptr);
extern int string_to_DynamicConfig_T(const char *str, void *pValue, char **endptr);
extern int is_DynamicConfig_T_double_conversion_allowed();
extern int DynamicConfig_T_to_double(const void *pValue, double *nValue);
extern int is_DynamicConfig_T_long_conversion_allowed();
extern int DynamicConfig_T_to_long(const void *pValue, long *nValue);
extern void compare_DynamicConfig_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DynamicConfig_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DynamicConfig_T(void *pValue);
extern int release_DynamicConfig_T(void *pValue);
extern int copy_DynamicConfig_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DynamicConfig_T_Utils;

/****************************************************************
 ** EB_command_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int EB_command_T_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EB_command_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_EB_command_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EB_command_T_SDM_Commands_Pkg_double_conversion_allowed();
extern int EB_command_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_EB_command_T_SDM_Commands_Pkg_long_conversion_allowed();
extern int EB_command_T_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_EB_command_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EB_command_T_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EB_command_T_SDM_Commands_Pkg(void *pValue);
extern int release_EB_command_T_SDM_Commands_Pkg(void *pValue);
extern int copy_EB_command_T_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EB_command_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** Endtimer_t_TrackAtlasTypes 
 ****************************************************************/
extern int Endtimer_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Endtimer_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Endtimer_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Endtimer_t_TrackAtlasTypes_double_conversion_allowed();
extern int Endtimer_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_Endtimer_t_TrackAtlasTypes_long_conversion_allowed();
extern int Endtimer_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_Endtimer_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Endtimer_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Endtimer_t_TrackAtlasTypes(void *pValue);
extern int release_Endtimer_t_TrackAtlasTypes(void *pValue);
extern int copy_Endtimer_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Endtimer_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** EOA_real_T_TargetManagement_types 
 ****************************************************************/
extern int EOA_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EOA_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_EOA_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_EOA_real_T_TargetManagement_types_double_conversion_allowed();
extern int EOA_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_EOA_real_T_TargetManagement_types_long_conversion_allowed();
extern int EOA_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_EOA_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EOA_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EOA_real_T_TargetManagement_types(void *pValue);
extern int release_EOA_real_T_TargetManagement_types(void *pValue);
extern int copy_EOA_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EOA_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** ErrorMessage_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ErrorMessage_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ErrorMessage_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ErrorMessage_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ErrorMessage_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ErrorMessage_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ErrorMessage_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ErrorMessage_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ErrorMessage_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ErrorMessage_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ErrorMessage_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EVC_to_DMI_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_int_T_API_DMI_Pkg_double_conversion_allowed();
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_EVC_to_DMI_Message_int_T_API_DMI_Pkg_long_conversion_allowed();
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_EVC_to_DMI_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EVC_to_DMI_Message_int_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EVC_to_DMI_Message_int_T_API_DMI_Pkg(void *pValue);
extern int release_EVC_to_DMI_Message_int_T_API_DMI_Pkg(void *pValue);
extern int copy_EVC_to_DMI_Message_int_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EVC_to_DMI_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_T_API_DMI_Pkg_double_conversion_allowed();
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_EVC_to_DMI_Message_T_API_DMI_Pkg_long_conversion_allowed();
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_EVC_to_DMI_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EVC_to_DMI_Message_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EVC_to_DMI_Message_T_API_DMI_Pkg(void *pValue);
extern int release_EVC_to_DMI_Message_T_API_DMI_Pkg(void *pValue);
extern int copy_EVC_to_DMI_Message_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** extractTargetsMRSPACC_TargetManagement_pkg 
 ****************************************************************/
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_extractTargetsMRSPACC_TargetManagement_pkg_string(const char *str, char **endptr);
extern int string_to_extractTargetsMRSPACC_TargetManagement_pkg(const char *str, void *pValue, char **endptr);
extern int is_extractTargetsMRSPACC_TargetManagement_pkg_double_conversion_allowed();
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_double(const void *pValue, double *nValue);
extern int is_extractTargetsMRSPACC_TargetManagement_pkg_long_conversion_allowed();
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_long(const void *pValue, long *nValue);
extern void compare_extractTargetsMRSPACC_TargetManagement_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_extractTargetsMRSPACC_TargetManagement_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_extractTargetsMRSPACC_TargetManagement_pkg(void *pValue);
extern int release_extractTargetsMRSPACC_TargetManagement_pkg(void *pValue);
extern int copy_extractTargetsMRSPACC_TargetManagement_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_extractTargetsMRSPACC_TargetManagement_pkg_Utils;

/****************************************************************
 ** filterRelatedEvents_T_Common_Types_Pkg 
 ****************************************************************/
extern int filterRelatedEvents_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_filterRelatedEvents_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_filterRelatedEvents_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_filterRelatedEvents_T_Common_Types_Pkg_double_conversion_allowed();
extern int filterRelatedEvents_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_filterRelatedEvents_T_Common_Types_Pkg_long_conversion_allowed();
extern int filterRelatedEvents_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_filterRelatedEvents_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_filterRelatedEvents_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_filterRelatedEvents_T_Common_Types_Pkg(void *pValue);
extern int release_filterRelatedEvents_T_Common_Types_Pkg(void *pValue);
extern int copy_filterRelatedEvents_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_filterRelatedEvents_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** FromTIU_t_TrackAtlasTypes 
 ****************************************************************/
extern int FromTIU_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_FromTIU_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_FromTIU_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_FromTIU_t_TrackAtlasTypes_double_conversion_allowed();
extern int FromTIU_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_FromTIU_t_TrackAtlasTypes_long_conversion_allowed();
extern int FromTIU_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_FromTIU_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_FromTIU_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_FromTIU_t_TrackAtlasTypes(void *pValue);
extern int release_FromTIU_t_TrackAtlasTypes(void *pValue);
extern int copy_FromTIU_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_FromTIU_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** G_A 
 ****************************************************************/
extern int G_A_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_G_A_string(const char *str, char **endptr);
extern int string_to_G_A(const char *str, void *pValue, char **endptr);
extern int is_G_A_double_conversion_allowed();
extern int G_A_to_double(const void *pValue, double *nValue);
extern int is_G_A_long_conversion_allowed();
extern int G_A_to_long(const void *pValue, long *nValue);
extern void compare_G_A(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_G_A_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_G_A(void *pValue);
extern int release_G_A(void *pValue);
extern int copy_G_A(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_G_A_Utils;

/****************************************************************
 ** G_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_G_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_G_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_G_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_G_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_G_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_G_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_G_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_G_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_G_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_G_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** GP_DMI_Control_Pkg_Sub_func 
 ****************************************************************/
extern int GP_DMI_Control_Pkg_Sub_func_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GP_DMI_Control_Pkg_Sub_func_string(const char *str, char **endptr);
extern int string_to_GP_DMI_Control_Pkg_Sub_func(const char *str, void *pValue, char **endptr);
extern int is_GP_DMI_Control_Pkg_Sub_func_double_conversion_allowed();
extern int GP_DMI_Control_Pkg_Sub_func_to_double(const void *pValue, double *nValue);
extern int is_GP_DMI_Control_Pkg_Sub_func_long_conversion_allowed();
extern int GP_DMI_Control_Pkg_Sub_func_to_long(const void *pValue, long *nValue);
extern void compare_GP_DMI_Control_Pkg_Sub_func(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GP_DMI_Control_Pkg_Sub_func_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GP_DMI_Control_Pkg_Sub_func(void *pValue);
extern int release_GP_DMI_Control_Pkg_Sub_func(void *pValue);
extern int copy_GP_DMI_Control_Pkg_Sub_func(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GP_DMI_Control_Pkg_Sub_func_Utils;

/****************************************************************
 ** Gradient_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Gradient_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_real_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_Gradient_real_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_Gradient_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Gradient_real_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Gradient_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_Gradient_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_Gradient_real_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Gradient_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** Gradient_section_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Gradient_section_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_section_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_real_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_Gradient_section_real_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_Gradient_section_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Gradient_section_real_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Gradient_section_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_Gradient_section_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_Gradient_section_real_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Gradient_section_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** Gradient_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int Gradient_section_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Gradient_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Gradient_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_t_TrackAtlasTypes_double_conversion_allowed();
extern int Gradient_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_Gradient_section_t_TrackAtlasTypes_long_conversion_allowed();
extern int Gradient_section_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_Gradient_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Gradient_section_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Gradient_section_t_TrackAtlasTypes(void *pValue);
extern int release_Gradient_section_t_TrackAtlasTypes(void *pValue);
extern int copy_Gradient_section_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Gradient_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_for_DMI_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_for_DMI_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_for_DMI_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_for_DMI_section_t_TrackAtlasTypes_double_conversion_allowed();
extern int GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_for_DMI_section_t_TrackAtlasTypes_long_conversion_allowed();
extern int GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_for_DMI_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_for_DMI_section_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_for_DMI_section_t_TrackAtlasTypes(void *pValue);
extern int release_GradientProfile_for_DMI_section_t_TrackAtlasTypes(void *pValue);
extern int copy_GradientProfile_for_DMI_section_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_for_DMI_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_for_DMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_for_DMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_for_DMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_for_DMI_t_TrackAtlasTypes_double_conversion_allowed();
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_for_DMI_t_TrackAtlasTypes_long_conversion_allowed();
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_for_DMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_for_DMI_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_for_DMI_t_TrackAtlasTypes(void *pValue);
extern int release_GradientProfile_for_DMI_t_TrackAtlasTypes(void *pValue);
extern int copy_GradientProfile_for_DMI_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_for_DMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_real_compensated_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_real_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_real_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_GradientProfile_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_GradientProfile_real_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_t_TrackAtlasTypes_double_conversion_allowed();
extern int GradientProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_t_TrackAtlasTypes_long_conversion_allowed();
extern int GradientProfile_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_t_TrackAtlasTypes(void *pValue);
extern int release_GradientProfile_t_TrackAtlasTypes(void *pValue);
extern int copy_GradientProfile_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Icon_control_flag_INT_T_DATA 
 ****************************************************************/
extern int Icon_control_flag_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_control_flag_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_INT_T_DATA_double_conversion_allowed();
extern int Icon_control_flag_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_Icon_control_flag_INT_T_DATA_long_conversion_allowed();
extern int Icon_control_flag_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_Icon_control_flag_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_control_flag_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_control_flag_INT_T_DATA(void *pValue);
extern int release_Icon_control_flag_INT_T_DATA(void *pValue);
extern int copy_Icon_control_flag_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_control_flag_INT_T_DATA_Utils;

/****************************************************************
 ** Icon_control_flag_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_control_flag_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_control_flag_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_T_DMI_Types_Pkg_double_conversion_allowed();
extern int Icon_control_flag_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Icon_control_flag_T_DMI_Types_Pkg_long_conversion_allowed();
extern int Icon_control_flag_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Icon_control_flag_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_control_flag_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_control_flag_T_DMI_Types_Pkg(void *pValue);
extern int release_Icon_control_flag_T_DMI_Types_Pkg(void *pValue);
extern int copy_Icon_control_flag_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_control_flag_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Icon_group_INT_T_DATA 
 ****************************************************************/
extern int Icon_group_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_INT_T_DATA_double_conversion_allowed();
extern int Icon_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_Icon_group_INT_T_DATA_long_conversion_allowed();
extern int Icon_group_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_Icon_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_group_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_group_INT_T_DATA(void *pValue);
extern int release_Icon_group_INT_T_DATA(void *pValue);
extern int copy_Icon_group_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_group_INT_T_DATA_Utils;

/****************************************************************
 ** Icon_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_T_DMI_Types_Pkg_double_conversion_allowed();
extern int Icon_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Icon_group_T_DMI_Types_Pkg_long_conversion_allowed();
extern int Icon_group_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Icon_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_group_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_group_T_DMI_Types_Pkg(void *pValue);
extern int release_Icon_group_T_DMI_Types_Pkg(void *pValue);
extern int copy_Icon_group_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** infoFromLinking_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_infoFromLinking_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_infoFromLinking_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_infoFromLinking_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_infoFromLinking_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_infoFromLinking_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_infoFromLinking_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_infoFromLinking_T_TrainPosition_Types_Pck(void *pValue);
extern int release_infoFromLinking_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_infoFromLinking_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_infoFromLinking_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** Isolation_Status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Isolation_Status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Isolation_Status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Isolation_Status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Isolation_Status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Isolation_Status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Isolation_Status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Isolation_Status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Isolation_Status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Isolation_Status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Isolation_Status_T_TIU_Types_Pkg(void *pValue);
extern int release_Isolation_Status_T_TIU_Types_Pkg(void *pValue);
extern int copy_Isolation_Status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Isolation_Status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_IterPacket58_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58_T_Packet_Types_Pkg_double_conversion_allowed();
extern int IterPacket58_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_IterPacket58_T_Packet_Types_Pkg_long_conversion_allowed();
extern int IterPacket58_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_IterPacket58_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_IterPacket58_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_IterPacket58_T_Packet_Types_Pkg(void *pValue);
extern int release_IterPacket58_T_Packet_Types_Pkg(void *pValue);
extern int copy_IterPacket58_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_IterPacket58_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58List_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58List_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_IterPacket58List_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58List_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58List_T_Packet_Types_Pkg_double_conversion_allowed();
extern int IterPacket58List_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_IterPacket58List_T_Packet_Types_Pkg_long_conversion_allowed();
extern int IterPacket58List_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_IterPacket58List_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_IterPacket58List_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_IterPacket58List_T_Packet_Types_Pkg(void *pValue);
extern int release_IterPacket58List_T_Packet_Types_Pkg(void *pValue);
extern int copy_IterPacket58List_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_IterPacket58List_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** kcg_bool 
 ****************************************************************/
extern int kcg_bool_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_bool_string(const char *str, char **endptr);
extern int string_to_kcg_bool(const char *str, void *pValue, char **endptr);
extern int is_kcg_bool_double_conversion_allowed();
extern int kcg_bool_to_double(const void *pValue, double *nValue);
extern int is_kcg_bool_long_conversion_allowed();
extern int kcg_bool_to_long(const void *pValue, long *nValue);
extern void compare_kcg_bool(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_bool_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_bool(void *pValue);
extern int release_kcg_bool(void *pValue);
extern int copy_kcg_bool(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_bool_Utils;

/****************************************************************
 ** kcg_char 
 ****************************************************************/
extern int kcg_char_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_char_string(const char *str, char **endptr);
extern int string_to_kcg_char(const char *str, void *pValue, char **endptr);
extern int is_kcg_char_double_conversion_allowed();
extern int kcg_char_to_double(const void *pValue, double *nValue);
extern int is_kcg_char_long_conversion_allowed();
extern int kcg_char_to_long(const void *pValue, long *nValue);
extern void compare_kcg_char(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_char_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_char(void *pValue);
extern int release_kcg_char(void *pValue);
extern int copy_kcg_char(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_char_Utils;

/****************************************************************
 ** kcg_float32 
 ****************************************************************/
extern int kcg_float32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_float32_string(const char *str, char **endptr);
extern int string_to_kcg_float32(const char *str, void *pValue, char **endptr);
extern int is_kcg_float32_double_conversion_allowed();
extern int kcg_float32_to_double(const void *pValue, double *nValue);
extern int is_kcg_float32_long_conversion_allowed();
extern int kcg_float32_to_long(const void *pValue, long *nValue);
extern void compare_kcg_float32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_float32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_float32(void *pValue);
extern int release_kcg_float32(void *pValue);
extern int copy_kcg_float32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_float32_Utils;

/****************************************************************
 ** kcg_float64 
 ****************************************************************/
extern int kcg_float64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_float64_string(const char *str, char **endptr);
extern int string_to_kcg_float64(const char *str, void *pValue, char **endptr);
extern int is_kcg_float64_double_conversion_allowed();
extern int kcg_float64_to_double(const void *pValue, double *nValue);
extern int is_kcg_float64_long_conversion_allowed();
extern int kcg_float64_to_long(const void *pValue, long *nValue);
extern void compare_kcg_float64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_float64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_float64(void *pValue);
extern int release_kcg_float64(void *pValue);
extern int copy_kcg_float64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_float64_Utils;

/****************************************************************
 ** kcg_int16 
 ****************************************************************/
extern int kcg_int16_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int16_string(const char *str, char **endptr);
extern int string_to_kcg_int16(const char *str, void *pValue, char **endptr);
extern int is_kcg_int16_double_conversion_allowed();
extern int kcg_int16_to_double(const void *pValue, double *nValue);
extern int is_kcg_int16_long_conversion_allowed();
extern int kcg_int16_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int16(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int16_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int16(void *pValue);
extern int release_kcg_int16(void *pValue);
extern int copy_kcg_int16(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int16_Utils;

/****************************************************************
 ** kcg_int32 
 ****************************************************************/
extern int kcg_int32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int32_string(const char *str, char **endptr);
extern int string_to_kcg_int32(const char *str, void *pValue, char **endptr);
extern int is_kcg_int32_double_conversion_allowed();
extern int kcg_int32_to_double(const void *pValue, double *nValue);
extern int is_kcg_int32_long_conversion_allowed();
extern int kcg_int32_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int32(void *pValue);
extern int release_kcg_int32(void *pValue);
extern int copy_kcg_int32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int32_Utils;

/****************************************************************
 ** kcg_int64 
 ****************************************************************/
extern int kcg_int64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int64_string(const char *str, char **endptr);
extern int string_to_kcg_int64(const char *str, void *pValue, char **endptr);
extern int is_kcg_int64_double_conversion_allowed();
extern int kcg_int64_to_double(const void *pValue, double *nValue);
extern int is_kcg_int64_long_conversion_allowed();
extern int kcg_int64_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int64(void *pValue);
extern int release_kcg_int64(void *pValue);
extern int copy_kcg_int64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int64_Utils;

/****************************************************************
 ** kcg_int8 
 ****************************************************************/
extern int kcg_int8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int8_string(const char *str, char **endptr);
extern int string_to_kcg_int8(const char *str, void *pValue, char **endptr);
extern int is_kcg_int8_double_conversion_allowed();
extern int kcg_int8_to_double(const void *pValue, double *nValue);
extern int is_kcg_int8_long_conversion_allowed();
extern int kcg_int8_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int8(void *pValue);
extern int release_kcg_int8(void *pValue);
extern int copy_kcg_int8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int8_Utils;

/****************************************************************
 ** kcg_size 
 ****************************************************************/
extern int kcg_size_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_size_string(const char *str, char **endptr);
extern int string_to_kcg_size(const char *str, void *pValue, char **endptr);
extern int is_kcg_size_double_conversion_allowed();
extern int kcg_size_to_double(const void *pValue, double *nValue);
extern int is_kcg_size_long_conversion_allowed();
extern int kcg_size_to_long(const void *pValue, long *nValue);
extern void compare_kcg_size(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_size_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_size(void *pValue);
extern int release_kcg_size(void *pValue);
extern int copy_kcg_size(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_size_Utils;

/****************************************************************
 ** kcg_uint16 
 ****************************************************************/
extern int kcg_uint16_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint16_string(const char *str, char **endptr);
extern int string_to_kcg_uint16(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint16_double_conversion_allowed();
extern int kcg_uint16_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint16_long_conversion_allowed();
extern int kcg_uint16_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint16(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint16_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint16(void *pValue);
extern int release_kcg_uint16(void *pValue);
extern int copy_kcg_uint16(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint16_Utils;

/****************************************************************
 ** kcg_uint32 
 ****************************************************************/
extern int kcg_uint32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint32_string(const char *str, char **endptr);
extern int string_to_kcg_uint32(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint32_double_conversion_allowed();
extern int kcg_uint32_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint32_long_conversion_allowed();
extern int kcg_uint32_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint32(void *pValue);
extern int release_kcg_uint32(void *pValue);
extern int copy_kcg_uint32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint32_Utils;

/****************************************************************
 ** kcg_uint64 
 ****************************************************************/
extern int kcg_uint64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint64_string(const char *str, char **endptr);
extern int string_to_kcg_uint64(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint64_double_conversion_allowed();
extern int kcg_uint64_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint64_long_conversion_allowed();
extern int kcg_uint64_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint64(void *pValue);
extern int release_kcg_uint64(void *pValue);
extern int copy_kcg_uint64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint64_Utils;

/****************************************************************
 ** kcg_uint8 
 ****************************************************************/
extern int kcg_uint8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint8_string(const char *str, char **endptr);
extern int string_to_kcg_uint8(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint8_double_conversion_allowed();
extern int kcg_uint8_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint8_long_conversion_allowed();
extern int kcg_uint8_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint8(void *pValue);
extern int release_kcg_uint8(void *pValue);
extern int copy_kcg_uint8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint8_Utils;

/****************************************************************
 ** L_ACKLEVELTR 
 ****************************************************************/
extern int L_ACKLEVELTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_ACKLEVELTR_string(const char *str, char **endptr);
extern int string_to_L_ACKLEVELTR(const char *str, void *pValue, char **endptr);
extern int is_L_ACKLEVELTR_double_conversion_allowed();
extern int L_ACKLEVELTR_to_double(const void *pValue, double *nValue);
extern int is_L_ACKLEVELTR_long_conversion_allowed();
extern int L_ACKLEVELTR_to_long(const void *pValue, long *nValue);
extern void compare_L_ACKLEVELTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_ACKLEVELTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_ACKLEVELTR(void *pValue);
extern int release_L_ACKLEVELTR(void *pValue);
extern int copy_L_ACKLEVELTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_ACKLEVELTR_Utils;

/****************************************************************
 ** L_ACKMAMODE 
 ****************************************************************/
extern int L_ACKMAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_ACKMAMODE_string(const char *str, char **endptr);
extern int string_to_L_ACKMAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_ACKMAMODE_double_conversion_allowed();
extern int L_ACKMAMODE_to_double(const void *pValue, double *nValue);
extern int is_L_ACKMAMODE_long_conversion_allowed();
extern int L_ACKMAMODE_to_long(const void *pValue, long *nValue);
extern void compare_L_ACKMAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_ACKMAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_ACKMAMODE(void *pValue);
extern int release_L_ACKMAMODE(void *pValue);
extern int copy_L_ACKMAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_ACKMAMODE_Utils;

/****************************************************************
 ** L_DOUBTOVER 
 ****************************************************************/
extern int L_DOUBTOVER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_DOUBTOVER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTOVER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTOVER_double_conversion_allowed();
extern int L_DOUBTOVER_to_double(const void *pValue, double *nValue);
extern int is_L_DOUBTOVER_long_conversion_allowed();
extern int L_DOUBTOVER_to_long(const void *pValue, long *nValue);
extern void compare_L_DOUBTOVER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_DOUBTOVER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_DOUBTOVER(void *pValue);
extern int release_L_DOUBTOVER(void *pValue);
extern int copy_L_DOUBTOVER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_DOUBTOVER_Utils;

/****************************************************************
 ** L_DOUBTUNDER 
 ****************************************************************/
extern int L_DOUBTUNDER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_DOUBTUNDER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTUNDER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTUNDER_double_conversion_allowed();
extern int L_DOUBTUNDER_to_double(const void *pValue, double *nValue);
extern int is_L_DOUBTUNDER_long_conversion_allowed();
extern int L_DOUBTUNDER_to_long(const void *pValue, long *nValue);
extern void compare_L_DOUBTUNDER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_DOUBTUNDER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_DOUBTUNDER(void *pValue);
extern int release_L_DOUBTUNDER(void *pValue);
extern int copy_L_DOUBTUNDER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_DOUBTUNDER_Utils;

/****************************************************************
 ** L_ENDSECTION 
 ****************************************************************/
extern int L_ENDSECTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_ENDSECTION_string(const char *str, char **endptr);
extern int string_to_L_ENDSECTION(const char *str, void *pValue, char **endptr);
extern int is_L_ENDSECTION_double_conversion_allowed();
extern int L_ENDSECTION_to_double(const void *pValue, double *nValue);
extern int is_L_ENDSECTION_long_conversion_allowed();
extern int L_ENDSECTION_to_long(const void *pValue, long *nValue);
extern void compare_L_ENDSECTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_ENDSECTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_ENDSECTION(void *pValue);
extern int release_L_ENDSECTION(void *pValue);
extern int copy_L_ENDSECTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_ENDSECTION_Utils;

/****************************************************************
 ** L_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int L_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int L_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_L_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int L_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_L_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_L_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_L_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** L_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_L_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_L_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_L_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_L_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** L_MAMODE 
 ****************************************************************/
extern int L_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_MAMODE_string(const char *str, char **endptr);
extern int string_to_L_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_MAMODE_double_conversion_allowed();
extern int L_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_L_MAMODE_long_conversion_allowed();
extern int L_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_L_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_MAMODE(void *pValue);
extern int release_L_MAMODE(void *pValue);
extern int copy_L_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_MAMODE_Utils;

/****************************************************************
 ** L_MESSAGE 
 ****************************************************************/
extern int L_MESSAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_MESSAGE_string(const char *str, char **endptr);
extern int string_to_L_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_L_MESSAGE_double_conversion_allowed();
extern int L_MESSAGE_to_double(const void *pValue, double *nValue);
extern int is_L_MESSAGE_long_conversion_allowed();
extern int L_MESSAGE_to_long(const void *pValue, long *nValue);
extern void compare_L_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_MESSAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_MESSAGE(void *pValue);
extern int release_L_MESSAGE(void *pValue);
extern int copy_L_MESSAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_MESSAGE_Utils;

/****************************************************************
 ** L_NVKRINT 
 ****************************************************************/
extern int L_NVKRINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_NVKRINT_string(const char *str, char **endptr);
extern int string_to_L_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_L_NVKRINT_double_conversion_allowed();
extern int L_NVKRINT_to_double(const void *pValue, double *nValue);
extern int is_L_NVKRINT_long_conversion_allowed();
extern int L_NVKRINT_to_long(const void *pValue, long *nValue);
extern void compare_L_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_NVKRINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_NVKRINT(void *pValue);
extern int release_L_NVKRINT(void *pValue);
extern int copy_L_NVKRINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_NVKRINT_Utils;

/****************************************************************
 ** L_PACKET 
 ****************************************************************/
extern int L_PACKET_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_PACKET_string(const char *str, char **endptr);
extern int string_to_L_PACKET(const char *str, void *pValue, char **endptr);
extern int is_L_PACKET_double_conversion_allowed();
extern int L_PACKET_to_double(const void *pValue, double *nValue);
extern int is_L_PACKET_long_conversion_allowed();
extern int L_PACKET_to_long(const void *pValue, long *nValue);
extern void compare_L_PACKET(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_PACKET_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_PACKET(void *pValue);
extern int release_L_PACKET(void *pValue);
extern int copy_L_PACKET(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_PACKET_Utils;

/****************************************************************
 ** L_REVERSEAREA 
 ****************************************************************/
extern int L_REVERSEAREA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_REVERSEAREA_string(const char *str, char **endptr);
extern int string_to_L_REVERSEAREA(const char *str, void *pValue, char **endptr);
extern int is_L_REVERSEAREA_double_conversion_allowed();
extern int L_REVERSEAREA_to_double(const void *pValue, double *nValue);
extern int is_L_REVERSEAREA_long_conversion_allowed();
extern int L_REVERSEAREA_to_long(const void *pValue, long *nValue);
extern void compare_L_REVERSEAREA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_REVERSEAREA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_REVERSEAREA(void *pValue);
extern int release_L_REVERSEAREA(void *pValue);
extern int copy_L_REVERSEAREA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_REVERSEAREA_Utils;

/****************************************************************
 ** L_SECTION 
 ****************************************************************/
extern int L_SECTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_SECTION_string(const char *str, char **endptr);
extern int string_to_L_SECTION(const char *str, void *pValue, char **endptr);
extern int is_L_SECTION_double_conversion_allowed();
extern int L_SECTION_to_double(const void *pValue, double *nValue);
extern int is_L_SECTION_long_conversion_allowed();
extern int L_SECTION_to_long(const void *pValue, long *nValue);
extern void compare_L_SECTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_SECTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_SECTION(void *pValue);
extern int release_L_SECTION(void *pValue);
extern int copy_L_SECTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_SECTION_Utils;

/****************************************************************
 ** L_TAFDISPLAY 
 ****************************************************************/
extern int L_TAFDISPLAY_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TAFDISPLAY_string(const char *str, char **endptr);
extern int string_to_L_TAFDISPLAY(const char *str, void *pValue, char **endptr);
extern int is_L_TAFDISPLAY_double_conversion_allowed();
extern int L_TAFDISPLAY_to_double(const void *pValue, double *nValue);
extern int is_L_TAFDISPLAY_long_conversion_allowed();
extern int L_TAFDISPLAY_to_long(const void *pValue, long *nValue);
extern void compare_L_TAFDISPLAY(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TAFDISPLAY_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TAFDISPLAY(void *pValue);
extern int release_L_TAFDISPLAY(void *pValue);
extern int copy_L_TAFDISPLAY(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TAFDISPLAY_Utils;

/****************************************************************
 ** L_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int L_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_test_trackcond_T_TIU_Types_Pkg_double_conversion_allowed();
extern int L_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_L_test_trackcond_T_TIU_Types_Pkg_long_conversion_allowed();
extern int L_test_trackcond_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_L_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_test_trackcond_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int release_L_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int copy_L_test_trackcond_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** L_TEXT 
 ****************************************************************/
extern int L_TEXT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TEXT_string(const char *str, char **endptr);
extern int string_to_L_TEXT(const char *str, void *pValue, char **endptr);
extern int is_L_TEXT_double_conversion_allowed();
extern int L_TEXT_to_double(const void *pValue, double *nValue);
extern int is_L_TEXT_long_conversion_allowed();
extern int L_TEXT_to_long(const void *pValue, long *nValue);
extern void compare_L_TEXT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TEXT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TEXT(void *pValue);
extern int release_L_TEXT(void *pValue);
extern int copy_L_TEXT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TEXT_Utils;

/****************************************************************
 ** L_TRAIN 
 ****************************************************************/
extern int L_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TRAIN_string(const char *str, char **endptr);
extern int string_to_L_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_L_TRAIN_double_conversion_allowed();
extern int L_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_L_TRAIN_long_conversion_allowed();
extern int L_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_L_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TRAIN(void *pValue);
extern int release_L_TRAIN(void *pValue);
extern int copy_L_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TRAIN_Utils;

/****************************************************************
 ** L_TRAININT 
 ****************************************************************/
extern int L_TRAININT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TRAININT_string(const char *str, char **endptr);
extern int string_to_L_TRAININT(const char *str, void *pValue, char **endptr);
extern int is_L_TRAININT_double_conversion_allowed();
extern int L_TRAININT_to_double(const void *pValue, double *nValue);
extern int is_L_TRAININT_long_conversion_allowed();
extern int L_TRAININT_to_long(const void *pValue, long *nValue);
extern void compare_L_TRAININT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TRAININT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TRAININT(void *pValue);
extern int release_L_TRAININT(void *pValue);
extern int copy_L_TRAININT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TRAININT_Utils;

/****************************************************************
 ** L_TSR 
 ****************************************************************/
extern int L_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TSR_string(const char *str, char **endptr);
extern int string_to_L_TSR(const char *str, void *pValue, char **endptr);
extern int is_L_TSR_double_conversion_allowed();
extern int L_TSR_to_double(const void *pValue, double *nValue);
extern int is_L_TSR_long_conversion_allowed();
extern int L_TSR_to_long(const void *pValue, long *nValue);
extern void compare_L_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TSR(void *pValue);
extern int release_L_TSR(void *pValue);
extern int copy_L_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TSR_Utils;

/****************************************************************
 ** LevelDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LevelDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableActionKind_DataDictionary_Pkg_double_conversion_allowed();
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LevelDecisionTableActionKind_DataDictionary_Pkg_long_conversion_allowed();
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LevelDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LevelDecisionTableActionKind_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LevelDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int release_LevelDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int copy_LevelDecisionTableActionKind_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LevelDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** LevelDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LevelDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableType_DataDictionary_Pkg_double_conversion_allowed();
extern int LevelDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LevelDecisionTableType_DataDictionary_Pkg_long_conversion_allowed();
extern int LevelDecisionTableType_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LevelDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LevelDecisionTableType_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LevelDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int release_LevelDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int copy_LevelDecisionTableType_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LevelDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_double_conversion_allowed();
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int is_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_long_conversion_allowed();
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int release_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int copy_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** LinkedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LinkedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBG_T_BG_Types_Pkg_double_conversion_allowed();
extern int LinkedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LinkedBG_T_BG_Types_Pkg_long_conversion_allowed();
extern int LinkedBG_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LinkedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LinkedBG_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LinkedBG_T_BG_Types_Pkg(void *pValue);
extern int release_LinkedBG_T_BG_Types_Pkg(void *pValue);
extern int copy_LinkedBG_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LinkedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int release_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_double_conversion_allowed();
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int is_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_long_conversion_allowed();
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int release_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int copy_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** LinkedBGs_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBGs_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LinkedBGs_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBGs_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBGs_T_BG_Types_Pkg_double_conversion_allowed();
extern int LinkedBGs_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LinkedBGs_T_BG_Types_Pkg_long_conversion_allowed();
extern int LinkedBGs_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LinkedBGs_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LinkedBGs_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LinkedBGs_T_BG_Types_Pkg(void *pValue);
extern int release_LinkedBGs_T_BG_Types_Pkg(void *pValue);
extern int copy_LinkedBGs_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LinkedBGs_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** LKrIntLookUp_t_SDMConversionModelPkg 
 ****************************************************************/
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LKrIntLookUp_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_LKrIntLookUp_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_LKrIntLookUp_t_SDMConversionModelPkg_double_conversion_allowed();
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_LKrIntLookUp_t_SDMConversionModelPkg_long_conversion_allowed();
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_LKrIntLookUp_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LKrIntLookUp_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LKrIntLookUp_t_SDMConversionModelPkg(void *pValue);
extern int release_LKrIntLookUp_t_SDMConversionModelPkg(void *pValue);
extern int copy_LKrIntLookUp_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LKrIntLookUp_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** Location_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Location_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Location_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Location_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Location_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int Location_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Location_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int Location_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Location_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Location_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Location_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_Location_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_Location_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Location_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** LocationBasedEvents_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LocationBasedEvents_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_LocationBasedEvents_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocationBasedEvents_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LocationBasedEvents_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LocationBasedEvents_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LocationBasedEvents_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LocationBasedEvents_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_LocationBasedEvents_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_LocationBasedEvents_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LocationBasedEvents_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** LocWithInAcc_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LocWithInAcc_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_LocWithInAcc_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocWithInAcc_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LocWithInAcc_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LocWithInAcc_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LocWithInAcc_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LocWithInAcc_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_LocWithInAcc_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_LocWithInAcc_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LocWithInAcc_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** M_002_T_TM_radio_messages 
 ****************************************************************/
extern int M_002_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_002_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_002_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_002_T_TM_radio_messages_double_conversion_allowed();
extern int M_002_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_002_T_TM_radio_messages_long_conversion_allowed();
extern int M_002_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_002_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_002_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_002_T_TM_radio_messages(void *pValue);
extern int release_M_002_T_TM_radio_messages(void *pValue);
extern int copy_M_002_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_002_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_003_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_003_int_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_003_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_003_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_003_int_T_TM_radio_messages_double_conversion_allowed();
extern int M_003_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_003_int_T_TM_radio_messages_long_conversion_allowed();
extern int M_003_int_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_003_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_003_int_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_003_int_T_TM_radio_messages(void *pValue);
extern int release_M_003_int_T_TM_radio_messages(void *pValue);
extern int copy_M_003_int_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_003_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_003_T_TM_radio_messages 
 ****************************************************************/
extern int M_003_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_003_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_003_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_003_T_TM_radio_messages_double_conversion_allowed();
extern int M_003_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_003_T_TM_radio_messages_long_conversion_allowed();
extern int M_003_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_003_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_003_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_003_T_TM_radio_messages(void *pValue);
extern int release_M_003_T_TM_radio_messages(void *pValue);
extern int copy_M_003_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_003_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_006_T_TM_radio_messages 
 ****************************************************************/
extern int M_006_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_006_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_006_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_006_T_TM_radio_messages_double_conversion_allowed();
extern int M_006_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_006_T_TM_radio_messages_long_conversion_allowed();
extern int M_006_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_006_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_006_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_006_T_TM_radio_messages(void *pValue);
extern int release_M_006_T_TM_radio_messages(void *pValue);
extern int copy_M_006_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_006_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_008_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_008_int_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_008_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_008_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_008_int_T_TM_radio_messages_double_conversion_allowed();
extern int M_008_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_008_int_T_TM_radio_messages_long_conversion_allowed();
extern int M_008_int_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_008_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_008_int_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_008_int_T_TM_radio_messages(void *pValue);
extern int release_M_008_int_T_TM_radio_messages(void *pValue);
extern int copy_M_008_int_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_008_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_008_T_TM_radio_messages 
 ****************************************************************/
extern int M_008_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_008_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_008_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_008_T_TM_radio_messages_double_conversion_allowed();
extern int M_008_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_008_T_TM_radio_messages_long_conversion_allowed();
extern int M_008_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_008_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_008_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_008_T_TM_radio_messages(void *pValue);
extern int release_M_008_T_TM_radio_messages(void *pValue);
extern int copy_M_008_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_008_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_009_T_TM_radio_messages 
 ****************************************************************/
extern int M_009_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_009_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_009_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_009_T_TM_radio_messages_double_conversion_allowed();
extern int M_009_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_009_T_TM_radio_messages_long_conversion_allowed();
extern int M_009_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_009_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_009_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_009_T_TM_radio_messages(void *pValue);
extern int release_M_009_T_TM_radio_messages(void *pValue);
extern int copy_M_009_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_009_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_015_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_015_int_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_015_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_015_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_015_int_T_TM_radio_messages_double_conversion_allowed();
extern int M_015_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_015_int_T_TM_radio_messages_long_conversion_allowed();
extern int M_015_int_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_015_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_015_int_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_015_int_T_TM_radio_messages(void *pValue);
extern int release_M_015_int_T_TM_radio_messages(void *pValue);
extern int copy_M_015_int_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_015_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_015_T_TM_radio_messages 
 ****************************************************************/
extern int M_015_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_015_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_015_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_015_T_TM_radio_messages_double_conversion_allowed();
extern int M_015_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_015_T_TM_radio_messages_long_conversion_allowed();
extern int M_015_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_015_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_015_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_015_T_TM_radio_messages(void *pValue);
extern int release_M_015_T_TM_radio_messages(void *pValue);
extern int copy_M_015_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_015_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_016_T_TM_radio_messages 
 ****************************************************************/
extern int M_016_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_016_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_016_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_016_T_TM_radio_messages_double_conversion_allowed();
extern int M_016_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_016_T_TM_radio_messages_long_conversion_allowed();
extern int M_016_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_016_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_016_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_016_T_TM_radio_messages(void *pValue);
extern int release_M_016_T_TM_radio_messages(void *pValue);
extern int copy_M_016_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_016_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_018_T_TM_radio_messages 
 ****************************************************************/
extern int M_018_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_018_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_018_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_018_T_TM_radio_messages_double_conversion_allowed();
extern int M_018_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_018_T_TM_radio_messages_long_conversion_allowed();
extern int M_018_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_018_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_018_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_018_T_TM_radio_messages(void *pValue);
extern int release_M_018_T_TM_radio_messages(void *pValue);
extern int copy_M_018_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_018_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_024_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_024_int_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_024_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_024_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_024_int_T_TM_radio_messages_double_conversion_allowed();
extern int M_024_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_024_int_T_TM_radio_messages_long_conversion_allowed();
extern int M_024_int_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_024_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_024_int_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_024_int_T_TM_radio_messages(void *pValue);
extern int release_M_024_int_T_TM_radio_messages(void *pValue);
extern int copy_M_024_int_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_024_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_024_T_TM_radio_messages 
 ****************************************************************/
extern int M_024_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_024_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_024_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_024_T_TM_radio_messages_double_conversion_allowed();
extern int M_024_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_024_T_TM_radio_messages_long_conversion_allowed();
extern int M_024_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_024_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_024_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_024_T_TM_radio_messages(void *pValue);
extern int release_M_024_T_TM_radio_messages(void *pValue);
extern int copy_M_024_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_024_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_027_T_TM_radio_messages 
 ****************************************************************/
extern int M_027_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_027_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_027_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_027_T_TM_radio_messages_double_conversion_allowed();
extern int M_027_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_027_T_TM_radio_messages_long_conversion_allowed();
extern int M_027_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_027_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_027_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_027_T_TM_radio_messages(void *pValue);
extern int release_M_027_T_TM_radio_messages(void *pValue);
extern int copy_M_027_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_027_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_028_T_TM_radio_messages 
 ****************************************************************/
extern int M_028_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_028_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_028_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_028_T_TM_radio_messages_double_conversion_allowed();
extern int M_028_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_028_T_TM_radio_messages_long_conversion_allowed();
extern int M_028_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_028_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_028_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_028_T_TM_radio_messages(void *pValue);
extern int release_M_028_T_TM_radio_messages(void *pValue);
extern int copy_M_028_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_028_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_032_int_T_TM_radio_messages 
 ****************************************************************/
extern int M_032_int_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_032_int_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_032_int_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_032_int_T_TM_radio_messages_double_conversion_allowed();
extern int M_032_int_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_032_int_T_TM_radio_messages_long_conversion_allowed();
extern int M_032_int_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_032_int_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_032_int_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_032_int_T_TM_radio_messages(void *pValue);
extern int release_M_032_int_T_TM_radio_messages(void *pValue);
extern int copy_M_032_int_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_032_int_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_032_T_TM_radio_messages 
 ****************************************************************/
extern int M_032_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_032_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_032_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_032_T_TM_radio_messages_double_conversion_allowed();
extern int M_032_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_032_T_TM_radio_messages_long_conversion_allowed();
extern int M_032_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_032_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_032_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_032_T_TM_radio_messages(void *pValue);
extern int release_M_032_T_TM_radio_messages(void *pValue);
extern int copy_M_032_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_032_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_033_T_TM_radio_messages 
 ****************************************************************/
extern int M_033_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_033_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_033_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_033_T_TM_radio_messages_double_conversion_allowed();
extern int M_033_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_033_T_TM_radio_messages_long_conversion_allowed();
extern int M_033_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_033_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_033_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_033_T_TM_radio_messages(void *pValue);
extern int release_M_033_T_TM_radio_messages(void *pValue);
extern int copy_M_033_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_033_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_034_T_TM_radio_messages 
 ****************************************************************/
extern int M_034_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_034_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_034_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_034_T_TM_radio_messages_double_conversion_allowed();
extern int M_034_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_034_T_TM_radio_messages_long_conversion_allowed();
extern int M_034_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_034_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_034_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_034_T_TM_radio_messages(void *pValue);
extern int release_M_034_T_TM_radio_messages(void *pValue);
extern int copy_M_034_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_034_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_038_T_TM_radio_messages 
 ****************************************************************/
extern int M_038_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_038_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_038_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_038_T_TM_radio_messages_double_conversion_allowed();
extern int M_038_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_038_T_TM_radio_messages_long_conversion_allowed();
extern int M_038_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_038_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_038_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_038_T_TM_radio_messages(void *pValue);
extern int release_M_038_T_TM_radio_messages(void *pValue);
extern int copy_M_038_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_038_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_039_T_TM_radio_messages 
 ****************************************************************/
extern int M_039_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_039_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_039_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_039_T_TM_radio_messages_double_conversion_allowed();
extern int M_039_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_039_T_TM_radio_messages_long_conversion_allowed();
extern int M_039_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_039_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_039_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_039_T_TM_radio_messages(void *pValue);
extern int release_M_039_T_TM_radio_messages(void *pValue);
extern int copy_M_039_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_039_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_040_T_TM_radio_messages 
 ****************************************************************/
extern int M_040_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_040_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_040_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_040_T_TM_radio_messages_double_conversion_allowed();
extern int M_040_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_040_T_TM_radio_messages_long_conversion_allowed();
extern int M_040_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_040_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_040_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_040_T_TM_radio_messages(void *pValue);
extern int release_M_040_T_TM_radio_messages(void *pValue);
extern int copy_M_040_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_040_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_041_T_TM_radio_messages 
 ****************************************************************/
extern int M_041_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_041_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_041_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_041_T_TM_radio_messages_double_conversion_allowed();
extern int M_041_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_041_T_TM_radio_messages_long_conversion_allowed();
extern int M_041_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_041_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_041_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_041_T_TM_radio_messages(void *pValue);
extern int release_M_041_T_TM_radio_messages(void *pValue);
extern int copy_M_041_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_041_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_043_T_TM_radio_messages 
 ****************************************************************/
extern int M_043_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_043_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_043_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_043_T_TM_radio_messages_double_conversion_allowed();
extern int M_043_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_043_T_TM_radio_messages_long_conversion_allowed();
extern int M_043_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_043_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_043_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_043_T_TM_radio_messages(void *pValue);
extern int release_M_043_T_TM_radio_messages(void *pValue);
extern int copy_M_043_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_043_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_045_T_TM_radio_messages 
 ****************************************************************/
extern int M_045_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_045_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_045_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_045_T_TM_radio_messages_double_conversion_allowed();
extern int M_045_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_045_T_TM_radio_messages_long_conversion_allowed();
extern int M_045_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_045_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_045_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_045_T_TM_radio_messages(void *pValue);
extern int release_M_045_T_TM_radio_messages(void *pValue);
extern int copy_M_045_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_045_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_129_T_TM_radio_messages 
 ****************************************************************/
extern int M_129_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_129_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_129_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_129_T_TM_radio_messages_double_conversion_allowed();
extern int M_129_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_129_T_TM_radio_messages_long_conversion_allowed();
extern int M_129_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_129_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_129_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_129_T_TM_radio_messages(void *pValue);
extern int release_M_129_T_TM_radio_messages(void *pValue);
extern int copy_M_129_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_129_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_132_T_TM_radio_messages 
 ****************************************************************/
extern int M_132_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_132_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_132_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_132_T_TM_radio_messages_double_conversion_allowed();
extern int M_132_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_132_T_TM_radio_messages_long_conversion_allowed();
extern int M_132_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_132_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_132_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_132_T_TM_radio_messages(void *pValue);
extern int release_M_132_T_TM_radio_messages(void *pValue);
extern int copy_M_132_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_132_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_136_T_TM_radio_messages 
 ****************************************************************/
extern int M_136_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_136_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_136_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_136_T_TM_radio_messages_double_conversion_allowed();
extern int M_136_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_136_T_TM_radio_messages_long_conversion_allowed();
extern int M_136_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_136_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_136_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_136_T_TM_radio_messages(void *pValue);
extern int release_M_136_T_TM_radio_messages(void *pValue);
extern int copy_M_136_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_136_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_146_T_TM_radio_messages 
 ****************************************************************/
extern int M_146_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_146_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_146_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_146_T_TM_radio_messages_double_conversion_allowed();
extern int M_146_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_146_T_TM_radio_messages_long_conversion_allowed();
extern int M_146_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_146_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_146_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_146_T_TM_radio_messages(void *pValue);
extern int release_M_146_T_TM_radio_messages(void *pValue);
extern int copy_M_146_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_146_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_147_T_TM_radio_messages 
 ****************************************************************/
extern int M_147_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_147_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_147_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_147_T_TM_radio_messages_double_conversion_allowed();
extern int M_147_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_147_T_TM_radio_messages_long_conversion_allowed();
extern int M_147_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_147_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_147_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_147_T_TM_radio_messages(void *pValue);
extern int release_M_147_T_TM_radio_messages(void *pValue);
extern int copy_M_147_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_147_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_154_T_TM_radio_messages 
 ****************************************************************/
extern int M_154_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_154_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_154_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_154_T_TM_radio_messages_double_conversion_allowed();
extern int M_154_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_154_T_TM_radio_messages_long_conversion_allowed();
extern int M_154_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_154_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_154_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_154_T_TM_radio_messages(void *pValue);
extern int release_M_154_T_TM_radio_messages(void *pValue);
extern int copy_M_154_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_154_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_155_T_TM_radio_messages 
 ****************************************************************/
extern int M_155_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_155_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_155_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_155_T_TM_radio_messages_double_conversion_allowed();
extern int M_155_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_155_T_TM_radio_messages_long_conversion_allowed();
extern int M_155_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_155_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_155_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_155_T_TM_radio_messages(void *pValue);
extern int release_M_155_T_TM_radio_messages(void *pValue);
extern int copy_M_155_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_155_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_156_T_TM_radio_messages 
 ****************************************************************/
extern int M_156_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_156_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_156_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_156_T_TM_radio_messages_double_conversion_allowed();
extern int M_156_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_156_T_TM_radio_messages_long_conversion_allowed();
extern int M_156_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_156_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_156_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_156_T_TM_radio_messages(void *pValue);
extern int release_M_156_T_TM_radio_messages(void *pValue);
extern int copy_M_156_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_156_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_159_T_TM_radio_messages 
 ****************************************************************/
extern int M_159_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_159_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_159_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_159_T_TM_radio_messages_double_conversion_allowed();
extern int M_159_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_159_T_TM_radio_messages_long_conversion_allowed();
extern int M_159_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_159_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_159_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_159_T_TM_radio_messages(void *pValue);
extern int release_M_159_T_TM_radio_messages(void *pValue);
extern int copy_M_159_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_159_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_ACK 
 ****************************************************************/
extern int M_ACK_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_ACK_string(const char *str, char **endptr);
extern int string_to_M_ACK(const char *str, void *pValue, char **endptr);
extern int is_M_ACK_double_conversion_allowed();
extern int M_ACK_to_double(const void *pValue, double *nValue);
extern int is_M_ACK_long_conversion_allowed();
extern int M_ACK_to_long(const void *pValue, long *nValue);
extern void compare_M_ACK(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_ACK_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_ACK(void *pValue);
extern int release_M_ACK(void *pValue);
extern int copy_M_ACK(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_ACK_Utils;

/****************************************************************
 ** M_ADHESION 
 ****************************************************************/
extern int M_ADHESION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_ADHESION_string(const char *str, char **endptr);
extern int string_to_M_ADHESION(const char *str, void *pValue, char **endptr);
extern int is_M_ADHESION_double_conversion_allowed();
extern int M_ADHESION_to_double(const void *pValue, double *nValue);
extern int is_M_ADHESION_long_conversion_allowed();
extern int M_ADHESION_to_long(const void *pValue, long *nValue);
extern void compare_M_ADHESION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_ADHESION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_ADHESION(void *pValue);
extern int release_M_ADHESION(void *pValue);
extern int copy_M_ADHESION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_ADHESION_Utils;

/****************************************************************
 ** M_AIRTIGHT 
 ****************************************************************/
extern int M_AIRTIGHT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_AIRTIGHT_string(const char *str, char **endptr);
extern int string_to_M_AIRTIGHT(const char *str, void *pValue, char **endptr);
extern int is_M_AIRTIGHT_double_conversion_allowed();
extern int M_AIRTIGHT_to_double(const void *pValue, double *nValue);
extern int is_M_AIRTIGHT_long_conversion_allowed();
extern int M_AIRTIGHT_to_long(const void *pValue, long *nValue);
extern void compare_M_AIRTIGHT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_AIRTIGHT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_AIRTIGHT(void *pValue);
extern int release_M_AIRTIGHT(void *pValue);
extern int copy_M_AIRTIGHT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_AIRTIGHT_Utils;

/****************************************************************
 ** M_airtightness_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_airtightness_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_airtightness_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_airtightness_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_airtightness_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_airtightness_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_airtightness_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_airtightness_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_airtightness_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_airtightness_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_airtightness_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_airtightness_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_airtightness_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_airtightness_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_AXLELOADCAT 
 ****************************************************************/
extern int M_AXLELOADCAT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_AXLELOADCAT_string(const char *str, char **endptr);
extern int string_to_M_AXLELOADCAT(const char *str, void *pValue, char **endptr);
extern int is_M_AXLELOADCAT_double_conversion_allowed();
extern int M_AXLELOADCAT_to_double(const void *pValue, double *nValue);
extern int is_M_AXLELOADCAT_long_conversion_allowed();
extern int M_AXLELOADCAT_to_long(const void *pValue, long *nValue);
extern void compare_M_AXLELOADCAT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_AXLELOADCAT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_AXLELOADCAT(void *pValue);
extern int release_M_AXLELOADCAT(void *pValue);
extern int copy_M_AXLELOADCAT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_AXLELOADCAT_Utils;

/****************************************************************
 ** M_brake_inhibit_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_brake_inhibit_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_inhibit_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_inhibit_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_brake_inhibit_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_brake_inhibit_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_brake_inhibit_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_brake_inhibit_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_brake_inhibit_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_brake_inhibit_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_brake_inhibit_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_signal_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_brake_signal_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_signal_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_signal_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_brake_signal_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_brake_signal_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_brake_signal_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_brake_signal_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_brake_signal_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_brake_signal_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_brake_signal_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_brake_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_brake_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_brake_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_brake_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_brake_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_brake_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_BRAKEPERCT_DMI_Types_Pkg 
 ****************************************************************/
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_BRAKEPERCT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_BRAKEPERCT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_BRAKEPERCT_DMI_Types_Pkg_double_conversion_allowed();
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_BRAKEPERCT_DMI_Types_Pkg_long_conversion_allowed();
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_BRAKEPERCT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_BRAKEPERCT_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_BRAKEPERCT_DMI_Types_Pkg(void *pValue);
extern int release_M_BRAKEPERCT_DMI_Types_Pkg(void *pValue);
extern int copy_M_BRAKEPERCT_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_BRAKEPERCT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_cab_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_cab_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_cab_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_cab_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_cab_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_cab_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_cab_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_cab_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_cab_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_cab_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_cab_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_current_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_current_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_current_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_current_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_current_T_TIU_Types_Pkg(void *pValue);
extern int release_M_current_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_current_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_directioncontroller_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_directioncontroller_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_directioncontroller_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_directioncontroller_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_directioncontroller_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_directioncontroller_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_directioncontroller_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_directioncontroller_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_directioncontroller_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_directioncontroller_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_directioncontroller_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_DUP 
 ****************************************************************/
extern int M_DUP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_DUP_string(const char *str, char **endptr);
extern int string_to_M_DUP(const char *str, void *pValue, char **endptr);
extern int is_M_DUP_double_conversion_allowed();
extern int M_DUP_to_double(const void *pValue, double *nValue);
extern int is_M_DUP_long_conversion_allowed();
extern int M_DUP_to_long(const void *pValue, long *nValue);
extern void compare_M_DUP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_DUP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_DUP(void *pValue);
extern int release_M_DUP(void *pValue);
extern int copy_M_DUP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_DUP_Utils;

/****************************************************************
 ** M_eddy_current_brake_inhibition_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(void *pValue);
extern int release_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_ERROR 
 ****************************************************************/
extern int M_ERROR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_ERROR_string(const char *str, char **endptr);
extern int string_to_M_ERROR(const char *str, void *pValue, char **endptr);
extern int is_M_ERROR_double_conversion_allowed();
extern int M_ERROR_to_double(const void *pValue, double *nValue);
extern int is_M_ERROR_long_conversion_allowed();
extern int M_ERROR_to_long(const void *pValue, long *nValue);
extern void compare_M_ERROR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_ERROR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_ERROR(void *pValue);
extern int release_M_ERROR(void *pValue);
extern int copy_M_ERROR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_ERROR_Utils;

/****************************************************************
 ** M_Isolation_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_Isolation_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_Isolation_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_Isolation_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_Isolation_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_Isolation_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_Isolation_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_Isolation_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_Isolation_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_Isolation_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_Isolation_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_Isolation_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_Isolation_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_Isolation_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** m_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int m_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_m_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_m_KvSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int m_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_m_KvSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int m_KvSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_m_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m_KvSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_m_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_m_KvSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** M_LEVEL 
 ****************************************************************/
extern int M_LEVEL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LEVEL_string(const char *str, char **endptr);
extern int string_to_M_LEVEL(const char *str, void *pValue, char **endptr);
extern int is_M_LEVEL_double_conversion_allowed();
extern int M_LEVEL_to_double(const void *pValue, double *nValue);
extern int is_M_LEVEL_long_conversion_allowed();
extern int M_LEVEL_to_long(const void *pValue, long *nValue);
extern void compare_M_LEVEL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LEVEL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LEVEL(void *pValue);
extern int release_M_LEVEL(void *pValue);
extern int copy_M_LEVEL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LEVEL_Utils;

/****************************************************************
 ** M_LEVELTR 
 ****************************************************************/
extern int M_LEVELTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LEVELTR_string(const char *str, char **endptr);
extern int string_to_M_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_M_LEVELTR_double_conversion_allowed();
extern int M_LEVELTR_to_double(const void *pValue, double *nValue);
extern int is_M_LEVELTR_long_conversion_allowed();
extern int M_LEVELTR_to_long(const void *pValue, long *nValue);
extern void compare_M_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LEVELTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LEVELTR(void *pValue);
extern int release_M_LEVELTR(void *pValue);
extern int copy_M_LEVELTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LEVELTR_Utils;

/****************************************************************
 ** M_LOADINGGAUGE 
 ****************************************************************/
extern int M_LOADINGGAUGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LOADINGGAUGE_string(const char *str, char **endptr);
extern int string_to_M_LOADINGGAUGE(const char *str, void *pValue, char **endptr);
extern int is_M_LOADINGGAUGE_double_conversion_allowed();
extern int M_LOADINGGAUGE_to_double(const void *pValue, double *nValue);
extern int is_M_LOADINGGAUGE_long_conversion_allowed();
extern int M_LOADINGGAUGE_to_long(const void *pValue, long *nValue);
extern void compare_M_LOADINGGAUGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LOADINGGAUGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LOADINGGAUGE(void *pValue);
extern int release_M_LOADINGGAUGE(void *pValue);
extern int copy_M_LOADINGGAUGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LOADINGGAUGE_Utils;

/****************************************************************
 ** M_LOC 
 ****************************************************************/
extern int M_LOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LOC_string(const char *str, char **endptr);
extern int string_to_M_LOC(const char *str, void *pValue, char **endptr);
extern int is_M_LOC_double_conversion_allowed();
extern int M_LOC_to_double(const void *pValue, double *nValue);
extern int is_M_LOC_long_conversion_allowed();
extern int M_LOC_to_long(const void *pValue, long *nValue);
extern void compare_M_LOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LOC(void *pValue);
extern int release_M_LOC(void *pValue);
extern int copy_M_LOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LOC_Utils;

/****************************************************************
 ** M_mainpowerswitch_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_mainpowerswitch_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_mainpowerswitch_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_mainpowerswitch_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_mainpowerswitch_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_mainpowerswitch_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_mainpowerswitch_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_mainpowerswitch_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_mainpowerswitch_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_mainpowerswitch_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_mainpowerswitch_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_MAMODE 
 ****************************************************************/
extern int M_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_MAMODE_string(const char *str, char **endptr);
extern int string_to_M_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_M_MAMODE_double_conversion_allowed();
extern int M_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_M_MAMODE_long_conversion_allowed();
extern int M_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_M_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_MAMODE(void *pValue);
extern int release_M_MAMODE(void *pValue);
extern int copy_M_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_MAMODE_Utils;

/****************************************************************
 ** M_MCOUNT 
 ****************************************************************/
extern int M_MCOUNT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_MCOUNT_string(const char *str, char **endptr);
extern int string_to_M_MCOUNT(const char *str, void *pValue, char **endptr);
extern int is_M_MCOUNT_double_conversion_allowed();
extern int M_MCOUNT_to_double(const void *pValue, double *nValue);
extern int is_M_MCOUNT_long_conversion_allowed();
extern int M_MCOUNT_to_long(const void *pValue, long *nValue);
extern void compare_M_MCOUNT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_MCOUNT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_MCOUNT(void *pValue);
extern int release_M_MCOUNT(void *pValue);
extern int copy_M_MCOUNT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_MCOUNT_Utils;

/****************************************************************
 ** M_MODE 
 ****************************************************************/
extern int M_MODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_MODE_string(const char *str, char **endptr);
extern int string_to_M_MODE(const char *str, void *pValue, char **endptr);
extern int is_M_MODE_double_conversion_allowed();
extern int M_MODE_to_double(const void *pValue, double *nValue);
extern int is_M_MODE_long_conversion_allowed();
extern int M_MODE_to_long(const void *pValue, long *nValue);
extern void compare_M_MODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_MODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_MODE(void *pValue);
extern int release_M_MODE(void *pValue);
extern int copy_M_MODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_MODE_Utils;

/****************************************************************
 ** M_nonleading_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_nonleading_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_nonleading_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_nonleading_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_nonleading_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_nonleading_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_nonleading_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_nonleading_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_nonleading_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_nonleading_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_nonleading_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_NVAVADH 
 ****************************************************************/
extern int M_NVAVADH_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVAVADH_string(const char *str, char **endptr);
extern int string_to_M_NVAVADH(const char *str, void *pValue, char **endptr);
extern int is_M_NVAVADH_double_conversion_allowed();
extern int M_NVAVADH_to_double(const void *pValue, double *nValue);
extern int is_M_NVAVADH_long_conversion_allowed();
extern int M_NVAVADH_to_long(const void *pValue, long *nValue);
extern void compare_M_NVAVADH(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVAVADH_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVAVADH(void *pValue);
extern int release_M_NVAVADH(void *pValue);
extern int copy_M_NVAVADH(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVAVADH_Utils;

/****************************************************************
 ** M_NVCONTACT 
 ****************************************************************/
extern int M_NVCONTACT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_M_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_M_NVCONTACT_double_conversion_allowed();
extern int M_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int is_M_NVCONTACT_long_conversion_allowed();
extern int M_NVCONTACT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVCONTACT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVCONTACT(void *pValue);
extern int release_M_NVCONTACT(void *pValue);
extern int copy_M_NVCONTACT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVCONTACT_Utils;

/****************************************************************
 ** M_NVDERUN 
 ****************************************************************/
extern int M_NVDERUN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVDERUN_string(const char *str, char **endptr);
extern int string_to_M_NVDERUN(const char *str, void *pValue, char **endptr);
extern int is_M_NVDERUN_double_conversion_allowed();
extern int M_NVDERUN_to_double(const void *pValue, double *nValue);
extern int is_M_NVDERUN_long_conversion_allowed();
extern int M_NVDERUN_to_long(const void *pValue, long *nValue);
extern void compare_M_NVDERUN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVDERUN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVDERUN(void *pValue);
extern int release_M_NVDERUN(void *pValue);
extern int copy_M_NVDERUN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVDERUN_Utils;

/****************************************************************
 ** M_NVEBCL 
 ****************************************************************/
extern int M_NVEBCL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVEBCL_string(const char *str, char **endptr);
extern int string_to_M_NVEBCL(const char *str, void *pValue, char **endptr);
extern int is_M_NVEBCL_double_conversion_allowed();
extern int M_NVEBCL_to_double(const void *pValue, double *nValue);
extern int is_M_NVEBCL_long_conversion_allowed();
extern int M_NVEBCL_to_long(const void *pValue, long *nValue);
extern void compare_M_NVEBCL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVEBCL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVEBCL(void *pValue);
extern int release_M_NVEBCL(void *pValue);
extern int copy_M_NVEBCL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVEBCL_Utils;

/****************************************************************
 ** M_NVKRINT 
 ****************************************************************/
extern int M_NVKRINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVKRINT_string(const char *str, char **endptr);
extern int string_to_M_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKRINT_double_conversion_allowed();
extern int M_NVKRINT_to_double(const void *pValue, double *nValue);
extern int is_M_NVKRINT_long_conversion_allowed();
extern int M_NVKRINT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVKRINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVKRINT(void *pValue);
extern int release_M_NVKRINT(void *pValue);
extern int copy_M_NVKRINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVKRINT_Utils;

/****************************************************************
 ** M_NVKTINT 
 ****************************************************************/
extern int M_NVKTINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVKTINT_string(const char *str, char **endptr);
extern int string_to_M_NVKTINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKTINT_double_conversion_allowed();
extern int M_NVKTINT_to_double(const void *pValue, double *nValue);
extern int is_M_NVKTINT_long_conversion_allowed();
extern int M_NVKTINT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVKTINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVKTINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVKTINT(void *pValue);
extern int release_M_NVKTINT(void *pValue);
extern int copy_M_NVKTINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVKTINT_Utils;

/****************************************************************
 ** M_NVKVINT 
 ****************************************************************/
extern int M_NVKVINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVKVINT_string(const char *str, char **endptr);
extern int string_to_M_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKVINT_double_conversion_allowed();
extern int M_NVKVINT_to_double(const void *pValue, double *nValue);
extern int is_M_NVKVINT_long_conversion_allowed();
extern int M_NVKVINT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVKVINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVKVINT(void *pValue);
extern int release_M_NVKVINT(void *pValue);
extern int copy_M_NVKVINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVKVINT_Utils;

/****************************************************************
 ** M_pantograph_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_pantograph_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_pantograph_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_pantograph_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_pantograph_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_pantograph_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_pantograph_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_pantograph_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_pantograph_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_pantograph_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_pantograph_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_pantograph_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_pantograph_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_pantograph_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_passiveshunting_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_passiveshunting_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_passiveshunting_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_passiveshunting_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_passiveshunting_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_passiveshunting_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_passiveshunting_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_passiveshunting_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_passiveshunting_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_passiveshunting_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_passiveshunting_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_POSITION 
 ****************************************************************/
extern int M_POSITION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_POSITION_string(const char *str, char **endptr);
extern int string_to_M_POSITION(const char *str, void *pValue, char **endptr);
extern int is_M_POSITION_double_conversion_allowed();
extern int M_POSITION_to_double(const void *pValue, double *nValue);
extern int is_M_POSITION_long_conversion_allowed();
extern int M_POSITION_to_long(const void *pValue, long *nValue);
extern void compare_M_POSITION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_POSITION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_POSITION(void *pValue);
extern int release_M_POSITION(void *pValue);
extern int copy_M_POSITION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_POSITION_Utils;

/****************************************************************
 ** M_sleeping_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_sleeping_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_sleeping_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_sleeping_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_sleeping_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_sleeping_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_sleeping_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_sleeping_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_sleeping_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_sleeping_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_sleeping_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SUPERVISION_STATUS_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_DMI_Types_Pkg_double_conversion_allowed();
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_SUPERVISION_STATUS_DMI_Types_Pkg_long_conversion_allowed();
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_SUPERVISION_STATUS_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SUPERVISION_STATUS_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SUPERVISION_STATUS_DMI_Types_Pkg(void *pValue);
extern int release_M_SUPERVISION_STATUS_DMI_Types_Pkg(void *pValue);
extern int copy_M_SUPERVISION_STATUS_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_INT_T_DATA 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SUPERVISION_STATUS_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_INT_T_DATA_double_conversion_allowed();
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_M_SUPERVISION_STATUS_INT_T_DATA_long_conversion_allowed();
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_M_SUPERVISION_STATUS_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SUPERVISION_STATUS_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SUPERVISION_STATUS_INT_T_DATA(void *pValue);
extern int release_M_SUPERVISION_STATUS_INT_T_DATA(void *pValue);
extern int copy_M_SUPERVISION_STATUS_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_INT_T_DATA_Utils;

/****************************************************************
 ** M_SupervisionDisplay_INT_T_DATA 
 ****************************************************************/
extern int M_SupervisionDisplay_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SupervisionDisplay_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_INT_T_DATA_double_conversion_allowed();
extern int M_SupervisionDisplay_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_M_SupervisionDisplay_INT_T_DATA_long_conversion_allowed();
extern int M_SupervisionDisplay_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_M_SupervisionDisplay_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SupervisionDisplay_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SupervisionDisplay_INT_T_DATA(void *pValue);
extern int release_M_SupervisionDisplay_INT_T_DATA(void *pValue);
extern int copy_M_SupervisionDisplay_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_INT_T_DATA_Utils;

/****************************************************************
 ** M_SupervisionDisplay_T_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SupervisionDisplay_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_T_DMI_Types_Pkg_double_conversion_allowed();
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_SupervisionDisplay_T_DMI_Types_Pkg_long_conversion_allowed();
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_SupervisionDisplay_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SupervisionDisplay_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SupervisionDisplay_T_DMI_Types_Pkg(void *pValue);
extern int release_M_SupervisionDisplay_T_DMI_Types_Pkg(void *pValue);
extern int copy_M_SupervisionDisplay_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_TRACKCOND 
 ****************************************************************/
extern int M_TRACKCOND_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_M_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_M_TRACKCOND_double_conversion_allowed();
extern int M_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int is_M_TRACKCOND_long_conversion_allowed();
extern int M_TRACKCOND_to_long(const void *pValue, long *nValue);
extern void compare_M_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TRACKCOND_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TRACKCOND(void *pValue);
extern int release_M_TRACKCOND(void *pValue);
extern int copy_M_TRACKCOND(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TRACKCOND_Utils;

/****************************************************************
 ** M_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trackcond_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_trackcond_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_trackcond_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_trackcond_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int release_M_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_trackcond_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_TrackTrain_Radio_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrackTrain_Radio_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrackTrain_Radio_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrackTrain_Radio_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrackTrain_Radio_T_TM_radio_messages_double_conversion_allowed();
extern int M_TrackTrain_Radio_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_TrackTrain_Radio_T_TM_radio_messages_long_conversion_allowed();
extern int M_TrackTrain_Radio_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_TrackTrain_Radio_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrackTrain_Radio_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrackTrain_Radio_T_TM_radio_messages(void *pValue);
extern int release_M_TrackTrain_Radio_T_TM_radio_messages(void *pValue);
extern int copy_M_TrackTrain_Radio_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrackTrain_Radio_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_traction_cutoff_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_traction_cutoff_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_cutoff_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_cutoff_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_traction_cutoff_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_traction_cutoff_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_traction_cutoff_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_traction_cutoff_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_traction_cutoff_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_traction_cutoff_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_traction_cutoff_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_traction_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_traction_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_traction_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_traction_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_traction_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_traction_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_traction_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_traction_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_traction_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_train_data_entry_type_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_train_data_entry_type_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_train_data_entry_type_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_train_data_entry_type_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_train_data_entry_type_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_train_data_entry_type_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_train_data_entry_type_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_train_data_entry_type_T_TIU_Types_Pkg(void *pValue);
extern int release_M_train_data_entry_type_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_train_data_entry_type_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_train_data_entry_type_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_trainintegrity_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_trainintegrity_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trainintegrity_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trainintegrity_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_trainintegrity_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_trainintegrity_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_trainintegrity_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_trainintegrity_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_trainintegrity_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_trainintegrity_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_trainintegrity_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_TrainTrack_compressed_packets_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrack_compressed_packets_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_compressed_packets_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_compressed_packets_T_TM_radio_messages_double_conversion_allowed();
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrack_compressed_packets_T_TM_radio_messages_long_conversion_allowed();
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrack_compressed_packets_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrack_compressed_packets_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrack_compressed_packets_T_TM_radio_messages(void *pValue);
extern int release_M_TrainTrack_compressed_packets_T_TM_radio_messages(void *pValue);
extern int copy_M_TrainTrack_compressed_packets_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrack_compressed_packets_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_Message_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_Message_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrack_Message_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_Message_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_Message_T_TM_radio_messages_double_conversion_allowed();
extern int M_TrainTrack_Message_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrack_Message_T_TM_radio_messages_long_conversion_allowed();
extern int M_TrainTrack_Message_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrack_Message_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrack_Message_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrack_Message_T_TM_radio_messages(void *pValue);
extern int release_M_TrainTrack_Message_T_TM_radio_messages(void *pValue);
extern int copy_M_TrainTrack_Message_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrack_Message_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_MessageHd_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrack_MessageHd_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_MessageHd_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_MessageHd_T_TM_radio_messages_double_conversion_allowed();
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrack_MessageHd_T_TM_radio_messages_long_conversion_allowed();
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrack_MessageHd_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrack_MessageHd_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrack_MessageHd_T_TM_radio_messages(void *pValue);
extern int release_M_TrainTrack_MessageHd_T_TM_radio_messages(void *pValue);
extern int copy_M_TrainTrack_MessageHd_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrack_MessageHd_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrackMessage_buffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrackMessage_buffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessage_buffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessage_buffer_t_TM_lib_internal_double_conversion_allowed();
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrackMessage_buffer_t_TM_lib_internal_long_conversion_allowed();
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrackMessage_buffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrackMessage_buffer_t_TM_lib_internal_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrackMessage_buffer_t_TM_lib_internal(void *pValue);
extern int release_M_TrainTrackMessage_buffer_t_TM_lib_internal(void *pValue);
extern int copy_M_TrainTrackMessage_buffer_t_TM_lib_internal(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrackMessage_buffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** M_TrainTrackMessageBus_t_TM_TrainTrack_Bus 
 ****************************************************************/
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_double_conversion_allowed();
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_long_conversion_allowed();
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(void *pValue);
extern int release_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(void *pValue);
extern int copy_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_Utils;

/****************************************************************
 ** M_TrainTrackRadioOutputBuffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_double_conversion_allowed();
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_long_conversion_allowed();
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(void *pValue);
extern int release_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(void *pValue);
extern int copy_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** M_VERSION 
 ****************************************************************/
extern int M_VERSION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_VERSION_string(const char *str, char **endptr);
extern int string_to_M_VERSION(const char *str, void *pValue, char **endptr);
extern int is_M_VERSION_double_conversion_allowed();
extern int M_VERSION_to_double(const void *pValue, double *nValue);
extern int is_M_VERSION_long_conversion_allowed();
extern int M_VERSION_to_long(const void *pValue, long *nValue);
extern void compare_M_VERSION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_VERSION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_VERSION(void *pValue);
extern int release_M_VERSION(void *pValue);
extern int copy_M_VERSION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_VERSION_Utils;

/****************************************************************
 ** M_VOLTAGE 
 ****************************************************************/
extern int M_VOLTAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_VOLTAGE_string(const char *str, char **endptr);
extern int string_to_M_VOLTAGE(const char *str, void *pValue, char **endptr);
extern int is_M_VOLTAGE_double_conversion_allowed();
extern int M_VOLTAGE_to_double(const void *pValue, double *nValue);
extern int is_M_VOLTAGE_long_conversion_allowed();
extern int M_VOLTAGE_to_long(const void *pValue, long *nValue);
extern void compare_M_VOLTAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_VOLTAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_VOLTAGE(void *pValue);
extern int release_M_VOLTAGE(void *pValue);
extern int copy_M_VOLTAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_VOLTAGE_Utils;

/****************************************************************
 ** M_voltage_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_voltage_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_voltage_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_voltage_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_voltage_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_voltage_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_voltage_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_voltage_T_TIU_Types_Pkg(void *pValue);
extern int release_M_voltage_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_voltage_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_voltage_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_voltage_types_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_types_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_voltage_types_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_types_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_types_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_voltage_types_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_voltage_types_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_voltage_types_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_voltage_types_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_voltage_types_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_voltage_types_T_TIU_Types_Pkg(void *pValue);
extern int release_M_voltage_types_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_voltage_types_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_voltage_types_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** MA_Level_t_TrackAtlasTypes 
 ****************************************************************/
extern int MA_Level_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MA_Level_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MA_Level_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MA_Level_t_TrackAtlasTypes_double_conversion_allowed();
extern int MA_Level_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MA_Level_t_TrackAtlasTypes_long_conversion_allowed();
extern int MA_Level_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MA_Level_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MA_Level_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MA_Level_t_TrackAtlasTypes(void *pValue);
extern int release_MA_Level_t_TrackAtlasTypes(void *pValue);
extern int copy_MA_Level_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MA_Level_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MA_section_real_T_TargetManagement_types 
 ****************************************************************/
extern int MA_section_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MA_section_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MA_section_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MA_section_real_T_TargetManagement_types_double_conversion_allowed();
extern int MA_section_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_MA_section_real_T_TargetManagement_types_long_conversion_allowed();
extern int MA_section_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_MA_section_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MA_section_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MA_section_real_T_TargetManagement_types(void *pValue);
extern int release_MA_section_real_T_TargetManagement_types(void *pValue);
extern int copy_MA_section_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MA_section_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** MAReqParams_T 
 ****************************************************************/
extern int MAReqParams_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MAReqParams_T_string(const char *str, char **endptr);
extern int string_to_MAReqParams_T(const char *str, void *pValue, char **endptr);
extern int is_MAReqParams_T_double_conversion_allowed();
extern int MAReqParams_T_to_double(const void *pValue, double *nValue);
extern int is_MAReqParams_T_long_conversion_allowed();
extern int MAReqParams_T_to_long(const void *pValue, long *nValue);
extern void compare_MAReqParams_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MAReqParams_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MAReqParams_T(void *pValue);
extern int release_MAReqParams_T(void *pValue);
extern int copy_MAReqParams_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MAReqParams_T_Utils;

/****************************************************************
 ** Message_EVC_to_Train_Interface_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(void *pValue);
extern int release_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(void *pValue);
extern int copy_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Message_Train_Interface_to_EVC_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(void *pValue);
extern int release_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(void *pValue);
extern int copy_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Metadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int Metadata_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Metadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Metadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Metadata_T_Common_Types_Pkg_double_conversion_allowed();
extern int Metadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Metadata_T_Common_Types_Pkg_long_conversion_allowed();
extern int Metadata_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Metadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Metadata_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Metadata_T_Common_Types_Pkg(void *pValue);
extern int release_Metadata_T_Common_Types_Pkg(void *pValue);
extern int copy_Metadata_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Metadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MetadataElement_T_Common_Types_Pkg 
 ****************************************************************/
extern int MetadataElement_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MetadataElement_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MetadataElement_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MetadataElement_T_Common_Types_Pkg_double_conversion_allowed();
extern int MetadataElement_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MetadataElement_T_Common_Types_Pkg_long_conversion_allowed();
extern int MetadataElement_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MetadataElement_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MetadataElement_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MetadataElement_T_Common_Types_Pkg(void *pValue);
extern int release_MetadataElement_T_Common_Types_Pkg(void *pValue);
extern int copy_MetadataElement_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MetadataElement_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MetadataTruthtable_T1_CheckEuroradioMessage 
 ****************************************************************/
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MetadataTruthtable_T1_CheckEuroradioMessage_string(const char *str, char **endptr);
extern int string_to_MetadataTruthtable_T1_CheckEuroradioMessage(const char *str, void *pValue, char **endptr);
extern int is_MetadataTruthtable_T1_CheckEuroradioMessage_double_conversion_allowed();
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_double(const void *pValue, double *nValue);
extern int is_MetadataTruthtable_T1_CheckEuroradioMessage_long_conversion_allowed();
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_long(const void *pValue, long *nValue);
extern void compare_MetadataTruthtable_T1_CheckEuroradioMessage(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MetadataTruthtable_T1_CheckEuroradioMessage_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MetadataTruthtable_T1_CheckEuroradioMessage(void *pValue);
extern int release_MetadataTruthtable_T1_CheckEuroradioMessage(void *pValue);
extern int copy_MetadataTruthtable_T1_CheckEuroradioMessage(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MetadataTruthtable_T1_CheckEuroradioMessage_Utils;

/****************************************************************
 ** mobileConnectionCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnectionCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionCmd_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnectionCmd_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnectionCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnectionCmd_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnectionCmd_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnectionCmd_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnectionCmd_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnectionCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnectionContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionContext_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnectionContext_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnectionContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnectionContext_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnectionContext_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnectionContext_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnectionContext_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnectionContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnectionStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionStatus_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnectionStatus_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnectionStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnectionStatus_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnectionStatus_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnectionStatus_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnectionStatus_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnectionStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnetionAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnetionAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnetionAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnetionAction_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnetionAction_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnetionAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnetionAction_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnetionAction_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnetionAction_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnetionAction_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnetionAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileHealthStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileHealthStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileHealthStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileHealthStatus_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileHealthStatus_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileHealthStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileHealthStatus_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileHealthStatus_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileHealthStatus_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileHealthStatus_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileHealthStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileHWConnectionStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileHWConnectionStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWConnectionStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWConnectionStatus_Type_MoRC_Pck_double_conversion_allowed();
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_mobileHWConnectionStatus_Type_MoRC_Pck_long_conversion_allowed();
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_mobileHWConnectionStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileHWConnectionStatus_Type_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileHWConnectionStatus_Type_MoRC_Pck(void *pValue);
extern int release_mobileHWConnectionStatus_Type_MoRC_Pck(void *pValue);
extern int copy_mobileHWConnectionStatus_Type_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileHWConnectionStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileHWStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWStatus_Type_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileHWStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWStatus_Type_MoRC_Pck_double_conversion_allowed();
extern int mobileHWStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_mobileHWStatus_Type_MoRC_Pck_long_conversion_allowed();
extern int mobileHWStatus_Type_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_mobileHWStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileHWStatus_Type_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileHWStatus_Type_MoRC_Pck(void *pValue);
extern int release_mobileHWStatus_Type_MoRC_Pck(void *pValue);
extern int copy_mobileHWStatus_Type_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileHWStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileRegistrationAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationAction_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationAction_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationAction_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationAction_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationAction_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationAction_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationCmd_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationCmd_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationCmd_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationCmd_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationCmd_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationCmd_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationContext_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationContext_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationContext_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationContext_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationContext_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationContext_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationStatus_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationStatus_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationStatus_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationStatus_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationStatus_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationStatus_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** Mode_control_and_train_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Mode_control_and_train_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Mode_control_and_train_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Mode_control_and_train_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Mode_control_and_train_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Mode_control_and_train_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Mode_control_and_train_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Mode_control_and_train_status_T_TIU_Types_Pkg(void *pValue);
extern int release_Mode_control_and_train_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_Mode_control_and_train_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Mode_control_and_train_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ModeDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableActionKind_DataDictionary_Pkg_double_conversion_allowed();
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ModeDecisionTableActionKind_DataDictionary_Pkg_long_conversion_allowed();
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ModeDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ModeDecisionTableActionKind_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ModeDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int release_ModeDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int copy_ModeDecisionTableActionKind_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ModeDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ModeDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableType_DataDictionary_Pkg_double_conversion_allowed();
extern int ModeDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ModeDecisionTableType_DataDictionary_Pkg_long_conversion_allowed();
extern int ModeDecisionTableType_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ModeDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ModeDecisionTableType_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ModeDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int release_ModeDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int copy_ModeDecisionTableType_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ModeDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeLevel2PositionReport_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** morc_configData_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morc_configData_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_morc_configData_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morc_configData_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morc_configData_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int morc_configData_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_morc_configData_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int morc_configData_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_morc_configData_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_morc_configData_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_morc_configData_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_morc_configData_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_morc_configData_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_morc_configData_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** morcStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morcStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_morcStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morcStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morcStatus_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int morcStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_morcStatus_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int morcStatus_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_morcStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_morcStatus_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_morcStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_morcStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_morcStatus_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_morcStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** MovementAuthority_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthority_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MovementAuthority_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthority_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthority_t_TrackAtlasTypes_double_conversion_allowed();
extern int MovementAuthority_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MovementAuthority_t_TrackAtlasTypes_long_conversion_allowed();
extern int MovementAuthority_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MovementAuthority_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MovementAuthority_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MovementAuthority_t_TrackAtlasTypes(void *pValue);
extern int release_MovementAuthority_t_TrackAtlasTypes(void *pValue);
extern int copy_MovementAuthority_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MovementAuthority_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** movementAuthorityForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_movementAuthorityForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_movementAuthorityForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_movementAuthorityForDMI_T_DMI_Types_Pkg_double_conversion_allowed();
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_movementAuthorityForDMI_T_DMI_Types_Pkg_long_conversion_allowed();
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_movementAuthorityForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_movementAuthorityForDMI_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_movementAuthorityForDMI_T_DMI_Types_Pkg(void *pValue);
extern int release_movementAuthorityForDMI_T_DMI_Types_Pkg(void *pValue);
extern int copy_movementAuthorityForDMI_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_movementAuthorityForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** MovementAuthoritySection_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthoritySection_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MovementAuthoritySection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthoritySection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthoritySection_t_TrackAtlasTypes_double_conversion_allowed();
extern int MovementAuthoritySection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MovementAuthoritySection_t_TrackAtlasTypes_long_conversion_allowed();
extern int MovementAuthoritySection_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MovementAuthoritySection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MovementAuthoritySection_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MovementAuthoritySection_t_TrackAtlasTypes(void *pValue);
extern int release_MovementAuthoritySection_t_TrackAtlasTypes(void *pValue);
extern int copy_MovementAuthoritySection_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MovementAuthoritySection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MovementAuthoritySectionlist_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MovementAuthoritySectionlist_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthoritySectionlist_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthoritySectionlist_t_TrackAtlasTypes_double_conversion_allowed();
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MovementAuthoritySectionlist_t_TrackAtlasTypes_long_conversion_allowed();
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MovementAuthoritySectionlist_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MovementAuthoritySectionlist_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MovementAuthoritySectionlist_t_TrackAtlasTypes(void *pValue);
extern int release_MovementAuthoritySectionlist_t_TrackAtlasTypes(void *pValue);
extern int copy_MovementAuthoritySectionlist_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MovementAuthoritySectionlist_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MRSP_internal_section_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_section_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_internal_section_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_section_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_section_T_TargetManagement_types_double_conversion_allowed();
extern int MRSP_internal_section_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_MRSP_internal_section_T_TargetManagement_types_long_conversion_allowed();
extern int MRSP_internal_section_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_internal_section_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_internal_section_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_internal_section_T_TargetManagement_types(void *pValue);
extern int release_MRSP_internal_section_T_TargetManagement_types(void *pValue);
extern int copy_MRSP_internal_section_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_internal_section_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_internal_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_internal_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_T_TargetManagement_types_double_conversion_allowed();
extern int MRSP_internal_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_MRSP_internal_T_TargetManagement_types_long_conversion_allowed();
extern int MRSP_internal_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_internal_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_internal_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_internal_T_TargetManagement_types(void *pValue);
extern int release_MRSP_internal_T_TargetManagement_types(void *pValue);
extern int copy_MRSP_internal_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_internal_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_Profile_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_Profile_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_Profile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_Profile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_Profile_t_TrackAtlasTypes_double_conversion_allowed();
extern int MRSP_Profile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MRSP_Profile_t_TrackAtlasTypes_long_conversion_allowed();
extern int MRSP_Profile_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_Profile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_Profile_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_Profile_t_TrackAtlasTypes(void *pValue);
extern int release_MRSP_Profile_t_TrackAtlasTypes(void *pValue);
extern int copy_MRSP_Profile_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_Profile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MRSP_reduction_acc_TA_Export 
 ****************************************************************/
extern int MRSP_reduction_acc_TA_Export_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_reduction_acc_TA_Export_string(const char *str, char **endptr);
extern int string_to_MRSP_reduction_acc_TA_Export(const char *str, void *pValue, char **endptr);
extern int is_MRSP_reduction_acc_TA_Export_double_conversion_allowed();
extern int MRSP_reduction_acc_TA_Export_to_double(const void *pValue, double *nValue);
extern int is_MRSP_reduction_acc_TA_Export_long_conversion_allowed();
extern int MRSP_reduction_acc_TA_Export_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_reduction_acc_TA_Export(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_reduction_acc_TA_Export_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_reduction_acc_TA_Export(void *pValue);
extern int release_MRSP_reduction_acc_TA_Export(void *pValue);
extern int copy_MRSP_reduction_acc_TA_Export(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_reduction_acc_TA_Export_Utils;

/****************************************************************
 ** MRSP_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_section_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_section_t_TrackAtlasTypes_double_conversion_allowed();
extern int MRSP_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MRSP_section_t_TrackAtlasTypes_long_conversion_allowed();
extern int MRSP_section_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_section_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_section_t_TrackAtlasTypes(void *pValue);
extern int release_MRSP_section_t_TrackAtlasTypes(void *pValue);
extern int copy_MRSP_section_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MSG_Errors_T_Common_Types_Pkg 
 ****************************************************************/
extern int MSG_Errors_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MSG_Errors_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MSG_Errors_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MSG_Errors_T_Common_Types_Pkg_double_conversion_allowed();
extern int MSG_Errors_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MSG_Errors_T_Common_Types_Pkg_long_conversion_allowed();
extern int MSG_Errors_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MSG_Errors_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MSG_Errors_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MSG_Errors_T_Common_Types_Pkg(void *pValue);
extern int release_MSG_Errors_T_Common_Types_Pkg(void *pValue);
extern int copy_MSG_Errors_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MSG_Errors_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** msgFromTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_msgFromTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgFromTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgFromTrack_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_msgFromTrack_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_msgFromTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_msgFromTrack_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_msgFromTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_msgFromTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_msgFromTrack_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_msgFromTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** MsgSource_T_Common_Types_Pkg 
 ****************************************************************/
extern int MsgSource_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MsgSource_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MsgSource_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MsgSource_T_Common_Types_Pkg_double_conversion_allowed();
extern int MsgSource_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MsgSource_T_Common_Types_Pkg_long_conversion_allowed();
extern int MsgSource_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MsgSource_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MsgSource_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MsgSource_T_Common_Types_Pkg(void *pValue);
extern int release_MsgSource_T_Common_Types_Pkg(void *pValue);
extern int copy_MsgSource_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MsgSource_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MsgStructure 
 ****************************************************************/
extern int MsgStructure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MsgStructure_string(const char *str, char **endptr);
extern int string_to_MsgStructure(const char *str, void *pValue, char **endptr);
extern int is_MsgStructure_double_conversion_allowed();
extern int MsgStructure_to_double(const void *pValue, double *nValue);
extern int is_MsgStructure_long_conversion_allowed();
extern int MsgStructure_to_long(const void *pValue, long *nValue);
extern void compare_MsgStructure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MsgStructure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MsgStructure(void *pValue);
extern int release_MsgStructure(void *pValue);
extern int copy_MsgStructure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MsgStructure_Utils;

/****************************************************************
 ** msgToTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_msgToTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrack_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_msgToTrack_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_msgToTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_msgToTrack_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_msgToTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_msgToTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_msgToTrack_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_msgToTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgToTrackTriggers_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** mv_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int mv_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mv_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_mv_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_mv_Map_t_SDMConversionModelPkg_double_conversion_allowed();
extern int mv_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_mv_Map_t_SDMConversionModelPkg_long_conversion_allowed();
extern int mv_Map_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_mv_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mv_Map_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mv_Map_t_SDMConversionModelPkg(void *pValue);
extern int release_mv_Map_t_SDMConversionModelPkg(void *pValue);
extern int copy_mv_Map_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mv_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** MyArray_SDM_Commands_Pkg 
 ****************************************************************/
extern int MyArray_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MyArray_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_MyArray_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MyArray_SDM_Commands_Pkg_double_conversion_allowed();
extern int MyArray_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MyArray_SDM_Commands_Pkg_long_conversion_allowed();
extern int MyArray_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MyArray_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MyArray_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MyArray_SDM_Commands_Pkg(void *pValue);
extern int release_MyArray_SDM_Commands_Pkg(void *pValue);
extern int copy_MyArray_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MyArray_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** N_AXLE 
 ****************************************************************/
extern int N_AXLE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_AXLE_string(const char *str, char **endptr);
extern int string_to_N_AXLE(const char *str, void *pValue, char **endptr);
extern int is_N_AXLE_double_conversion_allowed();
extern int N_AXLE_to_double(const void *pValue, double *nValue);
extern int is_N_AXLE_long_conversion_allowed();
extern int N_AXLE_to_long(const void *pValue, long *nValue);
extern void compare_N_AXLE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_AXLE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_AXLE(void *pValue);
extern int release_N_AXLE(void *pValue);
extern int copy_N_AXLE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_AXLE_Utils;

/****************************************************************
 ** N_ITER 
 ****************************************************************/
extern int N_ITER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_ITER_string(const char *str, char **endptr);
extern int string_to_N_ITER(const char *str, void *pValue, char **endptr);
extern int is_N_ITER_double_conversion_allowed();
extern int N_ITER_to_double(const void *pValue, double *nValue);
extern int is_N_ITER_long_conversion_allowed();
extern int N_ITER_to_long(const void *pValue, long *nValue);
extern void compare_N_ITER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_ITER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_ITER(void *pValue);
extern int release_N_ITER(void *pValue);
extern int copy_N_ITER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_ITER_Utils;

/****************************************************************
 ** N_PIG 
 ****************************************************************/
extern int N_PIG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_PIG_string(const char *str, char **endptr);
extern int string_to_N_PIG(const char *str, void *pValue, char **endptr);
extern int is_N_PIG_double_conversion_allowed();
extern int N_PIG_to_double(const void *pValue, double *nValue);
extern int is_N_PIG_long_conversion_allowed();
extern int N_PIG_to_long(const void *pValue, long *nValue);
extern void compare_N_PIG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_PIG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_PIG(void *pValue);
extern int release_N_PIG(void *pValue);
extern int copy_N_PIG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_PIG_Utils;

/****************************************************************
 ** N_TOTAL 
 ****************************************************************/
extern int N_TOTAL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_TOTAL_string(const char *str, char **endptr);
extern int string_to_N_TOTAL(const char *str, void *pValue, char **endptr);
extern int is_N_TOTAL_double_conversion_allowed();
extern int N_TOTAL_to_double(const void *pValue, double *nValue);
extern int is_N_TOTAL_long_conversion_allowed();
extern int N_TOTAL_to_long(const void *pValue, long *nValue);
extern void compare_N_TOTAL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_TOTAL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_TOTAL(void *pValue);
extern int release_N_TOTAL(void *pValue);
extern int copy_N_TOTAL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_TOTAL_Utils;

/****************************************************************
 ** NationalParams_T 
 ****************************************************************/
extern int NationalParams_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NationalParams_T_string(const char *str, char **endptr);
extern int string_to_NationalParams_T(const char *str, void *pValue, char **endptr);
extern int is_NationalParams_T_double_conversion_allowed();
extern int NationalParams_T_to_double(const void *pValue, double *nValue);
extern int is_NationalParams_T_long_conversion_allowed();
extern int NationalParams_T_to_long(const void *pValue, long *nValue);
extern void compare_NationalParams_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NationalParams_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NationalParams_T(void *pValue);
extern int release_NationalParams_T(void *pValue);
extern int copy_NationalParams_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NationalParams_T_Utils;

/****************************************************************
 ** nationValuesForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nationValuesForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nationValuesForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nationValuesForDMI_T_DMI_Types_Pkg_double_conversion_allowed();
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nationValuesForDMI_T_DMI_Types_Pkg_long_conversion_allowed();
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nationValuesForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nationValuesForDMI_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nationValuesForDMI_T_DMI_Types_Pkg(void *pValue);
extern int release_nationValuesForDMI_T_DMI_Types_Pkg(void *pValue);
extern int copy_nationValuesForDMI_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nationValuesForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** NC_CDDIFF 
 ****************************************************************/
extern int NC_CDDIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_CDDIFF_string(const char *str, char **endptr);
extern int string_to_NC_CDDIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_CDDIFF_double_conversion_allowed();
extern int NC_CDDIFF_to_double(const void *pValue, double *nValue);
extern int is_NC_CDDIFF_long_conversion_allowed();
extern int NC_CDDIFF_to_long(const void *pValue, long *nValue);
extern void compare_NC_CDDIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_CDDIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_CDDIFF(void *pValue);
extern int release_NC_CDDIFF(void *pValue);
extern int copy_NC_CDDIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_CDDIFF_Utils;

/****************************************************************
 ** NC_CDTRAIN 
 ****************************************************************/
extern int NC_CDTRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_CDTRAIN_string(const char *str, char **endptr);
extern int string_to_NC_CDTRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_CDTRAIN_double_conversion_allowed();
extern int NC_CDTRAIN_to_double(const void *pValue, double *nValue);
extern int is_NC_CDTRAIN_long_conversion_allowed();
extern int NC_CDTRAIN_to_long(const void *pValue, long *nValue);
extern void compare_NC_CDTRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_CDTRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_CDTRAIN(void *pValue);
extern int release_NC_CDTRAIN(void *pValue);
extern int copy_NC_CDTRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_CDTRAIN_Utils;

/****************************************************************
 ** NC_DIFF 
 ****************************************************************/
extern int NC_DIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_DIFF_string(const char *str, char **endptr);
extern int string_to_NC_DIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_DIFF_double_conversion_allowed();
extern int NC_DIFF_to_double(const void *pValue, double *nValue);
extern int is_NC_DIFF_long_conversion_allowed();
extern int NC_DIFF_to_long(const void *pValue, long *nValue);
extern void compare_NC_DIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_DIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_DIFF(void *pValue);
extern int release_NC_DIFF(void *pValue);
extern int copy_NC_DIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_DIFF_Utils;

/****************************************************************
 ** NC_TRAIN 
 ****************************************************************/
extern int NC_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_TRAIN_string(const char *str, char **endptr);
extern int string_to_NC_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_TRAIN_double_conversion_allowed();
extern int NC_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_NC_TRAIN_long_conversion_allowed();
extern int NC_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_NC_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_TRAIN(void *pValue);
extern int release_NC_TRAIN(void *pValue);
extern int copy_NC_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_TRAIN_Utils;

/****************************************************************
 ** NID_BG 
 ****************************************************************/
extern int NID_BG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_BG_string(const char *str, char **endptr);
extern int string_to_NID_BG(const char *str, void *pValue, char **endptr);
extern int is_NID_BG_double_conversion_allowed();
extern int NID_BG_to_double(const void *pValue, double *nValue);
extern int is_NID_BG_long_conversion_allowed();
extern int NID_BG_to_long(const void *pValue, long *nValue);
extern void compare_NID_BG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_BG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_BG(void *pValue);
extern int release_NID_BG(void *pValue);
extern int copy_NID_BG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_BG_Utils;

/****************************************************************
 ** NID_C 
 ****************************************************************/
extern int NID_C_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_C_string(const char *str, char **endptr);
extern int string_to_NID_C(const char *str, void *pValue, char **endptr);
extern int is_NID_C_double_conversion_allowed();
extern int NID_C_to_double(const void *pValue, double *nValue);
extern int is_NID_C_long_conversion_allowed();
extern int NID_C_to_long(const void *pValue, long *nValue);
extern void compare_NID_C(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_C_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_C(void *pValue);
extern int release_NID_C(void *pValue);
extern int copy_NID_C(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_C_Utils;

/****************************************************************
 ** NID_CTRACTION 
 ****************************************************************/
extern int NID_CTRACTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_CTRACTION_string(const char *str, char **endptr);
extern int string_to_NID_CTRACTION(const char *str, void *pValue, char **endptr);
extern int is_NID_CTRACTION_double_conversion_allowed();
extern int NID_CTRACTION_to_double(const void *pValue, double *nValue);
extern int is_NID_CTRACTION_long_conversion_allowed();
extern int NID_CTRACTION_to_long(const void *pValue, long *nValue);
extern void compare_NID_CTRACTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_CTRACTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_CTRACTION(void *pValue);
extern int release_NID_CTRACTION(void *pValue);
extern int copy_NID_CTRACTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_CTRACTION_Utils;

/****************************************************************
 ** NID_ctraction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int NID_ctraction_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_ctraction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ctraction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ctraction_T_TIU_Types_Pkg_double_conversion_allowed();
extern int NID_ctraction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_NID_ctraction_T_TIU_Types_Pkg_long_conversion_allowed();
extern int NID_ctraction_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_NID_ctraction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_ctraction_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_ctraction_T_TIU_Types_Pkg(void *pValue);
extern int release_NID_ctraction_T_TIU_Types_Pkg(void *pValue);
extern int copy_NID_ctraction_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_ctraction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** NID_EM 
 ****************************************************************/
extern int NID_EM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_string(const char *str, char **endptr);
extern int string_to_NID_EM(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_double_conversion_allowed();
extern int NID_EM_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_long_conversion_allowed();
extern int NID_EM_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM(void *pValue);
extern int release_NID_EM(void *pValue);
extern int copy_NID_EM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_Utils;

/****************************************************************
 ** NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_double_conversion_allowed();
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_long_conversion_allowed();
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int release_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int copy_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_double_conversion_allowed();
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_long_conversion_allowed();
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int release_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int copy_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_double_conversion_allowed();
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_long_conversion_allowed();
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int release_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int copy_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_ENGINE 
 ****************************************************************/
extern int NID_ENGINE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_ENGINE_string(const char *str, char **endptr);
extern int string_to_NID_ENGINE(const char *str, void *pValue, char **endptr);
extern int is_NID_ENGINE_double_conversion_allowed();
extern int NID_ENGINE_to_double(const void *pValue, double *nValue);
extern int is_NID_ENGINE_long_conversion_allowed();
extern int NID_ENGINE_to_long(const void *pValue, long *nValue);
extern void compare_NID_ENGINE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_ENGINE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_ENGINE(void *pValue);
extern int release_NID_ENGINE(void *pValue);
extern int copy_NID_ENGINE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_ENGINE_Utils;

/****************************************************************
 ** NID_ERRORBG_BG_Types_Pkg 
 ****************************************************************/
extern int NID_ERRORBG_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_ERRORBG_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ERRORBG_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ERRORBG_BG_Types_Pkg_double_conversion_allowed();
extern int NID_ERRORBG_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_NID_ERRORBG_BG_Types_Pkg_long_conversion_allowed();
extern int NID_ERRORBG_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_NID_ERRORBG_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_ERRORBG_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_ERRORBG_BG_Types_Pkg(void *pValue);
extern int release_NID_ERRORBG_BG_Types_Pkg(void *pValue);
extern int copy_NID_ERRORBG_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_ERRORBG_BG_Types_Pkg_Utils;

/****************************************************************
 ** NID_LRBG 
 ****************************************************************/
extern int NID_LRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_LRBG_string(const char *str, char **endptr);
extern int string_to_NID_LRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LRBG_double_conversion_allowed();
extern int NID_LRBG_to_double(const void *pValue, double *nValue);
extern int is_NID_LRBG_long_conversion_allowed();
extern int NID_LRBG_to_long(const void *pValue, long *nValue);
extern void compare_NID_LRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_LRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_LRBG(void *pValue);
extern int release_NID_LRBG(void *pValue);
extern int copy_NID_LRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_LRBG_Utils;

/****************************************************************
 ** NID_LTRBG 
 ****************************************************************/
extern int NID_LTRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_LTRBG_string(const char *str, char **endptr);
extern int string_to_NID_LTRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LTRBG_double_conversion_allowed();
extern int NID_LTRBG_to_double(const void *pValue, double *nValue);
extern int is_NID_LTRBG_long_conversion_allowed();
extern int NID_LTRBG_to_long(const void *pValue, long *nValue);
extern void compare_NID_LTRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_LTRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_LTRBG(void *pValue);
extern int release_NID_LTRBG(void *pValue);
extern int copy_NID_LTRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_LTRBG_Utils;

/****************************************************************
 ** NID_MESSAGE 
 ****************************************************************/
extern int NID_MESSAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_MESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_MESSAGE_double_conversion_allowed();
extern int NID_MESSAGE_to_double(const void *pValue, double *nValue);
extern int is_NID_MESSAGE_long_conversion_allowed();
extern int NID_MESSAGE_to_long(const void *pValue, long *nValue);
extern void compare_NID_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_MESSAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_MESSAGE(void *pValue);
extern int release_NID_MESSAGE(void *pValue);
extern int copy_NID_MESSAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_MESSAGE_Utils;

/****************************************************************
 ** NID_MN 
 ****************************************************************/
extern int NID_MN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_MN_string(const char *str, char **endptr);
extern int string_to_NID_MN(const char *str, void *pValue, char **endptr);
extern int is_NID_MN_double_conversion_allowed();
extern int NID_MN_to_double(const void *pValue, double *nValue);
extern int is_NID_MN_long_conversion_allowed();
extern int NID_MN_to_long(const void *pValue, long *nValue);
extern void compare_NID_MN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_MN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_MN(void *pValue);
extern int release_NID_MN(void *pValue);
extern int copy_NID_MN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_MN_Utils;

/****************************************************************
 ** NID_NTC 
 ****************************************************************/
extern int NID_NTC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_NTC_string(const char *str, char **endptr);
extern int string_to_NID_NTC(const char *str, void *pValue, char **endptr);
extern int is_NID_NTC_double_conversion_allowed();
extern int NID_NTC_to_double(const void *pValue, double *nValue);
extern int is_NID_NTC_long_conversion_allowed();
extern int NID_NTC_to_long(const void *pValue, long *nValue);
extern void compare_NID_NTC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_NTC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_NTC(void *pValue);
extern int release_NID_NTC(void *pValue);
extern int copy_NID_NTC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_NTC_Utils;

/****************************************************************
 ** NID_OPERATIONAL 
 ****************************************************************/
extern int NID_OPERATIONAL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_OPERATIONAL_string(const char *str, char **endptr);
extern int string_to_NID_OPERATIONAL(const char *str, void *pValue, char **endptr);
extern int is_NID_OPERATIONAL_double_conversion_allowed();
extern int NID_OPERATIONAL_to_double(const void *pValue, double *nValue);
extern int is_NID_OPERATIONAL_long_conversion_allowed();
extern int NID_OPERATIONAL_to_long(const void *pValue, long *nValue);
extern void compare_NID_OPERATIONAL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_OPERATIONAL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_OPERATIONAL(void *pValue);
extern int release_NID_OPERATIONAL(void *pValue);
extern int copy_NID_OPERATIONAL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_OPERATIONAL_Utils;

/****************************************************************
 ** NID_PACKET 
 ****************************************************************/
extern int NID_PACKET_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_PACKET_string(const char *str, char **endptr);
extern int string_to_NID_PACKET(const char *str, void *pValue, char **endptr);
extern int is_NID_PACKET_double_conversion_allowed();
extern int NID_PACKET_to_double(const void *pValue, double *nValue);
extern int is_NID_PACKET_long_conversion_allowed();
extern int NID_PACKET_to_long(const void *pValue, long *nValue);
extern void compare_NID_PACKET(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_PACKET_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_PACKET(void *pValue);
extern int release_NID_PACKET(void *pValue);
extern int copy_NID_PACKET(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_PACKET_Utils;

/****************************************************************
 ** nid_packet_meta_TM 
 ****************************************************************/
extern int nid_packet_meta_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nid_packet_meta_TM_string(const char *str, char **endptr);
extern int string_to_nid_packet_meta_TM(const char *str, void *pValue, char **endptr);
extern int is_nid_packet_meta_TM_double_conversion_allowed();
extern int nid_packet_meta_TM_to_double(const void *pValue, double *nValue);
extern int is_nid_packet_meta_TM_long_conversion_allowed();
extern int nid_packet_meta_TM_to_long(const void *pValue, long *nValue);
extern void compare_nid_packet_meta_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nid_packet_meta_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nid_packet_meta_TM(void *pValue);
extern int release_nid_packet_meta_TM(void *pValue);
extern int copy_nid_packet_meta_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nid_packet_meta_TM_Utils;

/****************************************************************
 ** NID_PRVLRBG 
 ****************************************************************/
extern int NID_PRVLRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_PRVLRBG_string(const char *str, char **endptr);
extern int string_to_NID_PRVLRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_PRVLRBG_double_conversion_allowed();
extern int NID_PRVLRBG_to_double(const void *pValue, double *nValue);
extern int is_NID_PRVLRBG_long_conversion_allowed();
extern int NID_PRVLRBG_to_long(const void *pValue, long *nValue);
extern void compare_NID_PRVLRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_PRVLRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_PRVLRBG(void *pValue);
extern int release_NID_PRVLRBG(void *pValue);
extern int copy_NID_PRVLRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_PRVLRBG_Utils;

/****************************************************************
 ** NID_RADIO 
 ****************************************************************/
extern int NID_RADIO_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_RADIO_string(const char *str, char **endptr);
extern int string_to_NID_RADIO(const char *str, void *pValue, char **endptr);
extern int is_NID_RADIO_double_conversion_allowed();
extern int NID_RADIO_to_double(const void *pValue, double *nValue);
extern int is_NID_RADIO_long_conversion_allowed();
extern int NID_RADIO_to_long(const void *pValue, long *nValue);
extern void compare_NID_RADIO(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_RADIO_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_RADIO(void *pValue);
extern int release_NID_RADIO(void *pValue);
extern int copy_NID_RADIO(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_RADIO_Utils;

/****************************************************************
 ** NID_RBC 
 ****************************************************************/
extern int NID_RBC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_RBC_string(const char *str, char **endptr);
extern int string_to_NID_RBC(const char *str, void *pValue, char **endptr);
extern int is_NID_RBC_double_conversion_allowed();
extern int NID_RBC_to_double(const void *pValue, double *nValue);
extern int is_NID_RBC_long_conversion_allowed();
extern int NID_RBC_to_long(const void *pValue, long *nValue);
extern void compare_NID_RBC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_RBC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_RBC(void *pValue);
extern int release_NID_RBC(void *pValue);
extern int copy_NID_RBC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_RBC_Utils;

/****************************************************************
 ** NID_STM_DMI_Types_Pkg 
 ****************************************************************/
extern int NID_STM_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_STM_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_STM_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_STM_DMI_Types_Pkg_double_conversion_allowed();
extern int NID_STM_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_NID_STM_DMI_Types_Pkg_long_conversion_allowed();
extern int NID_STM_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_NID_STM_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_STM_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_STM_DMI_Types_Pkg(void *pValue);
extern int release_NID_STM_DMI_Types_Pkg(void *pValue);
extern int copy_NID_STM_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_STM_DMI_Types_Pkg_Utils;

/****************************************************************
 ** NID_TEXTMESSAGE 
 ****************************************************************/
extern int NID_TEXTMESSAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_TEXTMESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_TEXTMESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_TEXTMESSAGE_double_conversion_allowed();
extern int NID_TEXTMESSAGE_to_double(const void *pValue, double *nValue);
extern int is_NID_TEXTMESSAGE_long_conversion_allowed();
extern int NID_TEXTMESSAGE_to_long(const void *pValue, long *nValue);
extern void compare_NID_TEXTMESSAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_TEXTMESSAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_TEXTMESSAGE(void *pValue);
extern int release_NID_TEXTMESSAGE(void *pValue);
extern int copy_NID_TEXTMESSAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_TEXTMESSAGE_Utils;

/****************************************************************
 ** NID_TSR 
 ****************************************************************/
extern int NID_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_TSR_string(const char *str, char **endptr);
extern int string_to_NID_TSR(const char *str, void *pValue, char **endptr);
extern int is_NID_TSR_double_conversion_allowed();
extern int NID_TSR_to_double(const void *pValue, double *nValue);
extern int is_NID_TSR_long_conversion_allowed();
extern int NID_TSR_to_long(const void *pValue, long *nValue);
extern void compare_NID_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_TSR(void *pValue);
extern int release_NID_TSR(void *pValue);
extern int copy_NID_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_TSR_Utils;

/****************************************************************
 ** NID_XUSER 
 ****************************************************************/
extern int NID_XUSER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_XUSER_string(const char *str, char **endptr);
extern int string_to_NID_XUSER(const char *str, void *pValue, char **endptr);
extern int is_NID_XUSER_double_conversion_allowed();
extern int NID_XUSER_to_double(const void *pValue, double *nValue);
extern int is_NID_XUSER_long_conversion_allowed();
extern int NID_XUSER_to_long(const void *pValue, long *nValue);
extern void compare_NID_XUSER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_XUSER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_XUSER(void *pValue);
extern int release_NID_XUSER(void *pValue);
extern int copy_NID_XUSER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_XUSER_Utils;

/****************************************************************
 ** nidC_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidC_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nidC_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidC_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidC_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nidC_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nidC_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nidC_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nidC_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nidC_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nidC_T_Packet_Types_Pkg(void *pValue);
extern int release_nidC_T_Packet_Types_Pkg(void *pValue);
extern int copy_nidC_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nidC_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nidCArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidCArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nidCArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidCArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidCArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nidCArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nidCArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nidCArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nidCArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nidCArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nidCArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nidCArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nidCArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nidCArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nothing_to_resume_profile_follow_T_TIU_Types_Pkg 
 ****************************************************************/
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_double_conversion_allowed();
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_long_conversion_allowed();
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(void *pValue);
extern int release_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(void *pValue);
extern int copy_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** nvkrint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrint_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkrint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrint_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkrint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkrint_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkrint_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkrint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkrint_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkrint_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkrint_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkrint_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkrint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkrintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkrintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrintArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkrintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkrintArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkrintArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkrintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkrintArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkrintArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkrintArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkrintArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkrintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvint_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvint_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvint_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvint_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvint_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvint_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvint_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvint_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvintArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvintArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvintArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvintArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvintArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvintArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintset_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintset_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvintset_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintset_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintset_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvintset_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvintset_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvintset_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvintset_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvintset_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvintset_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvintset_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvintset_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvintset_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintsetArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvintsetArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintsetArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintsetArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvintsetArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvintsetArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvintsetArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvintsetArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvintsetArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvintsetArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvintsetArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** obuEventsAndPhases_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_obuEventsAndPhases_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_obuEventsAndPhases_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_obuEventsAndPhases_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_obuEventsAndPhases_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_obuEventsAndPhases_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_obuEventsAndPhases_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_obuEventsAndPhases_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_obuEventsAndPhases_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_obuEventsAndPhases_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_obuEventsAndPhases_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** odometry_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odometry_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_odometry_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odometry_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odometry_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int odometry_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_odometry_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int odometry_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_odometry_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_odometry_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_odometry_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_odometry_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_odometry_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_odometry_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odometryFactors_T_Toolbox 
 ****************************************************************/
extern int odometryFactors_T_Toolbox_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_odometryFactors_T_Toolbox_string(const char *str, char **endptr);
extern int string_to_odometryFactors_T_Toolbox(const char *str, void *pValue, char **endptr);
extern int is_odometryFactors_T_Toolbox_double_conversion_allowed();
extern int odometryFactors_T_Toolbox_to_double(const void *pValue, double *nValue);
extern int is_odometryFactors_T_Toolbox_long_conversion_allowed();
extern int odometryFactors_T_Toolbox_to_long(const void *pValue, long *nValue);
extern void compare_odometryFactors_T_Toolbox(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_odometryFactors_T_Toolbox_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_odometryFactors_T_Toolbox(void *pValue);
extern int release_odometryFactors_T_Toolbox(void *pValue);
extern int copy_odometryFactors_T_Toolbox(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_odometryFactors_T_Toolbox_Utils;

/****************************************************************
 ** OdometryLocations_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_OdometryLocations_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometryLocations_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometryLocations_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_OdometryLocations_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_OdometryLocations_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_OdometryLocations_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_OdometryLocations_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_OdometryLocations_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_OdometryLocations_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_OdometryLocations_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OdometrySpeed_T_Toolbox 
 ****************************************************************/
extern int OdometrySpeed_T_Toolbox_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_OdometrySpeed_T_Toolbox_string(const char *str, char **endptr);
extern int string_to_OdometrySpeed_T_Toolbox(const char *str, void *pValue, char **endptr);
extern int is_OdometrySpeed_T_Toolbox_double_conversion_allowed();
extern int OdometrySpeed_T_Toolbox_to_double(const void *pValue, double *nValue);
extern int is_OdometrySpeed_T_Toolbox_long_conversion_allowed();
extern int OdometrySpeed_T_Toolbox_to_long(const void *pValue, long *nValue);
extern void compare_OdometrySpeed_T_Toolbox(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_OdometrySpeed_T_Toolbox_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_OdometrySpeed_T_Toolbox(void *pValue);
extern int release_OdometrySpeed_T_Toolbox(void *pValue);
extern int copy_OdometrySpeed_T_Toolbox(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_OdometrySpeed_T_Toolbox_Utils;

/****************************************************************
 ** OdometrySpeeds_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_OdometrySpeeds_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometrySpeeds_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometrySpeeds_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_OdometrySpeeds_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_OdometrySpeeds_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_OdometrySpeeds_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_OdometrySpeeds_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_OdometrySpeeds_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_OdometrySpeeds_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_OdometrySpeeds_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionDirection_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_odoMotionDirection_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionDirection_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionDirection_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_odoMotionDirection_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_odoMotionDirection_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_odoMotionDirection_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_odoMotionDirection_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_odoMotionDirection_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_odoMotionDirection_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_odoMotionDirection_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionState_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_odoMotionState_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionState_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionState_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_odoMotionState_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_odoMotionState_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_odoMotionState_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_odoMotionState_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_odoMotionState_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_odoMotionState_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_odoMotionState_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OrBG_TM 
 ****************************************************************/
extern int OrBG_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_OrBG_TM_string(const char *str, char **endptr);
extern int string_to_OrBG_TM(const char *str, void *pValue, char **endptr);
extern int is_OrBG_TM_double_conversion_allowed();
extern int OrBG_TM_to_double(const void *pValue, double *nValue);
extern int is_OrBG_TM_long_conversion_allowed();
extern int OrBG_TM_to_long(const void *pValue, long *nValue);
extern void compare_OrBG_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_OrBG_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_OrBG_TM(void *pValue);
extern int release_OrBG_TM(void *pValue);
extern int copy_OrBG_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_OrBG_TM_Utils;

/****************************************************************
 ** OrLine_TM 
 ****************************************************************/
extern int OrLine_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_OrLine_TM_string(const char *str, char **endptr);
extern int string_to_OrLine_TM(const char *str, void *pValue, char **endptr);
extern int is_OrLine_TM_double_conversion_allowed();
extern int OrLine_TM_to_double(const void *pValue, double *nValue);
extern int is_OrLine_TM_long_conversion_allowed();
extern int OrLine_TM_to_long(const void *pValue, long *nValue);
extern void compare_OrLine_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_OrLine_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_OrLine_TM(void *pValue);
extern int release_OrLine_TM(void *pValue);
extern int copy_OrLine_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_OrLine_TM_Utils;

/****************************************************************
 ** outPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int outPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_outPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_outPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_outPackets_T_Common_Types_Pkg_double_conversion_allowed();
extern int outPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_outPackets_T_Common_Types_Pkg_long_conversion_allowed();
extern int outPackets_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_outPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_outPackets_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_outPackets_T_Common_Types_Pkg(void *pValue);
extern int release_outPackets_T_Common_Types_Pkg(void *pValue);
extern int copy_outPackets_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_outPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** P000_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P000_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TM_TrainToTrack_double_conversion_allowed();
extern int P000_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P000_TM_TrainToTrack_long_conversion_allowed();
extern int P000_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P000_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P000_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P000_TM_TrainToTrack(void *pValue);
extern int release_P000_TM_TrainToTrack(void *pValue);
extern int copy_P000_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P000_TM_TrainToTrack_Utils;

/****************************************************************
 ** P000_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P000_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P000_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P000_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P000_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P000_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P000_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P000_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P000_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P000_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P000_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P001_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TM_TrainToTrack_double_conversion_allowed();
extern int P001_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P001_TM_TrainToTrack_long_conversion_allowed();
extern int P001_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P001_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P001_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P001_TM_TrainToTrack(void *pValue);
extern int release_P001_TM_TrainToTrack(void *pValue);
extern int copy_P001_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P001_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P001_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P001_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P001_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P001_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P001_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P001_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P001_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P001_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P001_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P001_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_int_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_nid_radio_list_int_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_int_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_int_t_TM_TrainToTrack_double_conversion_allowed();
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_nid_radio_list_int_t_TM_TrainToTrack_long_conversion_allowed();
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_nid_radio_list_int_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_nid_radio_list_int_t_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_nid_radio_list_int_t_TM_TrainToTrack(void *pValue);
extern int release_P003_nid_radio_list_int_t_TM_TrainToTrack(void *pValue);
extern int copy_P003_nid_radio_list_int_t_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_nid_radio_list_int_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_nid_radio_list_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_t_TM_TrainToTrack_double_conversion_allowed();
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_nid_radio_list_t_TM_TrainToTrack_long_conversion_allowed();
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_nid_radio_list_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_nid_radio_list_t_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_nid_radio_list_t_TM_TrainToTrack(void *pValue);
extern int release_P003_nid_radio_list_t_TM_TrainToTrack(void *pValue);
extern int copy_P003_nid_radio_list_t_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_nid_radio_list_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_OBU_k_m_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_m_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_m_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_m_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_m_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_m_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_m_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_m_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_m_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_m_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_m_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_m_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_m_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_m_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_m_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_m_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_m_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_m_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_m_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_m_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_l_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_l_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_l_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_l_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_l_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_l_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_l_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_l_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_l_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_l_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_l_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_l_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_l_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_l_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_l_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_l_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_l_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_l_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_l_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_l_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_n_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_n_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_n_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_n_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_n_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_n_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_n_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_n_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_n_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_n_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_n_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_n_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_n_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_n_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_n_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_n_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_n_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_n_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_n_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_n_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_nid_c_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_nid_c_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_nid_c_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_nid_c_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_nid_c_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_nid_c_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_nid_c_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_nid_c_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_nid_c_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_nid_c_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_nid_c_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_nid_c_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_nid_c_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_nid_c_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_nid_c_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_nid_c_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_nid_c_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_nid_c_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_nid_c_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_nid_c_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_nid_c_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_nid_c_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_nid_c_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_nid_c_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_nid_c_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_nid_c_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_nid_c_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_nid_c_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_T_TM 
 ****************************************************************/
extern int P003_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_T_TM_double_conversion_allowed();
extern int P003_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_T_TM_long_conversion_allowed();
extern int P003_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_T_TM(void *pValue);
extern int release_P003_OBU_T_TM(void *pValue);
extern int copy_P003_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_T_TM_Utils;

/****************************************************************
 ** P003_permanent_data_T_TM_baseline2 
 ****************************************************************/
extern int P003_permanent_data_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_permanent_data_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003_permanent_data_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003_permanent_data_T_TM_baseline2_double_conversion_allowed();
extern int P003_permanent_data_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003_permanent_data_T_TM_baseline2_long_conversion_allowed();
extern int P003_permanent_data_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003_permanent_data_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_permanent_data_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_permanent_data_T_TM_baseline2(void *pValue);
extern int release_P003_permanent_data_T_TM_baseline2(void *pValue);
extern int copy_P003_permanent_data_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_permanent_data_T_TM_baseline2_Utils;

/****************************************************************
 ** P003_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TM_TrainToTrack_double_conversion_allowed();
extern int P003_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_TM_TrainToTrack_long_conversion_allowed();
extern int P003_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_TM_TrainToTrack(void *pValue);
extern int release_P003_TM_TrainToTrack(void *pValue);
extern int copy_P003_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P003_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P003_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P003_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P003_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003V1_OBU_sectionlist_int_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_OBU_sectionlist_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_sectionlist_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_sectionlist_int_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_OBU_sectionlist_int_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_OBU_sectionlist_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_OBU_sectionlist_int_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_OBU_sectionlist_int_T_TM_baseline2(void *pValue);
extern int release_P003V1_OBU_sectionlist_int_T_TM_baseline2(void *pValue);
extern int copy_P003V1_OBU_sectionlist_int_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_OBU_sectionlist_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_OBU_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_OBU_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_OBU_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_OBU_T_TM_baseline2(void *pValue);
extern int release_P003V1_OBU_T_TM_baseline2(void *pValue);
extern int copy_P003V1_OBU_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_section_enum_T_TM_baseline2(void *pValue);
extern int release_P003V1_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P003V1_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P003V1_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P003V1_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_trackide_sectionlist_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_trackide_sectionlist_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_trackide_sectionlist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_trackide_sectionlist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_trackide_sectionlist_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_trackide_sectionlist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_trackide_sectionlist_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_trackide_sectionlist_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_trackide_sectionlist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_trackide_sectionlist_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_trackide_sectionlist_T_TM_baseline2(void *pValue);
extern int release_P003V1_trackide_sectionlist_T_TM_baseline2(void *pValue);
extern int copy_P003V1_trackide_sectionlist_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_trackide_sectionlist_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_trackside_int_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_trackside_int_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_trackside_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_trackside_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_trackside_int_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_trackside_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_trackside_int_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_trackside_int_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_trackside_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_trackside_int_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_trackside_int_T_TM_baseline2(void *pValue);
extern int release_P003V1_trackside_int_T_TM_baseline2(void *pValue);
extern int copy_P003V1_trackside_int_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_trackside_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P004_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P004_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TM_TrainToTrack_double_conversion_allowed();
extern int P004_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P004_TM_TrainToTrack_long_conversion_allowed();
extern int P004_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P004_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P004_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P004_TM_TrainToTrack(void *pValue);
extern int release_P004_TM_TrainToTrack(void *pValue);
extern int copy_P004_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P004_TM_TrainToTrack_Utils;

/****************************************************************
 ** P004_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P004_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P004_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P004_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P004_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P004_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P004_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P004_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P004_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P004_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P004_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_array_T_TM_double_conversion_allowed();
extern int P005_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_OBU_sectionlist_array_T_TM_long_conversion_allowed();
extern int P005_OBU_sectionlist_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_OBU_sectionlist_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_OBU_sectionlist_array_T_TM(void *pValue);
extern int release_P005_OBU_sectionlist_array_T_TM(void *pValue);
extern int copy_P005_OBU_sectionlist_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P005_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P005_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P005_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P005_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_int_T_TM_double_conversion_allowed();
extern int P005_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_OBU_sectionlist_int_T_TM_long_conversion_allowed();
extern int P005_OBU_sectionlist_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_OBU_sectionlist_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_OBU_sectionlist_int_T_TM(void *pValue);
extern int release_P005_OBU_sectionlist_int_T_TM(void *pValue);
extern int copy_P005_OBU_sectionlist_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P005_OBU_T_TM 
 ****************************************************************/
extern int P005_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_T_TM_double_conversion_allowed();
extern int P005_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_OBU_T_TM_long_conversion_allowed();
extern int P005_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_OBU_T_TM(void *pValue);
extern int release_P005_OBU_T_TM(void *pValue);
extern int copy_P005_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_OBU_T_TM_Utils;

/****************************************************************
 ** P005_section_array_T_TM 
 ****************************************************************/
extern int P005_section_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_array_T_TM_double_conversion_allowed();
extern int P005_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_section_array_T_TM_long_conversion_allowed();
extern int P005_section_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_section_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_section_array_T_TM(void *pValue);
extern int release_P005_section_array_T_TM(void *pValue);
extern int copy_P005_section_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_section_array_T_TM_Utils;

/****************************************************************
 ** P005_section_enum_T_TM 
 ****************************************************************/
extern int P005_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_enum_T_TM_double_conversion_allowed();
extern int P005_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_section_enum_T_TM_long_conversion_allowed();
extern int P005_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_section_enum_T_TM(void *pValue);
extern int release_P005_section_enum_T_TM(void *pValue);
extern int copy_P005_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_section_enum_T_TM_Utils;

/****************************************************************
 ** P005_section_int_T_TM 
 ****************************************************************/
extern int P005_section_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_int_T_TM_double_conversion_allowed();
extern int P005_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_section_int_T_TM_long_conversion_allowed();
extern int P005_section_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_section_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_section_int_T_TM(void *pValue);
extern int release_P005_section_int_T_TM(void *pValue);
extern int copy_P005_section_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_section_int_T_TM_Utils;

/****************************************************************
 ** P005_sections_array_flat_T_TM 
 ****************************************************************/
extern int P005_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_sections_array_flat_T_TM_double_conversion_allowed();
extern int P005_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_sections_array_flat_T_TM_long_conversion_allowed();
extern int P005_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_sections_array_flat_T_TM(void *pValue);
extern int release_P005_sections_array_flat_T_TM(void *pValue);
extern int copy_P005_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P005_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TM_TrainToTrack_double_conversion_allowed();
extern int P005_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P005_TM_TrainToTrack_long_conversion_allowed();
extern int P005_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P005_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_TM_TrainToTrack(void *pValue);
extern int release_P005_TM_TrainToTrack(void *pValue);
extern int copy_P005_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P005_trackide_sectionlist_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_trackide_sectionlist_T_TM_double_conversion_allowed();
extern int P005_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_trackide_sectionlist_T_TM_long_conversion_allowed();
extern int P005_trackide_sectionlist_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_trackide_sectionlist_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_trackide_sectionlist_T_TM(void *pValue);
extern int release_P005_trackide_sectionlist_T_TM(void *pValue);
extern int copy_P005_trackide_sectionlist_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P005_trackside_int_T_TM 
 ****************************************************************/
extern int P005_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_trackside_int_T_TM_double_conversion_allowed();
extern int P005_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_trackside_int_T_TM_long_conversion_allowed();
extern int P005_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_trackside_int_T_TM(void *pValue);
extern int release_P005_trackside_int_T_TM(void *pValue);
extern int copy_P005_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_trackside_int_T_TM_Utils;

/****************************************************************
 ** P005_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P005_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P005_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P005_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P005_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P005_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P005_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P009_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TM_TrainToTrack_double_conversion_allowed();
extern int P009_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P009_TM_TrainToTrack_long_conversion_allowed();
extern int P009_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P009_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P009_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P009_TM_TrainToTrack(void *pValue);
extern int release_P009_TM_TrainToTrack(void *pValue);
extern int copy_P009_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P009_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P009_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P009_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P009_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P009_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P009_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P009_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P009_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P009_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P009_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P009_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_ntc_list_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_array_T_TM_TrainToTrack_double_conversion_allowed();
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_ntc_list_array_T_TM_TrainToTrack_long_conversion_allowed();
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_ntc_list_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_ntc_list_array_T_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_ntc_list_array_T_TM_TrainToTrack(void *pValue);
extern int release_P011_ntc_list_array_T_TM_TrainToTrack(void *pValue);
extern int copy_P011_ntc_list_array_T_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_ntc_list_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_ntc_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_TM_TrainToTrack_double_conversion_allowed();
extern int P011_ntc_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_ntc_list_TM_TrainToTrack_long_conversion_allowed();
extern int P011_ntc_list_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_ntc_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_ntc_list_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_ntc_list_TM_TrainToTrack(void *pValue);
extern int release_P011_ntc_list_TM_TrainToTrack(void *pValue);
extern int copy_P011_ntc_list_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_ntc_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TM_TrainToTrack_double_conversion_allowed();
extern int P011_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_TM_TrainToTrack_long_conversion_allowed();
extern int P011_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_TM_TrainToTrack(void *pValue);
extern int release_P011_TM_TrainToTrack(void *pValue);
extern int copy_P011_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P011_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P011_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P011_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P011_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_list_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_list_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_list_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_list_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_list_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_list_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_list_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_list_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_section_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_section_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_section_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_section_array_T_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_section_array_T_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_section_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_section_array_T_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_section_array_T_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_section_array_T_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_section_array_T_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_section_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sectionlist_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_sectionlist_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sectionlist_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sectionlist_array_T_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_sectionlist_array_T_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_sectionlist_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_sectionlist_array_T_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_sectionlist_array_T_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_sectionlist_array_T_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_sectionlist_array_T_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_sectionlist_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sections_array_flat_t_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_sections_array_flat_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sections_array_flat_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sections_array_flat_t_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_sections_array_flat_t_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_sections_array_flat_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_sections_array_flat_t_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_sections_array_flat_t_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_sections_array_flat_t_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_sections_array_flat_t_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_sections_array_flat_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_TM_TrainToTrack_Utils;

/****************************************************************
 ** P012_OBU_T_TM 
 ****************************************************************/
extern int P012_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P012_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_OBU_T_TM_double_conversion_allowed();
extern int P012_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P012_OBU_T_TM_long_conversion_allowed();
extern int P012_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P012_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P012_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P012_OBU_T_TM(void *pValue);
extern int release_P012_OBU_T_TM(void *pValue);
extern int copy_P012_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P012_OBU_T_TM_Utils;

/****************************************************************
 ** P012_section_enum_T_TM 
 ****************************************************************/
extern int P012_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P012_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_section_enum_T_TM_double_conversion_allowed();
extern int P012_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P012_section_enum_T_TM_long_conversion_allowed();
extern int P012_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P012_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P012_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P012_section_enum_T_TM(void *pValue);
extern int release_P012_section_enum_T_TM(void *pValue);
extern int copy_P012_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P012_section_enum_T_TM_Utils;

/****************************************************************
 ** P012_sections_array_flat_T_TM 
 ****************************************************************/
extern int P012_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P012_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_sections_array_flat_T_TM_double_conversion_allowed();
extern int P012_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P012_sections_array_flat_T_TM_long_conversion_allowed();
extern int P012_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P012_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P012_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P012_sections_array_flat_T_TM(void *pValue);
extern int release_P012_sections_array_flat_T_TM(void *pValue);
extern int copy_P012_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P012_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_array_T_TM_double_conversion_allowed();
extern int P015_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_OBU_sectionlist_array_T_TM_long_conversion_allowed();
extern int P015_OBU_sectionlist_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_OBU_sectionlist_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_OBU_sectionlist_array_T_TM(void *pValue);
extern int release_P015_OBU_sectionlist_array_T_TM(void *pValue);
extern int copy_P015_OBU_sectionlist_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P015_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P015_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P015_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P015_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_int_T_TM_double_conversion_allowed();
extern int P015_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_OBU_sectionlist_int_T_TM_long_conversion_allowed();
extern int P015_OBU_sectionlist_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_OBU_sectionlist_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_OBU_sectionlist_int_T_TM(void *pValue);
extern int release_P015_OBU_sectionlist_int_T_TM(void *pValue);
extern int copy_P015_OBU_sectionlist_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P015_OBU_T_TM 
 ****************************************************************/
extern int P015_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_T_TM_double_conversion_allowed();
extern int P015_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_OBU_T_TM_long_conversion_allowed();
extern int P015_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_OBU_T_TM(void *pValue);
extern int release_P015_OBU_T_TM(void *pValue);
extern int copy_P015_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_OBU_T_TM_Utils;

/****************************************************************
 ** P015_section_array_T_TM 
 ****************************************************************/
extern int P015_section_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_array_T_TM_double_conversion_allowed();
extern int P015_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_section_array_T_TM_long_conversion_allowed();
extern int P015_section_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_section_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_section_array_T_TM(void *pValue);
extern int release_P015_section_array_T_TM(void *pValue);
extern int copy_P015_section_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_section_array_T_TM_Utils;

/****************************************************************
 ** P015_section_enum_T_TM 
 ****************************************************************/
extern int P015_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_enum_T_TM_double_conversion_allowed();
extern int P015_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_section_enum_T_TM_long_conversion_allowed();
extern int P015_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_section_enum_T_TM(void *pValue);
extern int release_P015_section_enum_T_TM(void *pValue);
extern int copy_P015_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_section_enum_T_TM_Utils;

/****************************************************************
 ** P015_section_int_T_TM 
 ****************************************************************/
extern int P015_section_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_int_T_TM_double_conversion_allowed();
extern int P015_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_section_int_T_TM_long_conversion_allowed();
extern int P015_section_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_section_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_section_int_T_TM(void *pValue);
extern int release_P015_section_int_T_TM(void *pValue);
extern int copy_P015_section_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_section_int_T_TM_Utils;

/****************************************************************
 ** P015_sections_array_flat_T_TM 
 ****************************************************************/
extern int P015_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_sections_array_flat_T_TM_double_conversion_allowed();
extern int P015_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_sections_array_flat_T_TM_long_conversion_allowed();
extern int P015_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_sections_array_flat_T_TM(void *pValue);
extern int release_P015_sections_array_flat_T_TM(void *pValue);
extern int copy_P015_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P015_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P015_trackide_sectionlist_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_trackide_sectionlist_T_TM_double_conversion_allowed();
extern int P015_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_trackide_sectionlist_T_TM_long_conversion_allowed();
extern int P015_trackide_sectionlist_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_trackide_sectionlist_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_trackide_sectionlist_T_TM(void *pValue);
extern int release_P015_trackide_sectionlist_T_TM(void *pValue);
extern int copy_P015_trackide_sectionlist_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P015_trackside_int_T_TM 
 ****************************************************************/
extern int P015_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_trackside_int_T_TM_double_conversion_allowed();
extern int P015_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_trackside_int_T_TM_long_conversion_allowed();
extern int P015_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_trackside_int_T_TM(void *pValue);
extern int release_P015_trackside_int_T_TM(void *pValue);
extern int copy_P015_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_trackside_int_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_array_T_TM_double_conversion_allowed();
extern int P021_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_OBU_sectionlist_array_T_TM_long_conversion_allowed();
extern int P021_OBU_sectionlist_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_OBU_sectionlist_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_OBU_sectionlist_array_T_TM(void *pValue);
extern int release_P021_OBU_sectionlist_array_T_TM(void *pValue);
extern int copy_P021_OBU_sectionlist_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P021_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P021_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P021_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P021_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_int_T_TM_double_conversion_allowed();
extern int P021_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_OBU_sectionlist_int_T_TM_long_conversion_allowed();
extern int P021_OBU_sectionlist_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_OBU_sectionlist_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_OBU_sectionlist_int_T_TM(void *pValue);
extern int release_P021_OBU_sectionlist_int_T_TM(void *pValue);
extern int copy_P021_OBU_sectionlist_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P021_OBU_T_TM 
 ****************************************************************/
extern int P021_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_T_TM_double_conversion_allowed();
extern int P021_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_OBU_T_TM_long_conversion_allowed();
extern int P021_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_OBU_T_TM(void *pValue);
extern int release_P021_OBU_T_TM(void *pValue);
extern int copy_P021_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_OBU_T_TM_Utils;

/****************************************************************
 ** P021_section_array_T_TM 
 ****************************************************************/
extern int P021_section_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_array_T_TM_double_conversion_allowed();
extern int P021_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_section_array_T_TM_long_conversion_allowed();
extern int P021_section_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_section_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_section_array_T_TM(void *pValue);
extern int release_P021_section_array_T_TM(void *pValue);
extern int copy_P021_section_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_section_array_T_TM_Utils;

/****************************************************************
 ** P021_section_enum_T_TM 
 ****************************************************************/
extern int P021_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_enum_T_TM_double_conversion_allowed();
extern int P021_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_section_enum_T_TM_long_conversion_allowed();
extern int P021_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_section_enum_T_TM(void *pValue);
extern int release_P021_section_enum_T_TM(void *pValue);
extern int copy_P021_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_section_enum_T_TM_Utils;

/****************************************************************
 ** P021_section_int_T_TM 
 ****************************************************************/
extern int P021_section_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_int_T_TM_double_conversion_allowed();
extern int P021_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_section_int_T_TM_long_conversion_allowed();
extern int P021_section_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_section_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_section_int_T_TM(void *pValue);
extern int release_P021_section_int_T_TM(void *pValue);
extern int copy_P021_section_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_section_int_T_TM_Utils;

/****************************************************************
 ** P021_sections_array_flat_T_TM 
 ****************************************************************/
extern int P021_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_sections_array_flat_T_TM_double_conversion_allowed();
extern int P021_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_sections_array_flat_T_TM_long_conversion_allowed();
extern int P021_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_sections_array_flat_T_TM(void *pValue);
extern int release_P021_sections_array_flat_T_TM(void *pValue);
extern int copy_P021_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P021_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P021_trackide_sectionlist_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_trackide_sectionlist_T_TM_double_conversion_allowed();
extern int P021_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_trackide_sectionlist_T_TM_long_conversion_allowed();
extern int P021_trackide_sectionlist_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_trackide_sectionlist_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_trackide_sectionlist_T_TM(void *pValue);
extern int release_P021_trackide_sectionlist_T_TM(void *pValue);
extern int copy_P021_trackide_sectionlist_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P021_trackside_int_T_TM 
 ****************************************************************/
extern int P021_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_trackside_int_T_TM_double_conversion_allowed();
extern int P021_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_trackside_int_T_TM_long_conversion_allowed();
extern int P021_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_trackside_int_T_TM(void *pValue);
extern int release_P021_trackside_int_T_TM(void *pValue);
extern int copy_P021_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_trackside_int_T_TM_Utils;

/****************************************************************
 ** P027V1_OBU_body_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_body_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_body_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_body_enum_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_body_enum_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_body_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_body_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_body_enum_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_body_enum_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_body_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_body_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_array_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_int_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_int_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_sectionlist_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_int_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_sectionlist_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_sectionlist_int_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_sectionlist_int_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_sectionlist_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_sectionlist_int_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_sectionlist_int_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_sectionlist_int_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_sectionlist_int_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_array_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_array_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_section_array_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_array_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_array_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_section_array_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_section_array_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_section_array_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_section_array_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_section_array_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_section_array_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_section_array_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_section_array_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_section_array_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_section_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_section_enum_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_section_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_section_enum_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_section_enum_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_section_enum_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_section_enum_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_section_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_section_enum_T_TM_baseline2(void *pValue);
extern int release_P027V1_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P027V1_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_int_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_int_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_section_int_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_int_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_int_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_section_int_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_section_int_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_section_int_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_section_int_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_section_int_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_section_int_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_section_int_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_section_int_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_section_int_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_int_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_section_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_int_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_section_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_section_int_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_section_int_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_section_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_section_int_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_section_int_T_TM_baseline2(void *pValue);
extern int release_P027V1_section_int_T_TM_baseline2(void *pValue);
extern int copy_P027V1_section_int_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_section_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_sections_array_flat_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_sections_array_flat_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_sections_array_flat_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_sections_array_flat_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_sections_array_flat_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_sections_array_flat_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_sections_array_flat_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_sections_array_flat_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_sections_array_flat_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_sections_array_flat_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_sections_array_flat_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_int_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_int_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_trackside_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_int_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_trackside_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_trackside_int_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_trackside_int_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_trackside_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_trackside_int_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_trackside_int_T_TM_baseline2(void *pValue);
extern int release_P027V1_trackside_int_T_TM_baseline2(void *pValue);
extern int copy_P027V1_trackside_int_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_trackside_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_qdifflist_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_qdifflist_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_trackside_qdifflist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_qdifflist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_qdifflist_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_trackside_qdifflist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_trackside_qdifflist_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_trackside_qdifflist_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_trackside_qdifflist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_trackside_qdifflist_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_trackside_qdifflist_T_TM_baseline2(void *pValue);
extern int release_P027V1_trackside_qdifflist_T_TM_baseline2(void *pValue);
extern int copy_P027V1_trackside_qdifflist_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_trackside_qdifflist_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_trackside_sectionlist_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_trackside_sectionlist_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_trackside_sectionlist_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_trackside_sectionlist_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_trackside_sectionlist_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_trackside_sectionlist_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_trackside_sectionlist_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_trackside_sectionlist_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_trackside_sectionlist_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_trackside_sectionlist_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_trackside_sectionlist_T_TM_baseline2(void *pValue);
extern int release_P027V1_trackside_sectionlist_T_TM_baseline2(void *pValue);
extern int copy_P027V1_trackside_sectionlist_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_trackside_sectionlist_T_TM_baseline2_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_array_T_TM_double_conversion_allowed();
extern int P041_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_OBU_sectionlist_array_T_TM_long_conversion_allowed();
extern int P041_OBU_sectionlist_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_OBU_sectionlist_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_OBU_sectionlist_array_T_TM(void *pValue);
extern int release_P041_OBU_sectionlist_array_T_TM(void *pValue);
extern int copy_P041_OBU_sectionlist_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P041_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P041_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P041_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P041_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_int_T_TM_double_conversion_allowed();
extern int P041_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_OBU_sectionlist_int_T_TM_long_conversion_allowed();
extern int P041_OBU_sectionlist_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_OBU_sectionlist_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_OBU_sectionlist_int_T_TM(void *pValue);
extern int release_P041_OBU_sectionlist_int_T_TM(void *pValue);
extern int copy_P041_OBU_sectionlist_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P041_OBU_T_TM 
 ****************************************************************/
extern int P041_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_T_TM_double_conversion_allowed();
extern int P041_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_OBU_T_TM_long_conversion_allowed();
extern int P041_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_OBU_T_TM(void *pValue);
extern int release_P041_OBU_T_TM(void *pValue);
extern int copy_P041_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_OBU_T_TM_Utils;

/****************************************************************
 ** P041_section_array_T_TM 
 ****************************************************************/
extern int P041_section_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_array_T_TM_double_conversion_allowed();
extern int P041_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_section_array_T_TM_long_conversion_allowed();
extern int P041_section_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_section_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_section_array_T_TM(void *pValue);
extern int release_P041_section_array_T_TM(void *pValue);
extern int copy_P041_section_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_section_array_T_TM_Utils;

/****************************************************************
 ** P041_section_enum_T_TM 
 ****************************************************************/
extern int P041_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_enum_T_TM_double_conversion_allowed();
extern int P041_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_section_enum_T_TM_long_conversion_allowed();
extern int P041_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_section_enum_T_TM(void *pValue);
extern int release_P041_section_enum_T_TM(void *pValue);
extern int copy_P041_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_section_enum_T_TM_Utils;

/****************************************************************
 ** P041_section_int_T_TM 
 ****************************************************************/
extern int P041_section_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_int_T_TM_double_conversion_allowed();
extern int P041_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_section_int_T_TM_long_conversion_allowed();
extern int P041_section_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_section_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_section_int_T_TM(void *pValue);
extern int release_P041_section_int_T_TM(void *pValue);
extern int copy_P041_section_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_section_int_T_TM_Utils;

/****************************************************************
 ** P041_sections_array_flat_T_TM 
 ****************************************************************/
extern int P041_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_sections_array_flat_T_TM_double_conversion_allowed();
extern int P041_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_sections_array_flat_T_TM_long_conversion_allowed();
extern int P041_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_sections_array_flat_T_TM(void *pValue);
extern int release_P041_sections_array_flat_T_TM(void *pValue);
extern int copy_P041_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P041_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P041_trackide_sectionlist_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_trackide_sectionlist_T_TM_double_conversion_allowed();
extern int P041_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_trackide_sectionlist_T_TM_long_conversion_allowed();
extern int P041_trackide_sectionlist_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_trackide_sectionlist_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_trackide_sectionlist_T_TM(void *pValue);
extern int release_P041_trackide_sectionlist_T_TM(void *pValue);
extern int copy_P041_trackide_sectionlist_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P041_trackside_int_T_TM 
 ****************************************************************/
extern int P041_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_trackside_int_T_TM_double_conversion_allowed();
extern int P041_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_trackside_int_T_TM_long_conversion_allowed();
extern int P041_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_trackside_int_T_TM(void *pValue);
extern int release_P041_trackside_int_T_TM(void *pValue);
extern int copy_P041_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_trackside_int_T_TM_Utils;

/****************************************************************
 ** P042_trackside_int_T_TM 
 ****************************************************************/
extern int P042_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P042_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P042_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P042_trackside_int_T_TM_double_conversion_allowed();
extern int P042_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P042_trackside_int_T_TM_long_conversion_allowed();
extern int P042_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P042_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P042_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P042_trackside_int_T_TM(void *pValue);
extern int release_P042_trackside_int_T_TM(void *pValue);
extern int copy_P042_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P042_trackside_int_T_TM_Utils;

/****************************************************************
 ** P044_other_data_TM_TrainToTrack 
 ****************************************************************/
extern int P044_other_data_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P044_other_data_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_other_data_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_other_data_TM_TrainToTrack_double_conversion_allowed();
extern int P044_other_data_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P044_other_data_TM_TrainToTrack_long_conversion_allowed();
extern int P044_other_data_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P044_other_data_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P044_other_data_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P044_other_data_TM_TrainToTrack(void *pValue);
extern int release_P044_other_data_TM_TrainToTrack(void *pValue);
extern int copy_P044_other_data_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P044_other_data_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P044_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TM_TrainToTrack_double_conversion_allowed();
extern int P044_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P044_TM_TrainToTrack_long_conversion_allowed();
extern int P044_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P044_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P044_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P044_TM_TrainToTrack(void *pValue);
extern int release_P044_TM_TrainToTrack(void *pValue);
extern int copy_P044_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P044_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P044_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P044_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P044_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P044_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P044_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P044_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P044_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P044_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P044_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P044_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P045_trackside_int_T_TM 
 ****************************************************************/
extern int P045_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P045_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P045_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P045_trackside_int_T_TM_double_conversion_allowed();
extern int P045_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P045_trackside_int_T_TM_long_conversion_allowed();
extern int P045_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P045_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P045_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P045_trackside_int_T_TM(void *pValue);
extern int release_P045_trackside_int_T_TM(void *pValue);
extern int copy_P045_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P045_trackside_int_T_TM_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_array_T_TM_double_conversion_allowed();
extern int P046_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_OBU_sectionlist_array_T_TM_long_conversion_allowed();
extern int P046_OBU_sectionlist_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_OBU_sectionlist_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_OBU_sectionlist_array_T_TM(void *pValue);
extern int release_P046_OBU_sectionlist_array_T_TM(void *pValue);
extern int copy_P046_OBU_sectionlist_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P046_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P046_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P046_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P046_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_int_T_TM_double_conversion_allowed();
extern int P046_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_OBU_sectionlist_int_T_TM_long_conversion_allowed();
extern int P046_OBU_sectionlist_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_OBU_sectionlist_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_OBU_sectionlist_int_T_TM(void *pValue);
extern int release_P046_OBU_sectionlist_int_T_TM(void *pValue);
extern int copy_P046_OBU_sectionlist_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P046_OBU_T_TM 
 ****************************************************************/
extern int P046_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_T_TM_double_conversion_allowed();
extern int P046_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_OBU_T_TM_long_conversion_allowed();
extern int P046_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_OBU_T_TM(void *pValue);
extern int release_P046_OBU_T_TM(void *pValue);
extern int copy_P046_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_OBU_T_TM_Utils;

/****************************************************************
 ** P046_section_array_T_TM 
 ****************************************************************/
extern int P046_section_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_array_T_TM_double_conversion_allowed();
extern int P046_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_section_array_T_TM_long_conversion_allowed();
extern int P046_section_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_section_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_section_array_T_TM(void *pValue);
extern int release_P046_section_array_T_TM(void *pValue);
extern int copy_P046_section_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_section_array_T_TM_Utils;

/****************************************************************
 ** P046_section_enum_T_TM 
 ****************************************************************/
extern int P046_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_enum_T_TM_double_conversion_allowed();
extern int P046_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_section_enum_T_TM_long_conversion_allowed();
extern int P046_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_section_enum_T_TM(void *pValue);
extern int release_P046_section_enum_T_TM(void *pValue);
extern int copy_P046_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_section_enum_T_TM_Utils;

/****************************************************************
 ** P046_section_int_T_TM 
 ****************************************************************/
extern int P046_section_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_int_T_TM_double_conversion_allowed();
extern int P046_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_section_int_T_TM_long_conversion_allowed();
extern int P046_section_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_section_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_section_int_T_TM(void *pValue);
extern int release_P046_section_int_T_TM(void *pValue);
extern int copy_P046_section_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_section_int_T_TM_Utils;

/****************************************************************
 ** P046_sections_array_flat_T_TM 
 ****************************************************************/
extern int P046_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_sections_array_flat_T_TM_double_conversion_allowed();
extern int P046_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_sections_array_flat_T_TM_long_conversion_allowed();
extern int P046_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_sections_array_flat_T_TM(void *pValue);
extern int release_P046_sections_array_flat_T_TM(void *pValue);
extern int copy_P046_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P046_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P046_trackide_sectionlist_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_trackide_sectionlist_T_TM_double_conversion_allowed();
extern int P046_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_trackide_sectionlist_T_TM_long_conversion_allowed();
extern int P046_trackide_sectionlist_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_trackide_sectionlist_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_trackide_sectionlist_T_TM(void *pValue);
extern int release_P046_trackide_sectionlist_T_TM(void *pValue);
extern int copy_P046_trackide_sectionlist_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P046_trackside_int_T_TM 
 ****************************************************************/
extern int P046_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_trackside_int_T_TM_double_conversion_allowed();
extern int P046_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_trackside_int_T_TM_long_conversion_allowed();
extern int P046_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_trackside_int_T_TM(void *pValue);
extern int release_P046_trackside_int_T_TM(void *pValue);
extern int copy_P046_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_trackside_int_T_TM_Utils;

/****************************************************************
 ** P057_trackside_int_T_TM 
 ****************************************************************/
extern int P057_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P057_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P057_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P057_trackside_int_T_TM_double_conversion_allowed();
extern int P057_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P057_trackside_int_T_TM_long_conversion_allowed();
extern int P057_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P057_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P057_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P057_trackside_int_T_TM(void *pValue);
extern int release_P057_trackside_int_T_TM(void *pValue);
extern int copy_P057_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P057_trackside_int_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_array_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_OBU_sectionlist_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_array_T_TM_double_conversion_allowed();
extern int P058_OBU_sectionlist_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_OBU_sectionlist_array_T_TM_long_conversion_allowed();
extern int P058_OBU_sectionlist_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_OBU_sectionlist_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_OBU_sectionlist_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_OBU_sectionlist_array_T_TM(void *pValue);
extern int release_P058_OBU_sectionlist_array_T_TM(void *pValue);
extern int copy_P058_OBU_sectionlist_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_array_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P058_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P058_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P058_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P058_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_int_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_OBU_sectionlist_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_int_T_TM_double_conversion_allowed();
extern int P058_OBU_sectionlist_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_OBU_sectionlist_int_T_TM_long_conversion_allowed();
extern int P058_OBU_sectionlist_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_OBU_sectionlist_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_OBU_sectionlist_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_OBU_sectionlist_int_T_TM(void *pValue);
extern int release_P058_OBU_sectionlist_int_T_TM(void *pValue);
extern int copy_P058_OBU_sectionlist_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_int_T_TM_Utils;

/****************************************************************
 ** P058_OBU_T_TM 
 ****************************************************************/
extern int P058_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_T_TM_double_conversion_allowed();
extern int P058_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_OBU_T_TM_long_conversion_allowed();
extern int P058_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_OBU_T_TM(void *pValue);
extern int release_P058_OBU_T_TM(void *pValue);
extern int copy_P058_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_OBU_T_TM_Utils;

/****************************************************************
 ** P058_section_array_T_TM 
 ****************************************************************/
extern int P058_section_array_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_section_array_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_array_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_array_T_TM_double_conversion_allowed();
extern int P058_section_array_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_section_array_T_TM_long_conversion_allowed();
extern int P058_section_array_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_section_array_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_section_array_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_section_array_T_TM(void *pValue);
extern int release_P058_section_array_T_TM(void *pValue);
extern int copy_P058_section_array_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_section_array_T_TM_Utils;

/****************************************************************
 ** P058_section_enum_T_TM 
 ****************************************************************/
extern int P058_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_enum_T_TM_double_conversion_allowed();
extern int P058_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_section_enum_T_TM_long_conversion_allowed();
extern int P058_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_section_enum_T_TM(void *pValue);
extern int release_P058_section_enum_T_TM(void *pValue);
extern int copy_P058_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_section_enum_T_TM_Utils;

/****************************************************************
 ** P058_section_int_T_TM 
 ****************************************************************/
extern int P058_section_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_section_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_int_T_TM_double_conversion_allowed();
extern int P058_section_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_section_int_T_TM_long_conversion_allowed();
extern int P058_section_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_section_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_section_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_section_int_T_TM(void *pValue);
extern int release_P058_section_int_T_TM(void *pValue);
extern int copy_P058_section_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_section_int_T_TM_Utils;

/****************************************************************
 ** P058_sections_array_flat_T_TM 
 ****************************************************************/
extern int P058_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_sections_array_flat_T_TM_double_conversion_allowed();
extern int P058_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_sections_array_flat_T_TM_long_conversion_allowed();
extern int P058_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_sections_array_flat_T_TM(void *pValue);
extern int release_P058_sections_array_flat_T_TM(void *pValue);
extern int copy_P058_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P058_trackide_sectionlist_T_TM 
 ****************************************************************/
extern int P058_trackide_sectionlist_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_trackide_sectionlist_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_trackide_sectionlist_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_trackide_sectionlist_T_TM_double_conversion_allowed();
extern int P058_trackide_sectionlist_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_trackide_sectionlist_T_TM_long_conversion_allowed();
extern int P058_trackide_sectionlist_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_trackide_sectionlist_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_trackide_sectionlist_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_trackide_sectionlist_T_TM(void *pValue);
extern int release_P058_trackide_sectionlist_T_TM(void *pValue);
extern int copy_P058_trackide_sectionlist_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_trackide_sectionlist_T_TM_Utils;

/****************************************************************
 ** P058_trackside_int_T_TM 
 ****************************************************************/
extern int P058_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_trackside_int_T_TM_double_conversion_allowed();
extern int P058_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_trackside_int_T_TM_long_conversion_allowed();
extern int P058_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_trackside_int_T_TM(void *pValue);
extern int release_P058_trackside_int_T_TM(void *pValue);
extern int copy_P058_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_trackside_int_T_TM_Utils;

/****************************************************************
 ** P065_OBU_T_TM 
 ****************************************************************/
extern int P065_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P065_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P065_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P065_OBU_T_TM_double_conversion_allowed();
extern int P065_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P065_OBU_T_TM_long_conversion_allowed();
extern int P065_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P065_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P065_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P065_OBU_T_TM(void *pValue);
extern int release_P065_OBU_T_TM(void *pValue);
extern int copy_P065_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P065_OBU_T_TM_Utils;

/****************************************************************
 ** P065_trackside_int_T_TM 
 ****************************************************************/
extern int P065_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P065_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P065_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P065_trackside_int_T_TM_double_conversion_allowed();
extern int P065_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P065_trackside_int_T_TM_long_conversion_allowed();
extern int P065_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P065_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P065_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P065_trackside_int_T_TM(void *pValue);
extern int release_P065_trackside_int_T_TM(void *pValue);
extern int copy_P065_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P065_trackside_int_T_TM_Utils;

/****************************************************************
 ** P080_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P080_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P080_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P080_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P080_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P080_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P080_OBU_T_TM 
 ****************************************************************/
extern int P080_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_OBU_T_TM_double_conversion_allowed();
extern int P080_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_OBU_T_TM_long_conversion_allowed();
extern int P080_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_OBU_T_TM(void *pValue);
extern int release_P080_OBU_T_TM(void *pValue);
extern int copy_P080_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_OBU_T_TM_Utils;

/****************************************************************
 ** P080_section_enum_T_TM 
 ****************************************************************/
extern int P080_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_section_enum_T_TM_double_conversion_allowed();
extern int P080_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_section_enum_T_TM_long_conversion_allowed();
extern int P080_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_section_enum_T_TM(void *pValue);
extern int release_P080_section_enum_T_TM(void *pValue);
extern int copy_P080_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_section_enum_T_TM_Utils;

/****************************************************************
 ** P080_sections_array_flat_T_TM 
 ****************************************************************/
extern int P080_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_sections_array_flat_T_TM_double_conversion_allowed();
extern int P080_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_sections_array_flat_T_TM_long_conversion_allowed();
extern int P080_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_sections_array_flat_T_TM(void *pValue);
extern int release_P080_sections_array_flat_T_TM(void *pValue);
extern int copy_P080_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P12_Level1MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int release_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int copy_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P12_Level1MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P12_Level1MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P12_Level1MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P12_Level1MovementAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P12_Level1MovementAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P12_Level1MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P12_Level1MovementAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P12_Level1MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P12_Level1MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P12_Level1MovementAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P12_Level1MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P131_OBU_T_TM 
 ****************************************************************/
extern int P131_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P131_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P131_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P131_OBU_T_TM_double_conversion_allowed();
extern int P131_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P131_OBU_T_TM_long_conversion_allowed();
extern int P131_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P131_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P131_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P131_OBU_T_TM(void *pValue);
extern int release_P131_OBU_T_TM(void *pValue);
extern int copy_P131_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P131_OBU_T_TM_Utils;

/****************************************************************
 ** p131_q_rbcTransitionOrder_T_Handover_Pkg 
 ****************************************************************/
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_p131_q_rbcTransitionOrder_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_p131_q_rbcTransitionOrder_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p131_q_rbcTransitionOrder_T_Handover_Pkg_double_conversion_allowed();
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int is_p131_q_rbcTransitionOrder_T_Handover_Pkg_long_conversion_allowed();
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_p131_q_rbcTransitionOrder_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_p131_q_rbcTransitionOrder_T_Handover_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_p131_q_rbcTransitionOrder_T_Handover_Pkg(void *pValue);
extern int release_p131_q_rbcTransitionOrder_T_Handover_Pkg(void *pValue);
extern int copy_p131_q_rbcTransitionOrder_T_Handover_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_p131_q_rbcTransitionOrder_T_Handover_Pkg_Utils;

/****************************************************************
 ** P131_RBCTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P131_RBCTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P131_RBCTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P131_RBCTransitionOrder_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P131_RBCTransitionOrder_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P131_RBCTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P131_RBCTransitionOrder_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P131_RBCTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int release_P131_RBCTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int copy_P131_RBCTransitionOrder_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P131_RBCTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P135_OBU_T_TM 
 ****************************************************************/
extern int P135_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P135_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P135_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P135_OBU_T_TM_double_conversion_allowed();
extern int P135_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P135_OBU_T_TM_long_conversion_allowed();
extern int P135_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P135_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P135_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P135_OBU_T_TM(void *pValue);
extern int release_P135_OBU_T_TM(void *pValue);
extern int copy_P135_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P135_OBU_T_TM_Utils;

/****************************************************************
 ** P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(void *pValue);
extern int release_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(void *pValue);
extern int copy_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P137_StopIfInStaffResponsible_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(void *pValue);
extern int release_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(void *pValue);
extern int copy_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P137_trackside_int_T_TM 
 ****************************************************************/
extern int P137_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P137_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P137_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P137_trackside_int_T_TM_double_conversion_allowed();
extern int P137_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P137_trackside_int_T_TM_long_conversion_allowed();
extern int P137_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P137_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P137_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P137_trackside_int_T_TM(void *pValue);
extern int release_P137_trackside_int_T_TM(void *pValue);
extern int copy_P137_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P137_trackside_int_T_TM_Utils;

/****************************************************************
 ** P138_OBU_T_TM 
 ****************************************************************/
extern int P138_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P138_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P138_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P138_OBU_T_TM_double_conversion_allowed();
extern int P138_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P138_OBU_T_TM_long_conversion_allowed();
extern int P138_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P138_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P138_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P138_OBU_T_TM(void *pValue);
extern int release_P138_OBU_T_TM(void *pValue);
extern int copy_P138_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P138_OBU_T_TM_Utils;

/****************************************************************
 ** P138_ReversingAreaInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P138_ReversingAreaInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P138_ReversingAreaInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P138_ReversingAreaInformation_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P138_ReversingAreaInformation_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P138_ReversingAreaInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P138_ReversingAreaInformation_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P138_ReversingAreaInformation_T_Packet_Types_Pkg(void *pValue);
extern int release_P138_ReversingAreaInformation_T_Packet_Types_Pkg(void *pValue);
extern int copy_P138_ReversingAreaInformation_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P138_ReversingAreaInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P139_OBU_T_TM 
 ****************************************************************/
extern int P139_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P139_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P139_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P139_OBU_T_TM_double_conversion_allowed();
extern int P139_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P139_OBU_T_TM_long_conversion_allowed();
extern int P139_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P139_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P139_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P139_OBU_T_TM(void *pValue);
extern int release_P139_OBU_T_TM(void *pValue);
extern int copy_P139_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P139_OBU_T_TM_Utils;

/****************************************************************
 ** P139_ReversingSupervisionInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(void *pValue);
extern int release_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(void *pValue);
extern int copy_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P15_Level23MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int release_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int copy_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P15_Level23MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P15_Level23MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P15_Level23MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P15_Level23MovementAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P15_Level23MovementAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P15_Level23MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P15_Level23MovementAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P15_Level23MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P15_Level23MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P15_Level23MovementAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P15_Level23MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P203V1_OBU_k_m_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_k_m_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_m_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_m_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_k_m_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_k_m_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_k_m_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_k_m_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_k_m_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_k_m_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_k_m_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_k_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_k_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_k_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_k_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_k_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_k_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_k_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_k_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_l_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_l_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_l_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_l_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_l_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_l_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_l_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_l_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_n_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_n_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_n_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_n_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_n_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_n_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_n_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_n_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P21_GradientProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P21_GradientProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfile_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P21_GradientProfile_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P21_GradientProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P21_GradientProfile_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P21_GradientProfile_T_Packet_Types_Pkg(void *pValue);
extern int release_P21_GradientProfile_T_Packet_Types_Pkg(void *pValue);
extern int copy_P21_GradientProfile_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P21_GradientProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P21_GradientProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P21_GradientProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfiles_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P21_GradientProfiles_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P21_GradientProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P21_GradientProfiles_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P21_GradientProfiles_T_Packet_Types_Pkg(void *pValue);
extern int release_P21_GradientProfiles_T_Packet_Types_Pkg(void *pValue);
extern int copy_P21_GradientProfiles_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P21_GradientProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P255_trackside_int_T_TM 
 ****************************************************************/
extern int P255_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P255_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P255_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P255_trackside_int_T_TM_double_conversion_allowed();
extern int P255_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P255_trackside_int_T_TM_long_conversion_allowed();
extern int P255_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P255_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P255_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P255_trackside_int_T_TM(void *pValue);
extern int release_P255_trackside_int_T_TM(void *pValue);
extern int copy_P255_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P255_trackside_int_T_TM_Utils;

/****************************************************************
 ** P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(void *pValue);
extern int release_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(void *pValue);
extern int copy_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P3_NationalValues_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P3_NationalValues_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P3_NationalValues_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P3_NationalValues_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P3_NationalValues_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P3_NationalValues_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P3_NationalValues_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P3_NationalValues_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P3_NationalValues_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P3_NationalValues_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P3_NationalValues_T_Packet_Types_Pkg(void *pValue);
extern int release_P3_NationalValues_T_Packet_Types_Pkg(void *pValue);
extern int copy_P3_NationalValues_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P3_NationalValues_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransistionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P41_LevelTransistionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransistionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransistionOrders_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P41_LevelTransistionOrders_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P41_LevelTransistionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P41_LevelTransistionOrders_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P41_LevelTransistionOrders_T_Packet_Types_Pkg(void *pValue);
extern int release_P41_LevelTransistionOrders_T_Packet_Types_Pkg(void *pValue);
extern int copy_P41_LevelTransistionOrders_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P41_LevelTransistionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P41_LevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransitionOrder_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P41_LevelTransitionOrder_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P41_LevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P41_LevelTransitionOrder_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P41_LevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int release_P41_LevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int copy_P41_LevelTransitionOrder_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P41_LevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P42_SessionManagement_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P42_SessionManagement_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P42_SessionManagement_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P42_SessionManagement_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P42_SessionManagement_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P42_SessionManagement_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P42_SessionManagement_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P42_SessionManagement_T_Packet_Types_Pkg(void *pValue);
extern int release_P42_SessionManagement_T_Packet_Types_Pkg(void *pValue);
extern int copy_P42_SessionManagement_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P42_SessionManagement_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** p42_sessionManagement_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_p42_sessionManagement_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p42_sessionManagement_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p42_sessionManagement_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_p42_sessionManagement_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_p42_sessionManagement_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_p42_sessionManagement_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_p42_sessionManagement_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_p42_sessionManagement_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_p42_sessionManagement_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_p42_sessionManagement_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** P45_RadioNetworkRegistration_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(void *pValue);
extern int release_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(void *pValue);
extern int copy_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int release_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int copy_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(void *pValue);
extern int release_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(void *pValue);
extern int copy_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(void *pValue);
extern int release_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(void *pValue);
extern int copy_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P58_PositionReportParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P58_PositionReportParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P58_PositionReportParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P58_PositionReportParameters_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P58_PositionReportParameters_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P58_PositionReportParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P58_PositionReportParameters_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P58_PositionReportParameters_T_Packet_Types_Pkg(void *pValue);
extern int release_P58_PositionReportParameters_T_Packet_Types_Pkg(void *pValue);
extern int copy_P58_PositionReportParameters_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P58_PositionReportParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_BaliseInSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P80_ModeProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfile_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P80_ModeProfile_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P80_ModeProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P80_ModeProfile_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P80_ModeProfile_T_Packet_Types_Pkg(void *pValue);
extern int release_P80_ModeProfile_T_Packet_Types_Pkg(void *pValue);
extern int copy_P80_ModeProfile_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P80_ModeProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P80_ModeProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfiles_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P80_ModeProfiles_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P80_ModeProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P80_ModeProfiles_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P80_ModeProfiles_T_Packet_Types_Pkg(void *pValue);
extern int release_P80_ModeProfiles_T_Packet_Types_Pkg(void *pValue);
extern int copy_P80_ModeProfiles_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P80_ModeProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** ParabolaArc_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaArc_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaArc_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaArc_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaArc_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaArc_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaArc_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaArc_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaArc_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaArc_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaArc_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaArc_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaArc_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaArc_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurve_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurve_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurve_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurve_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurve_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurve_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurve_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurve_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveAccelerations_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveDistances_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveDistances_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveDistances_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveDistances_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveDistances_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveDistances_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveDistances_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveDistances_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveDistances_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveDistances_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveDistances_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveSpeeds_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveValid_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveValid_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveValid_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveValid_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveValid_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveValid_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveValid_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveValid_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveValid_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveValid_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveValid_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** passedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int passedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_passedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_passedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_passedBG_T_BG_Types_Pkg_double_conversion_allowed();
extern int passedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_passedBG_T_BG_Types_Pkg_long_conversion_allowed();
extern int passedBG_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_passedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_passedBG_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_passedBG_T_BG_Types_Pkg(void *pValue);
extern int release_passedBG_T_BG_Types_Pkg(void *pValue);
extern int copy_passedBG_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_passedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** Passenger_door_control_info_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Passenger_door_control_info_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Passenger_door_control_info_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Passenger_door_control_info_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Passenger_door_control_info_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Passenger_door_control_info_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Passenger_door_control_info_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Passenger_door_control_info_T_TIU_Types_Pkg(void *pValue);
extern int release_Passenger_door_control_info_T_TIU_Types_Pkg(void *pValue);
extern int copy_Passenger_door_control_info_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Passenger_door_control_info_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Percentage_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Percentage_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Percentage_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Percentage_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Percentage_T_SDM_Types_Pkg_double_conversion_allowed();
extern int Percentage_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Percentage_T_SDM_Types_Pkg_long_conversion_allowed();
extern int Percentage_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Percentage_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Percentage_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Percentage_T_SDM_Types_Pkg(void *pValue);
extern int release_Percentage_T_SDM_Types_Pkg(void *pValue);
extern int copy_Percentage_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Percentage_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** PosData_T 
 ****************************************************************/
extern int PosData_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PosData_T_string(const char *str, char **endptr);
extern int string_to_PosData_T(const char *str, void *pValue, char **endptr);
extern int is_PosData_T_double_conversion_allowed();
extern int PosData_T_to_double(const void *pValue, double *nValue);
extern int is_PosData_T_long_conversion_allowed();
extern int PosData_T_to_long(const void *pValue, long *nValue);
extern void compare_PosData_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PosData_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PosData_T(void *pValue);
extern int release_PosData_T(void *pValue);
extern int copy_PosData_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PosData_T_Utils;

/****************************************************************
 ** Position_Report_based_on_two_balise_groups_TrainToTrack 
 ****************************************************************/
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Position_Report_based_on_two_balise_groups_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_based_on_two_balise_groups_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_based_on_two_balise_groups_TrainToTrack_double_conversion_allowed();
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_Position_Report_based_on_two_balise_groups_TrainToTrack_long_conversion_allowed();
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_Position_Report_based_on_two_balise_groups_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Position_Report_based_on_two_balise_groups_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Position_Report_based_on_two_balise_groups_TrainToTrack(void *pValue);
extern int release_Position_Report_based_on_two_balise_groups_TrainToTrack(void *pValue);
extern int copy_Position_Report_based_on_two_balise_groups_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Position_Report_based_on_two_balise_groups_TrainToTrack_Utils;

/****************************************************************
 ** Position_Report_TrainToTrack 
 ****************************************************************/
extern int Position_Report_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Position_Report_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_TrainToTrack_double_conversion_allowed();
extern int Position_Report_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_Position_Report_TrainToTrack_long_conversion_allowed();
extern int Position_Report_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_Position_Report_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Position_Report_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Position_Report_TrainToTrack(void *pValue);
extern int release_Position_Report_TrainToTrack(void *pValue);
extern int copy_Position_Report_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Position_Report_TrainToTrack_Utils;

/****************************************************************
 ** positionedBG_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBG_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionedBG_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBG_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBG_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int positionedBG_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_positionedBG_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int positionedBG_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_positionedBG_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionedBG_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionedBG_T_TrainPosition_Types_Pck(void *pValue);
extern int release_positionedBG_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_positionedBG_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionedBG_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int positionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_positionedBGs_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int positionedBGs_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_positionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionedBGs_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int release_positionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_positionedBGs_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg 
 ****************************************************************/
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_string(const char *str, char **endptr);
extern int string_to_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_double_conversion_allowed();
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_double(const void *pValue, double *nValue);
extern int is_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_long_conversion_allowed();
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(void *pValue);
extern int release_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(void *pValue);
extern int copy_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_Utils;

/****************************************************************
 ** positionErrors_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionErrors_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionErrors_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionErrors_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionErrors_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int positionErrors_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_positionErrors_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int positionErrors_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_positionErrors_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionErrors_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionErrors_T_TrainPosition_Types_Pck(void *pValue);
extern int release_positionErrors_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_positionErrors_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionErrors_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** PosRepParams_T 
 ****************************************************************/
extern int PosRepParams_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PosRepParams_T_string(const char *str, char **endptr);
extern int string_to_PosRepParams_T(const char *str, void *pValue, char **endptr);
extern int is_PosRepParams_T_double_conversion_allowed();
extern int PosRepParams_T_to_double(const void *pValue, double *nValue);
extern int is_PosRepParams_T_long_conversion_allowed();
extern int PosRepParams_T_to_long(const void *pValue, long *nValue);
extern void compare_PosRepParams_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PosRepParams_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PosRepParams_T(void *pValue);
extern int release_PosRepParams_T(void *pValue);
extern int copy_PosRepParams_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PosRepParams_T_Utils;

/****************************************************************
 ** probesBalises_T_xdebugSupport_Pkg 
 ****************************************************************/
extern int probesBalises_T_xdebugSupport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_probesBalises_T_xdebugSupport_Pkg_string(const char *str, char **endptr);
extern int string_to_probesBalises_T_xdebugSupport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_probesBalises_T_xdebugSupport_Pkg_double_conversion_allowed();
extern int probesBalises_T_xdebugSupport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_probesBalises_T_xdebugSupport_Pkg_long_conversion_allowed();
extern int probesBalises_T_xdebugSupport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_probesBalises_T_xdebugSupport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_probesBalises_T_xdebugSupport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_probesBalises_T_xdebugSupport_Pkg(void *pValue);
extern int release_probesBalises_T_xdebugSupport_Pkg(void *pValue);
extern int copy_probesBalises_T_xdebugSupport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_probesBalises_T_xdebugSupport_Pkg_Utils;

/****************************************************************
 ** ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg 
 ****************************************************************/
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_string(const char *str, char **endptr);
extern int string_to_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_double_conversion_allowed();
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_long_conversion_allowed();
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(void *pValue);
extern int release_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(void *pValue);
extern int copy_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_Utils;

/****************************************************************
 ** PT0_PositionReport_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT0_PositionReport_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT0_PositionReport_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT0_PositionReport_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT0_PositionReport_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT0_PositionReport_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT0_PositionReport_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT0_PositionReport_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT0_PositionReport_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT0_PositionReport_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT0_PositionReport_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT4_ErrorReporting_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT5_TrainRunningNumber_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** Q_DANGERPOINT 
 ****************************************************************/
extern int Q_DANGERPOINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DANGERPOINT_string(const char *str, char **endptr);
extern int string_to_Q_DANGERPOINT(const char *str, void *pValue, char **endptr);
extern int is_Q_DANGERPOINT_double_conversion_allowed();
extern int Q_DANGERPOINT_to_double(const void *pValue, double *nValue);
extern int is_Q_DANGERPOINT_long_conversion_allowed();
extern int Q_DANGERPOINT_to_long(const void *pValue, long *nValue);
extern void compare_Q_DANGERPOINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DANGERPOINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DANGERPOINT(void *pValue);
extern int release_Q_DANGERPOINT(void *pValue);
extern int copy_Q_DANGERPOINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DANGERPOINT_Utils;

/****************************************************************
 ** Q_DIFF 
 ****************************************************************/
extern int Q_DIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIFF_string(const char *str, char **endptr);
extern int string_to_Q_DIFF(const char *str, void *pValue, char **endptr);
extern int is_Q_DIFF_double_conversion_allowed();
extern int Q_DIFF_to_double(const void *pValue, double *nValue);
extern int is_Q_DIFF_long_conversion_allowed();
extern int Q_DIFF_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIFF(void *pValue);
extern int release_Q_DIFF(void *pValue);
extern int copy_Q_DIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIFF_Utils;

/****************************************************************
 ** Q_DIR 
 ****************************************************************/
extern int Q_DIR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIR_string(const char *str, char **endptr);
extern int string_to_Q_DIR(const char *str, void *pValue, char **endptr);
extern int is_Q_DIR_double_conversion_allowed();
extern int Q_DIR_to_double(const void *pValue, double *nValue);
extern int is_Q_DIR_long_conversion_allowed();
extern int Q_DIR_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIR(void *pValue);
extern int release_Q_DIR(void *pValue);
extern int copy_Q_DIR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIR_Utils;

/****************************************************************
 ** Q_DIRLRBG 
 ****************************************************************/
extern int Q_DIRLRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIRLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DIRLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRLRBG_double_conversion_allowed();
extern int Q_DIRLRBG_to_double(const void *pValue, double *nValue);
extern int is_Q_DIRLRBG_long_conversion_allowed();
extern int Q_DIRLRBG_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIRLRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIRLRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIRLRBG(void *pValue);
extern int release_Q_DIRLRBG(void *pValue);
extern int copy_Q_DIRLRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIRLRBG_Utils;

/****************************************************************
 ** Q_DIRTRAIN 
 ****************************************************************/
extern int Q_DIRTRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIRTRAIN_string(const char *str, char **endptr);
extern int string_to_Q_DIRTRAIN(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRTRAIN_double_conversion_allowed();
extern int Q_DIRTRAIN_to_double(const void *pValue, double *nValue);
extern int is_Q_DIRTRAIN_long_conversion_allowed();
extern int Q_DIRTRAIN_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIRTRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIRTRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIRTRAIN(void *pValue);
extern int release_Q_DIRTRAIN(void *pValue);
extern int copy_Q_DIRTRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIRTRAIN_Utils;

/****************************************************************
 ** Q_DLRBG 
 ****************************************************************/
extern int Q_DLRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DLRBG_double_conversion_allowed();
extern int Q_DLRBG_to_double(const void *pValue, double *nValue);
extern int is_Q_DLRBG_long_conversion_allowed();
extern int Q_DLRBG_to_long(const void *pValue, long *nValue);
extern void compare_Q_DLRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DLRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DLRBG(void *pValue);
extern int release_Q_DLRBG(void *pValue);
extern int copy_Q_DLRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DLRBG_Utils;

/****************************************************************
 ** Q_EMERGENCYSTOP 
 ****************************************************************/
extern int Q_EMERGENCYSTOP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_Q_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_EMERGENCYSTOP_double_conversion_allowed();
extern int Q_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int is_Q_EMERGENCYSTOP_long_conversion_allowed();
extern int Q_EMERGENCYSTOP_to_long(const void *pValue, long *nValue);
extern void compare_Q_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_EMERGENCYSTOP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_EMERGENCYSTOP(void *pValue);
extern int release_Q_EMERGENCYSTOP(void *pValue);
extern int copy_Q_EMERGENCYSTOP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_EMERGENCYSTOP_Utils;

/****************************************************************
 ** Q_ENDTIMER 
 ****************************************************************/
extern int Q_ENDTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_Q_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_ENDTIMER_double_conversion_allowed();
extern int Q_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int is_Q_ENDTIMER_long_conversion_allowed();
extern int Q_ENDTIMER_to_long(const void *pValue, long *nValue);
extern void compare_Q_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_ENDTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_ENDTIMER(void *pValue);
extern int release_Q_ENDTIMER(void *pValue);
extern int copy_Q_ENDTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_ENDTIMER_Utils;

/****************************************************************
 ** Q_FRONT 
 ****************************************************************/
extern int Q_FRONT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_FRONT_string(const char *str, char **endptr);
extern int string_to_Q_FRONT(const char *str, void *pValue, char **endptr);
extern int is_Q_FRONT_double_conversion_allowed();
extern int Q_FRONT_to_double(const void *pValue, double *nValue);
extern int is_Q_FRONT_long_conversion_allowed();
extern int Q_FRONT_to_long(const void *pValue, long *nValue);
extern void compare_Q_FRONT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_FRONT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_FRONT(void *pValue);
extern int release_Q_FRONT(void *pValue);
extern int copy_Q_FRONT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_FRONT_Utils;

/****************************************************************
 ** Q_GDIR 
 ****************************************************************/
extern int Q_GDIR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_GDIR_string(const char *str, char **endptr);
extern int string_to_Q_GDIR(const char *str, void *pValue, char **endptr);
extern int is_Q_GDIR_double_conversion_allowed();
extern int Q_GDIR_to_double(const void *pValue, double *nValue);
extern int is_Q_GDIR_long_conversion_allowed();
extern int Q_GDIR_to_long(const void *pValue, long *nValue);
extern void compare_Q_GDIR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_GDIR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_GDIR(void *pValue);
extern int release_Q_GDIR(void *pValue);
extern int copy_Q_GDIR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_GDIR_Utils;

/****************************************************************
 ** Q_LENGTH 
 ****************************************************************/
extern int Q_LENGTH_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LENGTH_string(const char *str, char **endptr);
extern int string_to_Q_LENGTH(const char *str, void *pValue, char **endptr);
extern int is_Q_LENGTH_double_conversion_allowed();
extern int Q_LENGTH_to_double(const void *pValue, double *nValue);
extern int is_Q_LENGTH_long_conversion_allowed();
extern int Q_LENGTH_to_long(const void *pValue, long *nValue);
extern void compare_Q_LENGTH(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LENGTH_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LENGTH(void *pValue);
extern int release_Q_LENGTH(void *pValue);
extern int copy_Q_LENGTH(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LENGTH_Utils;

/****************************************************************
 ** Q_LGTLOC 
 ****************************************************************/
extern int Q_LGTLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LGTLOC_string(const char *str, char **endptr);
extern int string_to_Q_LGTLOC(const char *str, void *pValue, char **endptr);
extern int is_Q_LGTLOC_double_conversion_allowed();
extern int Q_LGTLOC_to_double(const void *pValue, double *nValue);
extern int is_Q_LGTLOC_long_conversion_allowed();
extern int Q_LGTLOC_to_long(const void *pValue, long *nValue);
extern void compare_Q_LGTLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LGTLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LGTLOC(void *pValue);
extern int release_Q_LGTLOC(void *pValue);
extern int copy_Q_LGTLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LGTLOC_Utils;

/****************************************************************
 ** Q_LINK 
 ****************************************************************/
extern int Q_LINK_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LINK_string(const char *str, char **endptr);
extern int string_to_Q_LINK(const char *str, void *pValue, char **endptr);
extern int is_Q_LINK_double_conversion_allowed();
extern int Q_LINK_to_double(const void *pValue, double *nValue);
extern int is_Q_LINK_long_conversion_allowed();
extern int Q_LINK_to_long(const void *pValue, long *nValue);
extern void compare_Q_LINK(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LINK_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LINK(void *pValue);
extern int release_Q_LINK(void *pValue);
extern int copy_Q_LINK(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LINK_Utils;

/****************************************************************
 ** Q_LINKORIENTATION 
 ****************************************************************/
extern int Q_LINKORIENTATION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LINKORIENTATION_string(const char *str, char **endptr);
extern int string_to_Q_LINKORIENTATION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKORIENTATION_double_conversion_allowed();
extern int Q_LINKORIENTATION_to_double(const void *pValue, double *nValue);
extern int is_Q_LINKORIENTATION_long_conversion_allowed();
extern int Q_LINKORIENTATION_to_long(const void *pValue, long *nValue);
extern void compare_Q_LINKORIENTATION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LINKORIENTATION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LINKORIENTATION(void *pValue);
extern int release_Q_LINKORIENTATION(void *pValue);
extern int copy_Q_LINKORIENTATION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LINKORIENTATION_Utils;

/****************************************************************
 ** Q_LINKREACTION 
 ****************************************************************/
extern int Q_LINKREACTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LINKREACTION_string(const char *str, char **endptr);
extern int string_to_Q_LINKREACTION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKREACTION_double_conversion_allowed();
extern int Q_LINKREACTION_to_double(const void *pValue, double *nValue);
extern int is_Q_LINKREACTION_long_conversion_allowed();
extern int Q_LINKREACTION_to_long(const void *pValue, long *nValue);
extern void compare_Q_LINKREACTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LINKREACTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LINKREACTION(void *pValue);
extern int release_Q_LINKREACTION(void *pValue);
extern int copy_Q_LINKREACTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LINKREACTION_Utils;

/****************************************************************
 ** Q_LOCACC 
 ****************************************************************/
extern int Q_LOCACC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LOCACC_string(const char *str, char **endptr);
extern int string_to_Q_LOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_LOCACC_double_conversion_allowed();
extern int Q_LOCACC_to_double(const void *pValue, double *nValue);
extern int is_Q_LOCACC_long_conversion_allowed();
extern int Q_LOCACC_to_long(const void *pValue, long *nValue);
extern void compare_Q_LOCACC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LOCACC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LOCACC(void *pValue);
extern int release_Q_LOCACC(void *pValue);
extern int copy_Q_LOCACC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LOCACC_Utils;

/****************************************************************
 ** Q_MAMODE 
 ****************************************************************/
extern int Q_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_MAMODE_string(const char *str, char **endptr);
extern int string_to_Q_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_Q_MAMODE_double_conversion_allowed();
extern int Q_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_Q_MAMODE_long_conversion_allowed();
extern int Q_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_Q_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_MAMODE(void *pValue);
extern int release_Q_MAMODE(void *pValue);
extern int copy_Q_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_MAMODE_Utils;

/****************************************************************
 ** Q_MARQSTREASON 
 ****************************************************************/
extern int Q_MARQSTREASON_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_MARQSTREASON_string(const char *str, char **endptr);
extern int string_to_Q_MARQSTREASON(const char *str, void *pValue, char **endptr);
extern int is_Q_MARQSTREASON_double_conversion_allowed();
extern int Q_MARQSTREASON_to_double(const void *pValue, double *nValue);
extern int is_Q_MARQSTREASON_long_conversion_allowed();
extern int Q_MARQSTREASON_to_long(const void *pValue, long *nValue);
extern void compare_Q_MARQSTREASON(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_MARQSTREASON_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_MARQSTREASON(void *pValue);
extern int release_Q_MARQSTREASON(void *pValue);
extern int copy_Q_MARQSTREASON(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_MARQSTREASON_Utils;

/****************************************************************
 ** Q_MEDIA 
 ****************************************************************/
extern int Q_MEDIA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_MEDIA_string(const char *str, char **endptr);
extern int string_to_Q_MEDIA(const char *str, void *pValue, char **endptr);
extern int is_Q_MEDIA_double_conversion_allowed();
extern int Q_MEDIA_to_double(const void *pValue, double *nValue);
extern int is_Q_MEDIA_long_conversion_allowed();
extern int Q_MEDIA_to_long(const void *pValue, long *nValue);
extern void compare_Q_MEDIA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_MEDIA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_MEDIA(void *pValue);
extern int release_Q_MEDIA(void *pValue);
extern int copy_Q_MEDIA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_MEDIA_Utils;

/****************************************************************
 ** Q_NEWCOUNTRY 
 ****************************************************************/
extern int Q_NEWCOUNTRY_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NEWCOUNTRY_string(const char *str, char **endptr);
extern int string_to_Q_NEWCOUNTRY(const char *str, void *pValue, char **endptr);
extern int is_Q_NEWCOUNTRY_double_conversion_allowed();
extern int Q_NEWCOUNTRY_to_double(const void *pValue, double *nValue);
extern int is_Q_NEWCOUNTRY_long_conversion_allowed();
extern int Q_NEWCOUNTRY_to_long(const void *pValue, long *nValue);
extern void compare_Q_NEWCOUNTRY(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NEWCOUNTRY_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NEWCOUNTRY(void *pValue);
extern int release_Q_NEWCOUNTRY(void *pValue);
extern int copy_Q_NEWCOUNTRY(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NEWCOUNTRY_Utils;

/****************************************************************
 ** Q_NVDRIVER_ADHES 
 ****************************************************************/
extern int Q_NVDRIVER_ADHES_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVDRIVER_ADHES_string(const char *str, char **endptr);
extern int string_to_Q_NVDRIVER_ADHES(const char *str, void *pValue, char **endptr);
extern int is_Q_NVDRIVER_ADHES_double_conversion_allowed();
extern int Q_NVDRIVER_ADHES_to_double(const void *pValue, double *nValue);
extern int is_Q_NVDRIVER_ADHES_long_conversion_allowed();
extern int Q_NVDRIVER_ADHES_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVDRIVER_ADHES(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVDRIVER_ADHES_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVDRIVER_ADHES(void *pValue);
extern int release_Q_NVDRIVER_ADHES(void *pValue);
extern int copy_Q_NVDRIVER_ADHES(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVDRIVER_ADHES_Utils;

/****************************************************************
 ** Q_NVEMRRLS 
 ****************************************************************/
extern int Q_NVEMRRLS_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVEMRRLS_string(const char *str, char **endptr);
extern int string_to_Q_NVEMRRLS(const char *str, void *pValue, char **endptr);
extern int is_Q_NVEMRRLS_double_conversion_allowed();
extern int Q_NVEMRRLS_to_double(const void *pValue, double *nValue);
extern int is_Q_NVEMRRLS_long_conversion_allowed();
extern int Q_NVEMRRLS_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVEMRRLS(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVEMRRLS_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVEMRRLS(void *pValue);
extern int release_Q_NVEMRRLS(void *pValue);
extern int copy_Q_NVEMRRLS(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVEMRRLS_Utils;

/****************************************************************
 ** Q_NVGUIPERM 
 ****************************************************************/
extern int Q_NVGUIPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVGUIPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVGUIPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVGUIPERM_double_conversion_allowed();
extern int Q_NVGUIPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVGUIPERM_long_conversion_allowed();
extern int Q_NVGUIPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVGUIPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVGUIPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVGUIPERM(void *pValue);
extern int release_Q_NVGUIPERM(void *pValue);
extern int copy_Q_NVGUIPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVGUIPERM_Utils;

/****************************************************************
 ** Q_NVINHSMICPERM 
 ****************************************************************/
extern int Q_NVINHSMICPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVINHSMICPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVINHSMICPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVINHSMICPERM_double_conversion_allowed();
extern int Q_NVINHSMICPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVINHSMICPERM_long_conversion_allowed();
extern int Q_NVINHSMICPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVINHSMICPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVINHSMICPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVINHSMICPERM(void *pValue);
extern int release_Q_NVINHSMICPERM(void *pValue);
extern int copy_Q_NVINHSMICPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVINHSMICPERM_Utils;

/****************************************************************
 ** Q_NVKINT 
 ****************************************************************/
extern int Q_NVKINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVKINT_string(const char *str, char **endptr);
extern int string_to_Q_NVKINT(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKINT_double_conversion_allowed();
extern int Q_NVKINT_to_double(const void *pValue, double *nValue);
extern int is_Q_NVKINT_long_conversion_allowed();
extern int Q_NVKINT_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVKINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVKINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVKINT(void *pValue);
extern int release_Q_NVKINT(void *pValue);
extern int copy_Q_NVKINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVKINT_Utils;

/****************************************************************
 ** Q_NVKVINTSET 
 ****************************************************************/
extern int Q_NVKVINTSET_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVKVINTSET_string(const char *str, char **endptr);
extern int string_to_Q_NVKVINTSET(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKVINTSET_double_conversion_allowed();
extern int Q_NVKVINTSET_to_double(const void *pValue, double *nValue);
extern int is_Q_NVKVINTSET_long_conversion_allowed();
extern int Q_NVKVINTSET_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVKVINTSET(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVKVINTSET_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVKVINTSET(void *pValue);
extern int release_Q_NVKVINTSET(void *pValue);
extern int copy_Q_NVKVINTSET(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVKVINTSET_Utils;

/****************************************************************
 ** Q_NVLOCACC 
 ****************************************************************/
extern int Q_NVLOCACC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVLOCACC_string(const char *str, char **endptr);
extern int string_to_Q_NVLOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_NVLOCACC_double_conversion_allowed();
extern int Q_NVLOCACC_to_double(const void *pValue, double *nValue);
extern int is_Q_NVLOCACC_long_conversion_allowed();
extern int Q_NVLOCACC_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVLOCACC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVLOCACC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVLOCACC(void *pValue);
extern int release_Q_NVLOCACC(void *pValue);
extern int copy_Q_NVLOCACC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVLOCACC_Utils;

/****************************************************************
 ** Q_NVSBFBPERM 
 ****************************************************************/
extern int Q_NVSBFBPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVSBFBPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBFBPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBFBPERM_double_conversion_allowed();
extern int Q_NVSBFBPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVSBFBPERM_long_conversion_allowed();
extern int Q_NVSBFBPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVSBFBPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVSBFBPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVSBFBPERM(void *pValue);
extern int release_Q_NVSBFBPERM(void *pValue);
extern int copy_Q_NVSBFBPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVSBFBPERM_Utils;

/****************************************************************
 ** Q_NVSBTSMPERM 
 ****************************************************************/
extern int Q_NVSBTSMPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVSBTSMPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBTSMPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBTSMPERM_double_conversion_allowed();
extern int Q_NVSBTSMPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVSBTSMPERM_long_conversion_allowed();
extern int Q_NVSBTSMPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVSBTSMPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVSBTSMPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVSBTSMPERM(void *pValue);
extern int release_Q_NVSBTSMPERM(void *pValue);
extern int copy_Q_NVSBTSMPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVSBTSMPERM_Utils;

/****************************************************************
 ** Q_ORIENTATION 
 ****************************************************************/
extern int Q_ORIENTATION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_ORIENTATION_string(const char *str, char **endptr);
extern int string_to_Q_ORIENTATION(const char *str, void *pValue, char **endptr);
extern int is_Q_ORIENTATION_double_conversion_allowed();
extern int Q_ORIENTATION_to_double(const void *pValue, double *nValue);
extern int is_Q_ORIENTATION_long_conversion_allowed();
extern int Q_ORIENTATION_to_long(const void *pValue, long *nValue);
extern void compare_Q_ORIENTATION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_ORIENTATION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_ORIENTATION(void *pValue);
extern int release_Q_ORIENTATION(void *pValue);
extern int copy_Q_ORIENTATION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_ORIENTATION_Utils;

/****************************************************************
 ** Q_OVERLAP 
 ****************************************************************/
extern int Q_OVERLAP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_OVERLAP_string(const char *str, char **endptr);
extern int string_to_Q_OVERLAP(const char *str, void *pValue, char **endptr);
extern int is_Q_OVERLAP_double_conversion_allowed();
extern int Q_OVERLAP_to_double(const void *pValue, double *nValue);
extern int is_Q_OVERLAP_long_conversion_allowed();
extern int Q_OVERLAP_to_long(const void *pValue, long *nValue);
extern void compare_Q_OVERLAP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_OVERLAP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_OVERLAP(void *pValue);
extern int release_Q_OVERLAP(void *pValue);
extern int copy_Q_OVERLAP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_OVERLAP_Utils;

/****************************************************************
 ** Q_RBC 
 ****************************************************************/
extern int Q_RBC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_RBC_string(const char *str, char **endptr);
extern int string_to_Q_RBC(const char *str, void *pValue, char **endptr);
extern int is_Q_RBC_double_conversion_allowed();
extern int Q_RBC_to_double(const void *pValue, double *nValue);
extern int is_Q_RBC_long_conversion_allowed();
extern int Q_RBC_to_long(const void *pValue, long *nValue);
extern void compare_Q_RBC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_RBC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_RBC(void *pValue);
extern int release_Q_RBC(void *pValue);
extern int copy_Q_RBC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_RBC_Utils;

/****************************************************************
 ** Q_SCALE 
 ****************************************************************/
extern int Q_SCALE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SCALE_string(const char *str, char **endptr);
extern int string_to_Q_SCALE(const char *str, void *pValue, char **endptr);
extern int is_Q_SCALE_double_conversion_allowed();
extern int Q_SCALE_to_double(const void *pValue, double *nValue);
extern int is_Q_SCALE_long_conversion_allowed();
extern int Q_SCALE_to_long(const void *pValue, long *nValue);
extern void compare_Q_SCALE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SCALE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SCALE(void *pValue);
extern int release_Q_SCALE(void *pValue);
extern int copy_Q_SCALE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SCALE_Utils;

/****************************************************************
 ** Q_SECTIONTIMER 
 ****************************************************************/
extern int Q_SECTIONTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_Q_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_SECTIONTIMER_double_conversion_allowed();
extern int Q_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int is_Q_SECTIONTIMER_long_conversion_allowed();
extern int Q_SECTIONTIMER_to_long(const void *pValue, long *nValue);
extern void compare_Q_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SECTIONTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SECTIONTIMER(void *pValue);
extern int release_Q_SECTIONTIMER(void *pValue);
extern int copy_Q_SECTIONTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SECTIONTIMER_Utils;

/****************************************************************
 ** Q_SLEEPSESSION 
 ****************************************************************/
extern int Q_SLEEPSESSION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SLEEPSESSION_string(const char *str, char **endptr);
extern int string_to_Q_SLEEPSESSION(const char *str, void *pValue, char **endptr);
extern int is_Q_SLEEPSESSION_double_conversion_allowed();
extern int Q_SLEEPSESSION_to_double(const void *pValue, double *nValue);
extern int is_Q_SLEEPSESSION_long_conversion_allowed();
extern int Q_SLEEPSESSION_to_long(const void *pValue, long *nValue);
extern void compare_Q_SLEEPSESSION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SLEEPSESSION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SLEEPSESSION(void *pValue);
extern int release_Q_SLEEPSESSION(void *pValue);
extern int copy_Q_SLEEPSESSION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SLEEPSESSION_Utils;

/****************************************************************
 ** Q_SRSTOP 
 ****************************************************************/
extern int Q_SRSTOP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SRSTOP_string(const char *str, char **endptr);
extern int string_to_Q_SRSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_SRSTOP_double_conversion_allowed();
extern int Q_SRSTOP_to_double(const void *pValue, double *nValue);
extern int is_Q_SRSTOP_long_conversion_allowed();
extern int Q_SRSTOP_to_long(const void *pValue, long *nValue);
extern void compare_Q_SRSTOP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SRSTOP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SRSTOP(void *pValue);
extern int release_Q_SRSTOP(void *pValue);
extern int copy_Q_SRSTOP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SRSTOP_Utils;

/****************************************************************
 ** Q_TEXTCLASS 
 ****************************************************************/
extern int Q_TEXTCLASS_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_TEXTCLASS_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCLASS(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCLASS_double_conversion_allowed();
extern int Q_TEXTCLASS_to_double(const void *pValue, double *nValue);
extern int is_Q_TEXTCLASS_long_conversion_allowed();
extern int Q_TEXTCLASS_to_long(const void *pValue, long *nValue);
extern void compare_Q_TEXTCLASS(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_TEXTCLASS_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_TEXTCLASS(void *pValue);
extern int release_Q_TEXTCLASS(void *pValue);
extern int copy_Q_TEXTCLASS(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_TEXTCLASS_Utils;

/****************************************************************
 ** Q_TEXTCONFIRM 
 ****************************************************************/
extern int Q_TEXTCONFIRM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_TEXTCONFIRM_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCONFIRM(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCONFIRM_double_conversion_allowed();
extern int Q_TEXTCONFIRM_to_double(const void *pValue, double *nValue);
extern int is_Q_TEXTCONFIRM_long_conversion_allowed();
extern int Q_TEXTCONFIRM_to_long(const void *pValue, long *nValue);
extern void compare_Q_TEXTCONFIRM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_TEXTCONFIRM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_TEXTCONFIRM(void *pValue);
extern int release_Q_TEXTCONFIRM(void *pValue);
extern int copy_Q_TEXTCONFIRM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_TEXTCONFIRM_Utils;

/****************************************************************
 ** Q_TEXTREPORT 
 ****************************************************************/
extern int Q_TEXTREPORT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_TEXTREPORT_string(const char *str, char **endptr);
extern int string_to_Q_TEXTREPORT(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTREPORT_double_conversion_allowed();
extern int Q_TEXTREPORT_to_double(const void *pValue, double *nValue);
extern int is_Q_TEXTREPORT_long_conversion_allowed();
extern int Q_TEXTREPORT_to_long(const void *pValue, long *nValue);
extern void compare_Q_TEXTREPORT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_TEXTREPORT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_TEXTREPORT(void *pValue);
extern int release_Q_TEXTREPORT(void *pValue);
extern int copy_Q_TEXTREPORT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_TEXTREPORT_Utils;

/****************************************************************
 ** Q_UPDOWN 
 ****************************************************************/
extern int Q_UPDOWN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_UPDOWN_string(const char *str, char **endptr);
extern int string_to_Q_UPDOWN(const char *str, void *pValue, char **endptr);
extern int is_Q_UPDOWN_double_conversion_allowed();
extern int Q_UPDOWN_to_double(const void *pValue, double *nValue);
extern int is_Q_UPDOWN_long_conversion_allowed();
extern int Q_UPDOWN_to_long(const void *pValue, long *nValue);
extern void compare_Q_UPDOWN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_UPDOWN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_UPDOWN(void *pValue);
extern int release_Q_UPDOWN(void *pValue);
extern int copy_Q_UPDOWN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_UPDOWN_Utils;

/****************************************************************
 ** R_data_internal_T_InfraLib 
 ****************************************************************/
extern int R_data_internal_T_InfraLib_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_R_data_internal_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_R_data_internal_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_R_data_internal_T_InfraLib_double_conversion_allowed();
extern int R_data_internal_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int is_R_data_internal_T_InfraLib_long_conversion_allowed();
extern int R_data_internal_T_InfraLib_to_long(const void *pValue, long *nValue);
extern void compare_R_data_internal_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_R_data_internal_T_InfraLib_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_R_data_internal_T_InfraLib(void *pValue);
extern int release_R_data_internal_T_InfraLib(void *pValue);
extern int copy_R_data_internal_T_InfraLib(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_R_data_internal_T_InfraLib_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrackTrain_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_Radio_Types_Pkg_double_conversion_allowed();
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrackTrain_Header_T_Radio_Types_Pkg_long_conversion_allowed();
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrackTrain_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrackTrain_Header_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrackTrain_Header_T_Radio_Types_Pkg(void *pValue);
extern int release_Radio_TrackTrain_Header_T_Radio_Types_Pkg(void *pValue);
extern int copy_Radio_TrackTrain_Header_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_TM 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrackTrain_Header_T_TM_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_TM(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_TM_double_conversion_allowed();
extern int Radio_TrackTrain_Header_T_TM_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrackTrain_Header_T_TM_long_conversion_allowed();
extern int Radio_TrackTrain_Header_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrackTrain_Header_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrackTrain_Header_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrackTrain_Header_T_TM(void *pValue);
extern int release_Radio_TrackTrain_Header_T_TM(void *pValue);
extern int copy_Radio_TrackTrain_Header_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_TM_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_TM_transitional_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrackTrain_Header_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_TM_transitional_double_conversion_allowed();
extern int Radio_TrackTrain_Header_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrackTrain_Header_T_TM_transitional_long_conversion_allowed();
extern int Radio_TrackTrain_Header_T_TM_transitional_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrackTrain_Header_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrackTrain_Header_T_TM_transitional_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrackTrain_Header_T_TM_transitional(void *pValue);
extern int release_Radio_TrackTrain_Header_T_TM_transitional(void *pValue);
extern int copy_Radio_TrackTrain_Header_T_TM_transitional(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_TM_transitional_Utils;

/****************************************************************
 ** Radio_TrainTrack_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrainTrack_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Header_T_Radio_Types_Pkg_double_conversion_allowed();
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrainTrack_Header_T_Radio_Types_Pkg_long_conversion_allowed();
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrainTrack_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrainTrack_Header_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrainTrack_Header_T_Radio_Types_Pkg(void *pValue);
extern int release_Radio_TrainTrack_Header_T_Radio_Types_Pkg(void *pValue);
extern int copy_Radio_TrainTrack_Header_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Header_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrainTrack_Header_T_TM_transitional_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrainTrack_Header_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Header_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Header_T_TM_transitional_double_conversion_allowed();
extern int Radio_TrainTrack_Header_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrainTrack_Header_T_TM_transitional_long_conversion_allowed();
extern int Radio_TrainTrack_Header_T_TM_transitional_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrainTrack_Header_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrainTrack_Header_T_TM_transitional_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrainTrack_Header_T_TM_transitional(void *pValue);
extern int release_Radio_TrainTrack_Header_T_TM_transitional(void *pValue);
extern int copy_Radio_TrainTrack_Header_T_TM_transitional(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Header_T_TM_transitional_Utils;

/****************************************************************
 ** Radio_TrainTrack_Message_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrainTrack_Message_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Message_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Message_T_Radio_Types_Pkg_double_conversion_allowed();
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrainTrack_Message_T_Radio_Types_Pkg_long_conversion_allowed();
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrainTrack_Message_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrainTrack_Message_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrainTrack_Message_T_Radio_Types_Pkg(void *pValue);
extern int release_Radio_TrainTrack_Message_T_Radio_Types_Pkg(void *pValue);
extern int copy_Radio_TrainTrack_Message_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Message_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Message_T_TM_transitional 
 ****************************************************************/
extern int Radio_TrainTrack_Message_T_TM_transitional_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrainTrack_Message_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Message_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Message_T_TM_transitional_double_conversion_allowed();
extern int Radio_TrainTrack_Message_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrainTrack_Message_T_TM_transitional_long_conversion_allowed();
extern int Radio_TrainTrack_Message_T_TM_transitional_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrainTrack_Message_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrainTrack_Message_T_TM_transitional_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrainTrack_Message_T_TM_transitional(void *pValue);
extern int release_Radio_TrainTrack_Message_T_TM_transitional(void *pValue);
extern int copy_Radio_TrainTrack_Message_T_TM_transitional(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Message_T_TM_transitional_Utils;

/****************************************************************
 ** RadioManagement_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioManagement_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioManagement_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioManagement_T_API_RadioCommunication_Pkg_double_conversion_allowed();
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RadioManagement_T_API_RadioCommunication_Pkg_long_conversion_allowed();
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RadioManagement_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioManagement_T_API_RadioCommunication_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioManagement_T_API_RadioCommunication_Pkg(void *pValue);
extern int release_RadioManagement_T_API_RadioCommunication_Pkg(void *pValue);
extern int copy_RadioManagement_T_API_RadioCommunication_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioManagement_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** radioManagementMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int radioManagementMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_radioManagementMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_radioManagementMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_radioManagementMessage_T_Common_Types_Pkg_double_conversion_allowed();
extern int radioManagementMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_radioManagementMessage_T_Common_Types_Pkg_long_conversion_allowed();
extern int radioManagementMessage_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_radioManagementMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_radioManagementMessage_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_radioManagementMessage_T_Common_Types_Pkg(void *pValue);
extern int release_radioManagementMessage_T_Common_Types_Pkg(void *pValue);
extern int copy_radioManagementMessage_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_radioManagementMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** RadioMessage_T_Radio_Types_Pkg 
 ****************************************************************/
extern int RadioMessage_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioMessage_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMessage_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMessage_T_Radio_Types_Pkg_double_conversion_allowed();
extern int RadioMessage_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RadioMessage_T_Radio_Types_Pkg_long_conversion_allowed();
extern int RadioMessage_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RadioMessage_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioMessage_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioMessage_T_Radio_Types_Pkg(void *pValue);
extern int release_RadioMessage_T_Radio_Types_Pkg(void *pValue);
extern int copy_RadioMessage_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioMessage_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** RadioMetadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int RadioMetadata_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioMetadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMetadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMetadata_T_Common_Types_Pkg_double_conversion_allowed();
extern int RadioMetadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RadioMetadata_T_Common_Types_Pkg_long_conversion_allowed();
extern int RadioMetadata_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RadioMetadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioMetadata_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioMetadata_T_Common_Types_Pkg(void *pValue);
extern int release_RadioMetadata_T_Common_Types_Pkg(void *pValue);
extern int copy_RadioMetadata_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioMetadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** radioNetWorkIDs_T_MoRC_Pck 
 ****************************************************************/
extern int radioNetWorkIDs_T_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_radioNetWorkIDs_T_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_radioNetWorkIDs_T_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_radioNetWorkIDs_T_MoRC_Pck_double_conversion_allowed();
extern int radioNetWorkIDs_T_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_radioNetWorkIDs_T_MoRC_Pck_long_conversion_allowed();
extern int radioNetWorkIDs_T_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_radioNetWorkIDs_T_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_radioNetWorkIDs_T_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_radioNetWorkIDs_T_MoRC_Pck(void *pValue);
extern int release_radioNetWorkIDs_T_MoRC_Pck(void *pValue);
extern int copy_radioNetWorkIDs_T_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_radioNetWorkIDs_T_MoRC_Pck_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueue_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueue_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioTrackTrainMessageQueue_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueue_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueue_T_double_conversion_allowed();
extern int RadioTrackTrainMessageQueue_T_to_double(const void *pValue, double *nValue);
extern int is_RadioTrackTrainMessageQueue_T_long_conversion_allowed();
extern int RadioTrackTrainMessageQueue_T_to_long(const void *pValue, long *nValue);
extern void compare_RadioTrackTrainMessageQueue_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioTrackTrainMessageQueue_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioTrackTrainMessageQueue_T(void *pValue);
extern int release_RadioTrackTrainMessageQueue_T(void *pValue);
extern int copy_RadioTrackTrainMessageQueue_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueue_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueueEntries_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueueEntries_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioTrackTrainMessageQueueEntries_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueueEntries_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueueEntries_T_double_conversion_allowed();
extern int RadioTrackTrainMessageQueueEntries_T_to_double(const void *pValue, double *nValue);
extern int is_RadioTrackTrainMessageQueueEntries_T_long_conversion_allowed();
extern int RadioTrackTrainMessageQueueEntries_T_to_long(const void *pValue, long *nValue);
extern void compare_RadioTrackTrainMessageQueueEntries_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioTrackTrainMessageQueueEntries_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioTrackTrainMessageQueueEntries_T(void *pValue);
extern int release_RadioTrackTrainMessageQueueEntries_T(void *pValue);
extern int copy_RadioTrackTrainMessageQueueEntries_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueueEntries_T_Utils;

/****************************************************************
 ** RadioTrackTrainMessageQueueEntry_T 
 ****************************************************************/
extern int RadioTrackTrainMessageQueueEntry_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioTrackTrainMessageQueueEntry_T_string(const char *str, char **endptr);
extern int string_to_RadioTrackTrainMessageQueueEntry_T(const char *str, void *pValue, char **endptr);
extern int is_RadioTrackTrainMessageQueueEntry_T_double_conversion_allowed();
extern int RadioTrackTrainMessageQueueEntry_T_to_double(const void *pValue, double *nValue);
extern int is_RadioTrackTrainMessageQueueEntry_T_long_conversion_allowed();
extern int RadioTrackTrainMessageQueueEntry_T_to_long(const void *pValue, long *nValue);
extern void compare_RadioTrackTrainMessageQueueEntry_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioTrackTrainMessageQueueEntry_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioTrackTrainMessageQueueEntry_T(void *pValue);
extern int release_RadioTrackTrainMessageQueueEntry_T(void *pValue);
extern int copy_RadioTrackTrainMessageQueueEntry_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioTrackTrainMessageQueueEntry_T_Utils;

/****************************************************************
 ** RBC_Communication_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RBC_Communication_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Communication_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Communication_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RBC_Communication_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RBC_Communication_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RBC_Communication_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RBC_Communication_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_RBC_Communication_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_RBC_Communication_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RBC_Communication_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** RBC_Data_T_RBC_DataBus_Pkg 
 ****************************************************************/
extern int RBC_Data_T_RBC_DataBus_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RBC_Data_T_RBC_DataBus_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Data_T_RBC_DataBus_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Data_T_RBC_DataBus_Pkg_double_conversion_allowed();
extern int RBC_Data_T_RBC_DataBus_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RBC_Data_T_RBC_DataBus_Pkg_long_conversion_allowed();
extern int RBC_Data_T_RBC_DataBus_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RBC_Data_T_RBC_DataBus_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RBC_Data_T_RBC_DataBus_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RBC_Data_T_RBC_DataBus_Pkg(void *pValue);
extern int release_RBC_Data_T_RBC_DataBus_Pkg(void *pValue);
extern int copy_RBC_Data_T_RBC_DataBus_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RBC_Data_T_RBC_DataBus_Pkg_Utils;

/****************************************************************
 ** RBC_Id_T_Common_Types_Pkg 
 ****************************************************************/
extern int RBC_Id_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RBC_Id_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Id_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Id_T_Common_Types_Pkg_double_conversion_allowed();
extern int RBC_Id_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RBC_Id_T_Common_Types_Pkg_long_conversion_allowed();
extern int RBC_Id_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RBC_Id_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RBC_Id_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RBC_Id_T_Common_Types_Pkg(void *pValue);
extern int release_RBC_Id_T_Common_Types_Pkg(void *pValue);
extern int copy_RBC_Id_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RBC_Id_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** ReceivedMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int ReceivedMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ReceivedMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_ReceivedMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReceivedMessage_T_Common_Types_Pkg_double_conversion_allowed();
extern int ReceivedMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ReceivedMessage_T_Common_Types_Pkg_long_conversion_allowed();
extern int ReceivedMessage_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ReceivedMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ReceivedMessage_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ReceivedMessage_T_Common_Types_Pkg(void *pValue);
extern int release_ReceivedMessage_T_Common_Types_Pkg(void *pValue);
extern int copy_ReceivedMessage_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ReceivedMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_double_conversion_allowed();
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int is_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_long_conversion_allowed();
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int release_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int copy_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** ReportedBG_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ReportedBG_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBG_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBG_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ReportedBG_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ReportedBG_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ReportedBG_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ReportedBG_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ReportedBG_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ReportedBG_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ReportedBG_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ReportedBGList_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ReportedBGList_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBGList_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBGList_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ReportedBGList_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ReportedBGList_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ReportedBGList_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ReportedBGList_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ReportedBGList_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ReportedBGList_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ReportedBGList_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** safeRadioConnectionIndication_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Commands_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Commands_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SDM_Commands_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Commands_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Commands_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SDM_Commands_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SDM_Commands_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SDM_Commands_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SDM_Commands_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SDM_Commands_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SDM_Commands_T_SDM_Types_Pkg(void *pValue);
extern int release_SDM_Commands_T_SDM_Types_Pkg(void *pValue);
extern int copy_SDM_Commands_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SDM_Commands_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Locations_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Locations_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SDM_Locations_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Locations_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Locations_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SDM_Locations_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SDM_Locations_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SDM_Locations_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SDM_Locations_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SDM_Locations_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SDM_Locations_T_SDM_Types_Pkg(void *pValue);
extern int release_SDM_Locations_T_SDM_Types_Pkg(void *pValue);
extern int copy_SDM_Locations_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SDM_Locations_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Types_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Types_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SDM_Types_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Types_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Types_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SDM_Types_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SDM_Types_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SDM_Types_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SDM_Types_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SDM_Types_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SDM_Types_T_SDM_Types_Pkg(void *pValue);
extern int release_SDM_Types_T_SDM_Types_Pkg(void *pValue);
extern int copy_SDM_Types_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SDM_Types_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** sessionCmd_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sessionCmd_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionCmd_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionCmd_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sessionCmd_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sessionCmd_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sessionCmd_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sessionCmd_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_sessionCmd_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_sessionCmd_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sessionCmd_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** SessionManagement_T 
 ****************************************************************/
extern int SessionManagement_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SessionManagement_T_string(const char *str, char **endptr);
extern int string_to_SessionManagement_T(const char *str, void *pValue, char **endptr);
extern int is_SessionManagement_T_double_conversion_allowed();
extern int SessionManagement_T_to_double(const void *pValue, double *nValue);
extern int is_SessionManagement_T_long_conversion_allowed();
extern int SessionManagement_T_to_long(const void *pValue, long *nValue);
extern void compare_SessionManagement_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SessionManagement_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SessionManagement_T(void *pValue);
extern int release_SessionManagement_T(void *pValue);
extern int copy_SessionManagement_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SessionManagement_T_Utils;

/****************************************************************
 ** sessionPhase_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sessionPhase_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionPhase_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionPhase_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sessionPhase_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sessionPhase_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sessionPhase_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sessionPhase_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_sessionPhase_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_sessionPhase_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sessionPhase_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sessionStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionStatus_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sessionStatus_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sessionStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sessionStatus_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sessionStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_sessionStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_sessionStatus_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sessionStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sNID_RADIO_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sNID_RADIO_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sNID_RADIO_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_sNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_sNID_RADIO_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** Speed_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Speed_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Speed_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Speed_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speed_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int Speed_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Speed_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int Speed_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Speed_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Speed_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Speed_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_Speed_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_Speed_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Speed_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** Speeds_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Speeds_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Speeds_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Speeds_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speeds_T_SDM_Types_Pkg_double_conversion_allowed();
extern int Speeds_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Speeds_T_SDM_Types_Pkg_long_conversion_allowed();
extern int Speeds_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Speeds_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Speeds_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Speeds_T_SDM_Types_Pkg(void *pValue);
extern int release_Speeds_T_SDM_Types_Pkg(void *pValue);
extern int copy_Speeds_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Speeds_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** speedSupervisionForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_speedSupervisionForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_speedSupervisionForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_speedSupervisionForDMI_T_DMI_Types_Pkg_double_conversion_allowed();
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_speedSupervisionForDMI_T_DMI_Types_Pkg_long_conversion_allowed();
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_speedSupervisionForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_speedSupervisionForDMI_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_speedSupervisionForDMI_T_DMI_Types_Pkg(void *pValue);
extern int release_speedSupervisionForDMI_T_DMI_Types_Pkg(void *pValue);
extern int copy_speedSupervisionForDMI_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_speedSupervisionForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** SSM_ST_brake_Management 
 ****************************************************************/
extern int SSM_ST_brake_Management_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_brake_Management_string(const char *str, char **endptr);
extern int string_to_SSM_ST_brake_Management(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_brake_Management_double_conversion_allowed();
extern int SSM_ST_brake_Management_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_brake_Management_long_conversion_allowed();
extern int SSM_ST_brake_Management_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_brake_Management(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_brake_Management_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_brake_Management(void *pValue);
extern int release_SSM_ST_brake_Management(void *pValue);
extern int copy_SSM_ST_brake_Management(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_brake_Management_Utils;

/****************************************************************
 ** SSM_ST_CabinSM 
 ****************************************************************/
extern int SSM_ST_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CabinSM_double_conversion_allowed();
extern int SSM_ST_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_CabinSM_long_conversion_allowed();
extern int SSM_ST_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_CabinSM(void *pValue);
extern int release_SSM_ST_CabinSM(void *pValue);
extern int copy_SSM_ST_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_double_conversion_allowed();
extern int SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_long_conversion_allowed();
extern int SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int release_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int copy_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_CONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_ST_connectionStatus_SM 
 ****************************************************************/
extern int SSM_ST_connectionStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_connectionStatus_SM_double_conversion_allowed();
extern int SSM_ST_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_connectionStatus_SM_long_conversion_allowed();
extern int SSM_ST_connectionStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_connectionStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_connectionStatus_SM(void *pValue);
extern int release_SSM_ST_connectionStatus_SM(void *pValue);
extern int copy_SSM_ST_connectionStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_ST_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_ST_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_ST_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_ST_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_CONTROLLER_SM(void *pValue);
extern int release_SSM_ST_CONTROLLER_SM(void *pValue);
extern int copy_SSM_ST_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_ST_CSM_CSM_modeInterplay 
 ****************************************************************/
extern int SSM_ST_CSM_CSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_CSM_CSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CSM_CSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CSM_CSM_modeInterplay_double_conversion_allowed();
extern int SSM_ST_CSM_CSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_CSM_CSM_modeInterplay_long_conversion_allowed();
extern int SSM_ST_CSM_CSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_CSM_CSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_CSM_CSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_CSM_CSM_modeInterplay(void *pValue);
extern int release_SSM_ST_CSM_CSM_modeInterplay(void *pValue);
extern int copy_SSM_ST_CSM_CSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_CSM_CSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_GENERAL_MESSAGE_SM 
 ****************************************************************/
extern int SSM_ST_GENERAL_MESSAGE_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_GENERAL_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_GENERAL_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_GENERAL_MESSAGE_SM_double_conversion_allowed();
extern int SSM_ST_GENERAL_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_GENERAL_MESSAGE_SM_long_conversion_allowed();
extern int SSM_ST_GENERAL_MESSAGE_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_GENERAL_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_GENERAL_MESSAGE_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_GENERAL_MESSAGE_SM(void *pValue);
extern int release_SSM_ST_GENERAL_MESSAGE_SM(void *pValue);
extern int copy_SSM_ST_GENERAL_MESSAGE_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_GENERAL_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_ST_GSM_R_MobileManagement 
 ****************************************************************/
extern int SSM_ST_GSM_R_MobileManagement_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_GSM_R_MobileManagement_string(const char *str, char **endptr);
extern int string_to_SSM_ST_GSM_R_MobileManagement(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_GSM_R_MobileManagement_double_conversion_allowed();
extern int SSM_ST_GSM_R_MobileManagement_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_GSM_R_MobileManagement_long_conversion_allowed();
extern int SSM_ST_GSM_R_MobileManagement_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_GSM_R_MobileManagement(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_GSM_R_MobileManagement_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_GSM_R_MobileManagement(void *pValue);
extern int release_SSM_ST_GSM_R_MobileManagement(void *pValue);
extern int copy_SSM_ST_GSM_R_MobileManagement(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_GSM_R_MobileManagement_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_1_Session_SM_else_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_double_conversion_allowed();
extern int SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_long_conversion_allowed();
extern int SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int release_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int copy_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_double_conversion_allowed();
extern int SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_long_conversion_allowed();
extern int SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int release_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int copy_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_Utils;

/****************************************************************
 ** SSM_ST_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_ST_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Level_NTC_and_Mode_SN_double_conversion_allowed();
extern int SSM_ST_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Level_NTC_and_Mode_SN_long_conversion_allowed();
extern int SSM_ST_Level_NTC_and_Mode_SN_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Level_NTC_and_Mode_SN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Level_NTC_and_Mode_SN(void *pValue);
extern int release_SSM_ST_Level_NTC_and_Mode_SN(void *pValue);
extern int copy_SSM_ST_Level_NTC_and_Mode_SN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** SSM_ST_modeInterplay 
 ****************************************************************/
extern int SSM_ST_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_modeInterplay_double_conversion_allowed();
extern int SSM_ST_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_modeInterplay_long_conversion_allowed();
extern int SSM_ST_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_modeInterplay(void *pValue);
extern int release_SSM_ST_modeInterplay(void *pValue);
extern int copy_SSM_ST_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_MOVEMENT_AUTHORITY_SM 
 ****************************************************************/
extern int SSM_ST_MOVEMENT_AUTHORITY_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_MOVEMENT_AUTHORITY_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_MOVEMENT_AUTHORITY_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_MOVEMENT_AUTHORITY_SM_double_conversion_allowed();
extern int SSM_ST_MOVEMENT_AUTHORITY_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_MOVEMENT_AUTHORITY_SM_long_conversion_allowed();
extern int SSM_ST_MOVEMENT_AUTHORITY_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_MOVEMENT_AUTHORITY_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_MOVEMENT_AUTHORITY_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_MOVEMENT_AUTHORITY_SM(void *pValue);
extern int release_SSM_ST_MOVEMENT_AUTHORITY_SM(void *pValue);
extern int copy_SSM_ST_MOVEMENT_AUTHORITY_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_MOVEMENT_AUTHORITY_SM_Utils;

/****************************************************************
 ** SSM_ST_PlanningAreaStatus 
 ****************************************************************/
extern int SSM_ST_PlanningAreaStatus_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_PlanningAreaStatus_string(const char *str, char **endptr);
extern int string_to_SSM_ST_PlanningAreaStatus(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_PlanningAreaStatus_double_conversion_allowed();
extern int SSM_ST_PlanningAreaStatus_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_PlanningAreaStatus_long_conversion_allowed();
extern int SSM_ST_PlanningAreaStatus_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_PlanningAreaStatus(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_PlanningAreaStatus_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_PlanningAreaStatus(void *pValue);
extern int release_SSM_ST_PlanningAreaStatus(void *pValue);
extern int copy_SSM_ST_PlanningAreaStatus(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_PlanningAreaStatus_Utils;

/****************************************************************
 ** SSM_ST_POSITION_REPORT_SM 
 ****************************************************************/
extern int SSM_ST_POSITION_REPORT_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_POSITION_REPORT_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_POSITION_REPORT_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_POSITION_REPORT_SM_double_conversion_allowed();
extern int SSM_ST_POSITION_REPORT_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_POSITION_REPORT_SM_long_conversion_allowed();
extern int SSM_ST_POSITION_REPORT_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_POSITION_REPORT_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_POSITION_REPORT_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_POSITION_REPORT_SM(void *pValue);
extern int release_SSM_ST_POSITION_REPORT_SM(void *pValue);
extern int copy_SSM_ST_POSITION_REPORT_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_POSITION_REPORT_SM_Utils;

/****************************************************************
 ** SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int release_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int copy_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_ST_Register_SM 
 ****************************************************************/
extern int SSM_ST_Register_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Register_SM_double_conversion_allowed();
extern int SSM_ST_Register_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Register_SM_long_conversion_allowed();
extern int SSM_ST_Register_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Register_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Register_SM(void *pValue);
extern int release_SSM_ST_Register_SM(void *pValue);
extern int copy_SSM_ST_Register_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Register_SM_Utils;

/****************************************************************
 ** SSM_ST_repeat_SM 
 ****************************************************************/
extern int SSM_ST_repeat_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_repeat_SM_double_conversion_allowed();
extern int SSM_ST_repeat_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_repeat_SM_long_conversion_allowed();
extern int SSM_ST_repeat_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_repeat_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_repeat_SM(void *pValue);
extern int release_SSM_ST_repeat_SM(void *pValue);
extern int copy_SSM_ST_repeat_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_repeat_SM_Utils;

/****************************************************************
 ** SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM 
 ****************************************************************/
extern int SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_double_conversion_allowed();
extern int SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_long_conversion_allowed();
extern int SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(void *pValue);
extern int release_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(void *pValue);
extern int copy_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_ST_Revoke_Procedure 
 ****************************************************************/
extern int SSM_ST_Revoke_Procedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Revoke_Procedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Revoke_Procedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Revoke_Procedure_double_conversion_allowed();
extern int SSM_ST_Revoke_Procedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Revoke_Procedure_long_conversion_allowed();
extern int SSM_ST_Revoke_Procedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Revoke_Procedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Revoke_Procedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Revoke_Procedure(void *pValue);
extern int release_SSM_ST_Revoke_Procedure(void *pValue);
extern int copy_SSM_ST_Revoke_Procedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Revoke_Procedure_Utils;

/****************************************************************
 ** SSM_ST_RSM_RSM_modeInterplay 
 ****************************************************************/
extern int SSM_ST_RSM_RSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_RSM_RSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_RSM_RSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_RSM_RSM_modeInterplay_double_conversion_allowed();
extern int SSM_ST_RSM_RSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_RSM_RSM_modeInterplay_long_conversion_allowed();
extern int SSM_ST_RSM_RSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_RSM_RSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_RSM_RSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_RSM_RSM_modeInterplay(void *pValue);
extern int release_SSM_ST_RSM_RSM_modeInterplay(void *pValue);
extern int copy_SSM_ST_RSM_RSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_RSM_RSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int release_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int copy_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int release_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int copy_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_ST_Session_SM 
 ****************************************************************/
extern int SSM_ST_Session_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Session_SM_double_conversion_allowed();
extern int SSM_ST_Session_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Session_SM_long_conversion_allowed();
extern int SSM_ST_Session_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Session_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Session_SM(void *pValue);
extern int release_SSM_ST_Session_SM(void *pValue);
extern int copy_SSM_ST_Session_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Session_SM_Utils;

/****************************************************************
 ** SSM_ST_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_ST_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_ST_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_ST_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_ST_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM1 
 ****************************************************************/
extern int SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM1_double_conversion_allowed();
extern int SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM1_long_conversion_allowed();
extern int SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM1(void *pValue);
extern int release_SSM_ST_SM1(void *pValue);
extern int copy_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM1_Utils;

/****************************************************************
 ** SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_SM3_Awakness_of_Train_SM1 
 ****************************************************************/
extern int SSM_ST_SM3_Awakness_of_Train_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM3_Awakness_of_Train_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM3_Awakness_of_Train_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM3_Awakness_of_Train_SM1_double_conversion_allowed();
extern int SSM_ST_SM3_Awakness_of_Train_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM3_Awakness_of_Train_SM1_long_conversion_allowed();
extern int SSM_ST_SM3_Awakness_of_Train_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM3_Awakness_of_Train_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM3_Awakness_of_Train_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM3_Awakness_of_Train_SM1(void *pValue);
extern int release_SSM_ST_SM3_Awakness_of_Train_SM1(void *pValue);
extern int copy_SSM_ST_SM3_Awakness_of_Train_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM3_Awakness_of_Train_SM1_Utils;

/****************************************************************
 ** SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_SM4_TSM_modeInterplay 
 ****************************************************************/
extern int SSM_ST_SM4_TSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM4_TSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM4_TSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM4_TSM_modeInterplay_double_conversion_allowed();
extern int SSM_ST_SM4_TSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM4_TSM_modeInterplay_long_conversion_allowed();
extern int SSM_ST_SM4_TSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM4_TSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM4_TSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM4_TSM_modeInterplay(void *pValue);
extern int release_SSM_ST_SM4_TSM_modeInterplay(void *pValue);
extern int copy_SSM_ST_SM4_TSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM4_TSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_ST_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_ST_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_ST_SM_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_ST_SM_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_ST_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_ST_SM_Start_L1_L2_L3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Start_L1_L2_L3_double_conversion_allowed();
extern int SSM_ST_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Start_L1_L2_L3_long_conversion_allowed();
extern int SSM_ST_SM_Start_L1_L2_L3_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Start_L1_L2_L3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Start_L1_L2_L3(void *pValue);
extern int release_SSM_ST_SM_Start_L1_L2_L3(void *pValue);
extern int copy_SSM_ST_SM_Start_L1_L2_L3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** SSM_ST_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_ST_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_ST_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_ST_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_ST_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_ST_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_ST_SM_Train_Reversing_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Reversing_double_conversion_allowed();
extern int SSM_ST_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Train_Reversing_long_conversion_allowed();
extern int SSM_ST_SM_Train_Reversing_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Train_Reversing_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Train_Reversing(void *pValue);
extern int release_SSM_ST_SM_Train_Reversing(void *pValue);
extern int copy_SSM_ST_SM_Train_Reversing(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Reversing_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Trip 
 ****************************************************************/
extern int SSM_ST_SM_Train_Trip_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Trip_double_conversion_allowed();
extern int SSM_ST_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Train_Trip_long_conversion_allowed();
extern int SSM_ST_SM_Train_Trip_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Train_Trip_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Train_Trip(void *pValue);
extern int release_SSM_ST_SM_Train_Trip(void *pValue);
extern int copy_SSM_ST_SM_Train_Trip(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_TimerStatus_SM 
 ****************************************************************/
extern int SSM_ST_TimerStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TimerStatus_SM_double_conversion_allowed();
extern int SSM_ST_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_TimerStatus_SM_long_conversion_allowed();
extern int SSM_ST_TimerStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_TimerStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_TimerStatus_SM(void *pValue);
extern int release_SSM_ST_TimerStatus_SM(void *pValue);
extern int copy_SSM_ST_TimerStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_TimerStatus_SM_Utils;

/****************************************************************
 ** SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TrainExitedFromRBCArea_SM_double_conversion_allowed();
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_TrainExitedFromRBCArea_SM_long_conversion_allowed();
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_TrainExitedFromRBCArea_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_TrainExitedFromRBCArea_SM(void *pValue);
extern int release_SSM_ST_TrainExitedFromRBCArea_SM(void *pValue);
extern int copy_SSM_ST_TrainExitedFromRBCArea_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSM_ST_TRIP_AND_POST_TRIP_SM 
 ****************************************************************/
extern int SSM_ST_TRIP_AND_POST_TRIP_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_TRIP_AND_POST_TRIP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TRIP_AND_POST_TRIP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TRIP_AND_POST_TRIP_SM_double_conversion_allowed();
extern int SSM_ST_TRIP_AND_POST_TRIP_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_TRIP_AND_POST_TRIP_SM_long_conversion_allowed();
extern int SSM_ST_TRIP_AND_POST_TRIP_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_TRIP_AND_POST_TRIP_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_TRIP_AND_POST_TRIP_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_TRIP_AND_POST_TRIP_SM(void *pValue);
extern int release_SSM_ST_TRIP_AND_POST_TRIP_SM(void *pValue);
extern int copy_SSM_ST_TRIP_AND_POST_TRIP_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_TRIP_AND_POST_TRIP_SM_Utils;

/****************************************************************
 ** SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_double_conversion_allowed();
extern int SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_long_conversion_allowed();
extern int SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int release_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int copy_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_UNCONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_brake_Management 
 ****************************************************************/
extern int SSM_TR_brake_Management_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_brake_Management_string(const char *str, char **endptr);
extern int string_to_SSM_TR_brake_Management(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_brake_Management_double_conversion_allowed();
extern int SSM_TR_brake_Management_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_brake_Management_long_conversion_allowed();
extern int SSM_TR_brake_Management_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_brake_Management(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_brake_Management_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_brake_Management(void *pValue);
extern int release_SSM_TR_brake_Management(void *pValue);
extern int copy_SSM_TR_brake_Management(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_brake_Management_Utils;

/****************************************************************
 ** SSM_TR_CabinSM 
 ****************************************************************/
extern int SSM_TR_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CabinSM_double_conversion_allowed();
extern int SSM_TR_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_CabinSM_long_conversion_allowed();
extern int SSM_TR_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_CabinSM(void *pValue);
extern int release_SSM_TR_CabinSM(void *pValue);
extern int copy_SSM_TR_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_double_conversion_allowed();
extern int SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_long_conversion_allowed();
extern int SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int release_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int copy_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_CONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_TR_connectionStatus_SM 
 ****************************************************************/
extern int SSM_TR_connectionStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_connectionStatus_SM_double_conversion_allowed();
extern int SSM_TR_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_connectionStatus_SM_long_conversion_allowed();
extern int SSM_TR_connectionStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_connectionStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_connectionStatus_SM(void *pValue);
extern int release_SSM_TR_connectionStatus_SM(void *pValue);
extern int copy_SSM_TR_connectionStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_TR_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_TR_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_TR_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_CONTROLLER_SM(void *pValue);
extern int release_SSM_TR_CONTROLLER_SM(void *pValue);
extern int copy_SSM_TR_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_TR_CSM_CSM_modeInterplay 
 ****************************************************************/
extern int SSM_TR_CSM_CSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_CSM_CSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CSM_CSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CSM_CSM_modeInterplay_double_conversion_allowed();
extern int SSM_TR_CSM_CSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_CSM_CSM_modeInterplay_long_conversion_allowed();
extern int SSM_TR_CSM_CSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_CSM_CSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_CSM_CSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_CSM_CSM_modeInterplay(void *pValue);
extern int release_SSM_TR_CSM_CSM_modeInterplay(void *pValue);
extern int copy_SSM_TR_CSM_CSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_CSM_CSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_GENERAL_MESSAGE_SM 
 ****************************************************************/
extern int SSM_TR_GENERAL_MESSAGE_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_GENERAL_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_GENERAL_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_GENERAL_MESSAGE_SM_double_conversion_allowed();
extern int SSM_TR_GENERAL_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_GENERAL_MESSAGE_SM_long_conversion_allowed();
extern int SSM_TR_GENERAL_MESSAGE_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_GENERAL_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_GENERAL_MESSAGE_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_GENERAL_MESSAGE_SM(void *pValue);
extern int release_SSM_TR_GENERAL_MESSAGE_SM(void *pValue);
extern int copy_SSM_TR_GENERAL_MESSAGE_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_GENERAL_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_TR_GSM_R_MobileManagement 
 ****************************************************************/
extern int SSM_TR_GSM_R_MobileManagement_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_GSM_R_MobileManagement_string(const char *str, char **endptr);
extern int string_to_SSM_TR_GSM_R_MobileManagement(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_GSM_R_MobileManagement_double_conversion_allowed();
extern int SSM_TR_GSM_R_MobileManagement_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_GSM_R_MobileManagement_long_conversion_allowed();
extern int SSM_TR_GSM_R_MobileManagement_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_GSM_R_MobileManagement(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_GSM_R_MobileManagement_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_GSM_R_MobileManagement(void *pValue);
extern int release_SSM_TR_GSM_R_MobileManagement(void *pValue);
extern int copy_SSM_TR_GSM_R_MobileManagement(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_GSM_R_MobileManagement_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_1_Session_SM_else_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_double_conversion_allowed();
extern int SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_long_conversion_allowed();
extern int SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int release_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int copy_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_double_conversion_allowed();
extern int SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_long_conversion_allowed();
extern int SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int release_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int copy_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_HourGlassSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_IconSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_TR_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Level_NTC_and_Mode_SN_double_conversion_allowed();
extern int SSM_TR_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Level_NTC_and_Mode_SN_long_conversion_allowed();
extern int SSM_TR_Level_NTC_and_Mode_SN_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Level_NTC_and_Mode_SN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Level_NTC_and_Mode_SN(void *pValue);
extern int release_SSM_TR_Level_NTC_and_Mode_SN(void *pValue);
extern int copy_SSM_TR_Level_NTC_and_Mode_SN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** SSM_TR_modeInterplay 
 ****************************************************************/
extern int SSM_TR_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_modeInterplay_double_conversion_allowed();
extern int SSM_TR_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_modeInterplay_long_conversion_allowed();
extern int SSM_TR_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_modeInterplay(void *pValue);
extern int release_SSM_TR_modeInterplay(void *pValue);
extern int copy_SSM_TR_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_MOVEMENT_AUTHORITY_SM 
 ****************************************************************/
extern int SSM_TR_MOVEMENT_AUTHORITY_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_MOVEMENT_AUTHORITY_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_MOVEMENT_AUTHORITY_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_MOVEMENT_AUTHORITY_SM_double_conversion_allowed();
extern int SSM_TR_MOVEMENT_AUTHORITY_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_MOVEMENT_AUTHORITY_SM_long_conversion_allowed();
extern int SSM_TR_MOVEMENT_AUTHORITY_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_MOVEMENT_AUTHORITY_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_MOVEMENT_AUTHORITY_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_MOVEMENT_AUTHORITY_SM(void *pValue);
extern int release_SSM_TR_MOVEMENT_AUTHORITY_SM(void *pValue);
extern int copy_SSM_TR_MOVEMENT_AUTHORITY_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_MOVEMENT_AUTHORITY_SM_Utils;

/****************************************************************
 ** SSM_TR_PlanningAreaStatus 
 ****************************************************************/
extern int SSM_TR_PlanningAreaStatus_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_PlanningAreaStatus_string(const char *str, char **endptr);
extern int string_to_SSM_TR_PlanningAreaStatus(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_PlanningAreaStatus_double_conversion_allowed();
extern int SSM_TR_PlanningAreaStatus_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_PlanningAreaStatus_long_conversion_allowed();
extern int SSM_TR_PlanningAreaStatus_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_PlanningAreaStatus(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_PlanningAreaStatus_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_PlanningAreaStatus(void *pValue);
extern int release_SSM_TR_PlanningAreaStatus(void *pValue);
extern int copy_SSM_TR_PlanningAreaStatus(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_PlanningAreaStatus_Utils;

/****************************************************************
 ** SSM_TR_POSITION_REPORT_SM 
 ****************************************************************/
extern int SSM_TR_POSITION_REPORT_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_POSITION_REPORT_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_POSITION_REPORT_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_POSITION_REPORT_SM_double_conversion_allowed();
extern int SSM_TR_POSITION_REPORT_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_POSITION_REPORT_SM_long_conversion_allowed();
extern int SSM_TR_POSITION_REPORT_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_POSITION_REPORT_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_POSITION_REPORT_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_POSITION_REPORT_SM(void *pValue);
extern int release_SSM_TR_POSITION_REPORT_SM(void *pValue);
extern int copy_SSM_TR_POSITION_REPORT_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_POSITION_REPORT_SM_Utils;

/****************************************************************
 ** SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int release_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int copy_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_PROCESS_VALIDATED_TRAIN_DATA_SM_PROCESS_VALIDATED_TRAIN_DATA_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_TR_Register_SM 
 ****************************************************************/
extern int SSM_TR_Register_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Register_SM_double_conversion_allowed();
extern int SSM_TR_Register_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Register_SM_long_conversion_allowed();
extern int SSM_TR_Register_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Register_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Register_SM(void *pValue);
extern int release_SSM_TR_Register_SM(void *pValue);
extern int copy_SSM_TR_Register_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Register_SM_Utils;

/****************************************************************
 ** SSM_TR_repeat_SM 
 ****************************************************************/
extern int SSM_TR_repeat_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_repeat_SM_double_conversion_allowed();
extern int SSM_TR_repeat_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_repeat_SM_long_conversion_allowed();
extern int SSM_TR_repeat_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_repeat_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_repeat_SM(void *pValue);
extern int release_SSM_TR_repeat_SM(void *pValue);
extern int copy_SSM_TR_repeat_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_repeat_SM_Utils;

/****************************************************************
 ** SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM 
 ****************************************************************/
extern int SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_double_conversion_allowed();
extern int SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_long_conversion_allowed();
extern int SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(void *pValue);
extern int release_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(void *pValue);
extern int copy_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_REVOCATION_OF_EMERGENCY_STOP_MESSAGE_SM_Utils;

/****************************************************************
 ** SSM_TR_Revoke_Procedure 
 ****************************************************************/
extern int SSM_TR_Revoke_Procedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Revoke_Procedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Revoke_Procedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Revoke_Procedure_double_conversion_allowed();
extern int SSM_TR_Revoke_Procedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Revoke_Procedure_long_conversion_allowed();
extern int SSM_TR_Revoke_Procedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Revoke_Procedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Revoke_Procedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Revoke_Procedure(void *pValue);
extern int release_SSM_TR_Revoke_Procedure(void *pValue);
extern int copy_SSM_TR_Revoke_Procedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Revoke_Procedure_Utils;

/****************************************************************
 ** SSM_TR_RSM_RSM_modeInterplay 
 ****************************************************************/
extern int SSM_TR_RSM_RSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_RSM_RSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_RSM_RSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_RSM_RSM_modeInterplay_double_conversion_allowed();
extern int SSM_TR_RSM_RSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_RSM_RSM_modeInterplay_long_conversion_allowed();
extern int SSM_TR_RSM_RSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_RSM_RSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_RSM_RSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_RSM_RSM_modeInterplay(void *pValue);
extern int release_SSM_TR_RSM_RSM_modeInterplay(void *pValue);
extern int copy_SSM_TR_RSM_RSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_RSM_RSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int release_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int copy_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SEND_MA_AMD_POS_REP_PARAMS_SM_SEND_MA_AND_POS_REP_PARAMS_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM 
 ****************************************************************/
extern int SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_double_conversion_allowed();
extern int SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_long_conversion_allowed();
extern int SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int release_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pValue);
extern int copy_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SESSION_ESTABLISHED_SM_SESSION_ESTABLISHED_CONTROLLER_SM_Utils;

/****************************************************************
 ** SSM_TR_Session_SM 
 ****************************************************************/
extern int SSM_TR_Session_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Session_SM_double_conversion_allowed();
extern int SSM_TR_Session_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Session_SM_long_conversion_allowed();
extern int SSM_TR_Session_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Session_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Session_SM(void *pValue);
extern int release_SSM_TR_Session_SM(void *pValue);
extern int copy_SSM_TR_Session_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Session_SM_Utils;

/****************************************************************
 ** SSM_TR_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_TR_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_TR_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_TR_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_TR_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SM1 
 ****************************************************************/
extern int SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM1_double_conversion_allowed();
extern int SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM1_long_conversion_allowed();
extern int SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM1(void *pValue);
extern int release_SSM_TR_SM1(void *pValue);
extern int copy_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM17_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_SM3_Awakness_of_Train_SM1 
 ****************************************************************/
extern int SSM_TR_SM3_Awakness_of_Train_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM3_Awakness_of_Train_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM3_Awakness_of_Train_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM3_Awakness_of_Train_SM1_double_conversion_allowed();
extern int SSM_TR_SM3_Awakness_of_Train_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM3_Awakness_of_Train_SM1_long_conversion_allowed();
extern int SSM_TR_SM3_Awakness_of_Train_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM3_Awakness_of_Train_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM3_Awakness_of_Train_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM3_Awakness_of_Train_SM1(void *pValue);
extern int release_SSM_TR_SM3_Awakness_of_Train_SM1(void *pValue);
extern int copy_SSM_TR_SM3_Awakness_of_Train_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM3_Awakness_of_Train_SM1_Utils;

/****************************************************************
 ** SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM3_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_SM4_TSM_modeInterplay 
 ****************************************************************/
extern int SSM_TR_SM4_TSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM4_TSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM4_TSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM4_TSM_modeInterplay_double_conversion_allowed();
extern int SSM_TR_SM4_TSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM4_TSM_modeInterplay_long_conversion_allowed();
extern int SSM_TR_SM4_TSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM4_TSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM4_TSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM4_TSM_modeInterplay(void *pValue);
extern int release_SSM_TR_SM4_TSM_modeInterplay(void *pValue);
extern int copy_SSM_TR_SM4_TSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM4_TSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_TR_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_TR_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_TR_SM_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_TR_SM_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_TR_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_TR_SM_Start_L1_L2_L3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Start_L1_L2_L3_double_conversion_allowed();
extern int SSM_TR_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Start_L1_L2_L3_long_conversion_allowed();
extern int SSM_TR_SM_Start_L1_L2_L3_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Start_L1_L2_L3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Start_L1_L2_L3(void *pValue);
extern int release_SSM_TR_SM_Start_L1_L2_L3(void *pValue);
extern int copy_SSM_TR_SM_Start_L1_L2_L3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** SSM_TR_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_TR_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_TR_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_TR_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_TR_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_TR_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_TR_SM_Train_Reversing_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Reversing_double_conversion_allowed();
extern int SSM_TR_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Train_Reversing_long_conversion_allowed();
extern int SSM_TR_SM_Train_Reversing_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Train_Reversing_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Train_Reversing(void *pValue);
extern int release_SSM_TR_SM_Train_Reversing(void *pValue);
extern int copy_SSM_TR_SM_Train_Reversing(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Reversing_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Trip 
 ****************************************************************/
extern int SSM_TR_SM_Train_Trip_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Trip_double_conversion_allowed();
extern int SSM_TR_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Train_Trip_long_conversion_allowed();
extern int SSM_TR_SM_Train_Trip_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Train_Trip_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Train_Trip(void *pValue);
extern int release_SSM_TR_SM_Train_Trip(void *pValue);
extern int copy_SSM_TR_SM_Train_Trip(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SpeedSupervisionSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SymbolsAcknowledgmentSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_TimerStatus_SM 
 ****************************************************************/
extern int SSM_TR_TimerStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TimerStatus_SM_double_conversion_allowed();
extern int SSM_TR_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_TimerStatus_SM_long_conversion_allowed();
extern int SSM_TR_TimerStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_TimerStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_TimerStatus_SM(void *pValue);
extern int release_SSM_TR_TimerStatus_SM(void *pValue);
extern int copy_SSM_TR_TimerStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_TimerStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_TrainDataSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TrainExitedFromRBCArea_SM_double_conversion_allowed();
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_TrainExitedFromRBCArea_SM_long_conversion_allowed();
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_TrainExitedFromRBCArea_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_TrainExitedFromRBCArea_SM(void *pValue);
extern int release_SSM_TR_TrainExitedFromRBCArea_SM(void *pValue);
extern int copy_SSM_TR_TrainExitedFromRBCArea_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSM_TR_TRIP_AND_POST_TRIP_SM 
 ****************************************************************/
extern int SSM_TR_TRIP_AND_POST_TRIP_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_TRIP_AND_POST_TRIP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TRIP_AND_POST_TRIP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TRIP_AND_POST_TRIP_SM_double_conversion_allowed();
extern int SSM_TR_TRIP_AND_POST_TRIP_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_TRIP_AND_POST_TRIP_SM_long_conversion_allowed();
extern int SSM_TR_TRIP_AND_POST_TRIP_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_TRIP_AND_POST_TRIP_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_TRIP_AND_POST_TRIP_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_TRIP_AND_POST_TRIP_SM(void *pValue);
extern int release_SSM_TR_TRIP_AND_POST_TRIP_SM(void *pValue);
extern int copy_SSM_TR_TRIP_AND_POST_TRIP_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_TRIP_AND_POST_TRIP_SM_Utils;

/****************************************************************
 ** SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM 
 ****************************************************************/
extern int SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_double_conversion_allowed();
extern int SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_long_conversion_allowed();
extern int SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int release_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(void *pValue);
extern int copy_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_UNCONDITIONAL_EMERGENCY_STOP_SM_Utils;

/****************************************************************
 ** SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_WindowsSM_MainMenu_RequestSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM 
 ****************************************************************/
extern int SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_double_conversion_allowed();
extern int SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_long_conversion_allowed();
extern int SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int release_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pValue);
extern int copy_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_YesNoTrainDataValidationSM_CommunicationActive_HandshakeSM_DeskIsOpen_CabinSM_Utils;

/****************************************************************
 ** SSP_cat_t_TA_MRSP 
 ****************************************************************/
extern int SSP_cat_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_cat_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_cat_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_cat_t_TA_MRSP_double_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_cat_t_TA_MRSP_long_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_cat_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_cat_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_cat_t_TA_MRSP(void *pValue);
extern int release_SSP_cat_t_TA_MRSP(void *pValue);
extern int copy_SSP_cat_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_cat_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_cat_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_cat_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_cat_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_cat_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_cat_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_cat_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_cat_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_cat_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_cat_t_TA_MRSP_new(void *pValue);
extern int release_SSP_cat_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_cat_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_cat_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_matrix_t_TA_MRSP 
 ****************************************************************/
extern int SSP_matrix_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_matrix_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_matrix_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_matrix_t_TA_MRSP_double_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_matrix_t_TA_MRSP_long_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_matrix_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_matrix_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_matrix_t_TA_MRSP(void *pValue);
extern int release_SSP_matrix_t_TA_MRSP(void *pValue);
extern int copy_SSP_matrix_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_matrix_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_matrix_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_matrix_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_matrix_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_matrix_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_matrix_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_matrix_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_matrix_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_matrix_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_matrix_t_TA_MRSP_new(void *pValue);
extern int release_SSP_matrix_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_matrix_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_matrix_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_s_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_s_section_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_s_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_s_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_s_section_t_TA_MRSP_double_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_s_section_t_TA_MRSP_long_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_s_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_s_section_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_s_section_t_TA_MRSP(void *pValue);
extern int release_SSP_s_section_t_TA_MRSP(void *pValue);
extern int copy_SSP_s_section_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_s_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_s_section_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_s_section_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_s_section_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_s_section_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_s_section_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_s_section_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_s_section_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_s_section_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_s_section_t_TA_MRSP_new(void *pValue);
extern int release_SSP_s_section_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_s_section_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_s_section_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_section_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_section_t_TA_MRSP_double_conversion_allowed();
extern int SSP_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_section_t_TA_MRSP_long_conversion_allowed();
extern int SSP_section_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_section_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_section_t_TA_MRSP(void *pValue);
extern int release_SSP_section_t_TA_MRSP(void *pValue);
extern int copy_SSP_section_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_section_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_section_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_section_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_section_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_section_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_section_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_section_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_section_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_section_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_section_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_section_t_TA_MRSP_new(void *pValue);
extern int release_SSP_section_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_section_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_section_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSP_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSP_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSP_T_Packet_Types_Pkg_double_conversion_allowed();
extern int SSP_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SSP_T_Packet_Types_Pkg_long_conversion_allowed();
extern int SSP_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SSP_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_T_Packet_Types_Pkg(void *pValue);
extern int release_SSP_T_Packet_Types_Pkg(void *pValue);
extern int copy_SSP_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** SSP_t_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_t_section_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_t_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_t_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_t_section_t_TA_MRSP_double_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_t_section_t_TA_MRSP_long_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_t_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_t_section_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_t_section_t_TA_MRSP(void *pValue);
extern int release_SSP_t_section_t_TA_MRSP(void *pValue);
extern int copy_SSP_t_section_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_t_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_t_section_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_t_section_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_t_section_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_t_section_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_t_section_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_t_section_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_t_section_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_t_section_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_t_section_t_TA_MRSP_new(void *pValue);
extern int release_SSP_t_section_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_t_section_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_t_section_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSPArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSPArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSPArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSPArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSPArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int SSPArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SSPArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int SSPArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SSPArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSPArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSPArray_T_Packet_Types_Pkg(void *pValue);
extern int release_SSPArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_SSPArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSPArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** StaticSpeedProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_StaticSpeedProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedProfile_t_TrackAtlasTypes_double_conversion_allowed();
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_StaticSpeedProfile_t_TrackAtlasTypes_long_conversion_allowed();
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_StaticSpeedProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_StaticSpeedProfile_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_StaticSpeedProfile_t_TrackAtlasTypes(void *pValue);
extern int release_StaticSpeedProfile_t_TrackAtlasTypes(void *pValue);
extern int copy_StaticSpeedProfile_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_StaticSpeedProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** StaticSpeedSection_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedSection_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_StaticSpeedSection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedSection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedSection_t_TrackAtlasTypes_double_conversion_allowed();
extern int StaticSpeedSection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_StaticSpeedSection_t_TrackAtlasTypes_long_conversion_allowed();
extern int StaticSpeedSection_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_StaticSpeedSection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_StaticSpeedSection_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_StaticSpeedSection_t_TrackAtlasTypes(void *pValue);
extern int release_StaticSpeedSection_t_TrackAtlasTypes(void *pValue);
extern int copy_StaticSpeedSection_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_StaticSpeedSection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** sTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sTractionIdentity_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sTractionIdentity_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sTractionIdentity_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_sTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_sTractionIdentity_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** struct_485030 
 ****************************************************************/
extern int struct_485030_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_485030_string(const char *str, char **endptr);
extern int string_to_struct_485030(const char *str, void *pValue, char **endptr);
extern int is_struct_485030_double_conversion_allowed();
extern int struct_485030_to_double(const void *pValue, double *nValue);
extern int is_struct_485030_long_conversion_allowed();
extern int struct_485030_to_long(const void *pValue, long *nValue);
extern void compare_struct_485030(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_485030_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_485030(void *pValue);
extern int release_struct_485030(void *pValue);
extern int copy_struct_485030(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_485030_Utils;

/****************************************************************
 ** struct_485091 
 ****************************************************************/
extern int struct_485091_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_485091_string(const char *str, char **endptr);
extern int string_to_struct_485091(const char *str, void *pValue, char **endptr);
extern int is_struct_485091_double_conversion_allowed();
extern int struct_485091_to_double(const void *pValue, double *nValue);
extern int is_struct_485091_long_conversion_allowed();
extern int struct_485091_to_long(const void *pValue, long *nValue);
extern void compare_struct_485091(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_485091_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_485091(void *pValue);
extern int release_struct_485091(void *pValue);
extern int copy_struct_485091(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_485091_Utils;

/****************************************************************
 ** struct_485097 
 ****************************************************************/
extern int struct_485097_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_485097_string(const char *str, char **endptr);
extern int string_to_struct_485097(const char *str, void *pValue, char **endptr);
extern int is_struct_485097_double_conversion_allowed();
extern int struct_485097_to_double(const void *pValue, double *nValue);
extern int is_struct_485097_long_conversion_allowed();
extern int struct_485097_to_long(const void *pValue, long *nValue);
extern void compare_struct_485097(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_485097_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_485097(void *pValue);
extern int release_struct_485097(void *pValue);
extern int copy_struct_485097(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_485097_Utils;

/****************************************************************
 ** struct_485689 
 ****************************************************************/
extern int struct_485689_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_485689_string(const char *str, char **endptr);
extern int string_to_struct_485689(const char *str, void *pValue, char **endptr);
extern int is_struct_485689_double_conversion_allowed();
extern int struct_485689_to_double(const void *pValue, double *nValue);
extern int is_struct_485689_long_conversion_allowed();
extern int struct_485689_to_long(const void *pValue, long *nValue);
extern void compare_struct_485689(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_485689_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_485689(void *pValue);
extern int release_struct_485689(void *pValue);
extern int copy_struct_485689(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_485689_Utils;

/****************************************************************
 ** struct_486242 
 ****************************************************************/
extern int struct_486242_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_486242_string(const char *str, char **endptr);
extern int string_to_struct_486242(const char *str, void *pValue, char **endptr);
extern int is_struct_486242_double_conversion_allowed();
extern int struct_486242_to_double(const void *pValue, double *nValue);
extern int is_struct_486242_long_conversion_allowed();
extern int struct_486242_to_long(const void *pValue, long *nValue);
extern void compare_struct_486242(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_486242_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_486242(void *pValue);
extern int release_struct_486242(void *pValue);
extern int copy_struct_486242(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_486242_Utils;

/****************************************************************
 ** struct_486417 
 ****************************************************************/
extern int struct_486417_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_486417_string(const char *str, char **endptr);
extern int string_to_struct_486417(const char *str, void *pValue, char **endptr);
extern int is_struct_486417_double_conversion_allowed();
extern int struct_486417_to_double(const void *pValue, double *nValue);
extern int is_struct_486417_long_conversion_allowed();
extern int struct_486417_to_long(const void *pValue, long *nValue);
extern void compare_struct_486417(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_486417_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_486417(void *pValue);
extern int release_struct_486417(void *pValue);
extern int copy_struct_486417(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_486417_Utils;

/****************************************************************
 ** struct_486490 
 ****************************************************************/
extern int struct_486490_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_486490_string(const char *str, char **endptr);
extern int string_to_struct_486490(const char *str, void *pValue, char **endptr);
extern int is_struct_486490_double_conversion_allowed();
extern int struct_486490_to_double(const void *pValue, double *nValue);
extern int is_struct_486490_long_conversion_allowed();
extern int struct_486490_to_long(const void *pValue, long *nValue);
extern void compare_struct_486490(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_486490_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_486490(void *pValue);
extern int release_struct_486490(void *pValue);
extern int copy_struct_486490(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_486490_Utils;

/****************************************************************
 ** struct_486841 
 ****************************************************************/
extern int struct_486841_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_486841_string(const char *str, char **endptr);
extern int string_to_struct_486841(const char *str, void *pValue, char **endptr);
extern int is_struct_486841_double_conversion_allowed();
extern int struct_486841_to_double(const void *pValue, double *nValue);
extern int is_struct_486841_long_conversion_allowed();
extern int struct_486841_to_long(const void *pValue, long *nValue);
extern void compare_struct_486841(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_486841_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_486841(void *pValue);
extern int release_struct_486841(void *pValue);
extern int copy_struct_486841(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_486841_Utils;

/****************************************************************
 ** struct_487344 
 ****************************************************************/
extern int struct_487344_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_487344_string(const char *str, char **endptr);
extern int string_to_struct_487344(const char *str, void *pValue, char **endptr);
extern int is_struct_487344_double_conversion_allowed();
extern int struct_487344_to_double(const void *pValue, double *nValue);
extern int is_struct_487344_long_conversion_allowed();
extern int struct_487344_to_long(const void *pValue, long *nValue);
extern void compare_struct_487344(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_487344_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_487344(void *pValue);
extern int release_struct_487344(void *pValue);
extern int copy_struct_487344(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_487344_Utils;

/****************************************************************
 ** struct_487461 
 ****************************************************************/
extern int struct_487461_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_487461_string(const char *str, char **endptr);
extern int string_to_struct_487461(const char *str, void *pValue, char **endptr);
extern int is_struct_487461_double_conversion_allowed();
extern int struct_487461_to_double(const void *pValue, double *nValue);
extern int is_struct_487461_long_conversion_allowed();
extern int struct_487461_to_long(const void *pValue, long *nValue);
extern void compare_struct_487461(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_487461_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_487461(void *pValue);
extern int release_struct_487461(void *pValue);
extern int copy_struct_487461(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_487461_Utils;

/****************************************************************
 ** struct_487538 
 ****************************************************************/
extern int struct_487538_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_487538_string(const char *str, char **endptr);
extern int string_to_struct_487538(const char *str, void *pValue, char **endptr);
extern int is_struct_487538_double_conversion_allowed();
extern int struct_487538_to_double(const void *pValue, double *nValue);
extern int is_struct_487538_long_conversion_allowed();
extern int struct_487538_to_long(const void *pValue, long *nValue);
extern void compare_struct_487538(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_487538_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_487538(void *pValue);
extern int release_struct_487538(void *pValue);
extern int copy_struct_487538(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_487538_Utils;

/****************************************************************
 ** struct_487594 
 ****************************************************************/
extern int struct_487594_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_487594_string(const char *str, char **endptr);
extern int string_to_struct_487594(const char *str, void *pValue, char **endptr);
extern int is_struct_487594_double_conversion_allowed();
extern int struct_487594_to_double(const void *pValue, double *nValue);
extern int is_struct_487594_long_conversion_allowed();
extern int struct_487594_to_long(const void *pValue, long *nValue);
extern void compare_struct_487594(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_487594_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_487594(void *pValue);
extern int release_struct_487594(void *pValue);
extern int copy_struct_487594(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_487594_Utils;

/****************************************************************
 ** struct_488170 
 ****************************************************************/
extern int struct_488170_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_488170_string(const char *str, char **endptr);
extern int string_to_struct_488170(const char *str, void *pValue, char **endptr);
extern int is_struct_488170_double_conversion_allowed();
extern int struct_488170_to_double(const void *pValue, double *nValue);
extern int is_struct_488170_long_conversion_allowed();
extern int struct_488170_to_long(const void *pValue, long *nValue);
extern void compare_struct_488170(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_488170_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_488170(void *pValue);
extern int release_struct_488170(void *pValue);
extern int copy_struct_488170(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_488170_Utils;

/****************************************************************
 ** struct_488194 
 ****************************************************************/
extern int struct_488194_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_488194_string(const char *str, char **endptr);
extern int string_to_struct_488194(const char *str, void *pValue, char **endptr);
extern int is_struct_488194_double_conversion_allowed();
extern int struct_488194_to_double(const void *pValue, double *nValue);
extern int is_struct_488194_long_conversion_allowed();
extern int struct_488194_to_long(const void *pValue, long *nValue);
extern void compare_struct_488194(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_488194_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_488194(void *pValue);
extern int release_struct_488194(void *pValue);
extern int copy_struct_488194(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_488194_Utils;

/****************************************************************
 ** struct_488685 
 ****************************************************************/
extern int struct_488685_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_488685_string(const char *str, char **endptr);
extern int string_to_struct_488685(const char *str, void *pValue, char **endptr);
extern int is_struct_488685_double_conversion_allowed();
extern int struct_488685_to_double(const void *pValue, double *nValue);
extern int is_struct_488685_long_conversion_allowed();
extern int struct_488685_to_long(const void *pValue, long *nValue);
extern void compare_struct_488685(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_488685_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_488685(void *pValue);
extern int release_struct_488685(void *pValue);
extern int copy_struct_488685(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_488685_Utils;

/****************************************************************
 ** struct_488860 
 ****************************************************************/
extern int struct_488860_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_488860_string(const char *str, char **endptr);
extern int string_to_struct_488860(const char *str, void *pValue, char **endptr);
extern int is_struct_488860_double_conversion_allowed();
extern int struct_488860_to_double(const void *pValue, double *nValue);
extern int is_struct_488860_long_conversion_allowed();
extern int struct_488860_to_long(const void *pValue, long *nValue);
extern void compare_struct_488860(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_488860_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_488860(void *pValue);
extern int release_struct_488860(void *pValue);
extern int copy_struct_488860(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_488860_Utils;

/****************************************************************
 ** struct_489123 
 ****************************************************************/
extern int struct_489123_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_489123_string(const char *str, char **endptr);
extern int string_to_struct_489123(const char *str, void *pValue, char **endptr);
extern int is_struct_489123_double_conversion_allowed();
extern int struct_489123_to_double(const void *pValue, double *nValue);
extern int is_struct_489123_long_conversion_allowed();
extern int struct_489123_to_long(const void *pValue, long *nValue);
extern void compare_struct_489123(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_489123_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_489123(void *pValue);
extern int release_struct_489123(void *pValue);
extern int copy_struct_489123(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_489123_Utils;

/****************************************************************
 ** struct_491368 
 ****************************************************************/
extern int struct_491368_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_491368_string(const char *str, char **endptr);
extern int string_to_struct_491368(const char *str, void *pValue, char **endptr);
extern int is_struct_491368_double_conversion_allowed();
extern int struct_491368_to_double(const void *pValue, double *nValue);
extern int is_struct_491368_long_conversion_allowed();
extern int struct_491368_to_long(const void *pValue, long *nValue);
extern void compare_struct_491368(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_491368_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_491368(void *pValue);
extern int release_struct_491368(void *pValue);
extern int copy_struct_491368(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_491368_Utils;

/****************************************************************
 ** struct_491641 
 ****************************************************************/
extern int struct_491641_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_491641_string(const char *str, char **endptr);
extern int string_to_struct_491641(const char *str, void *pValue, char **endptr);
extern int is_struct_491641_double_conversion_allowed();
extern int struct_491641_to_double(const void *pValue, double *nValue);
extern int is_struct_491641_long_conversion_allowed();
extern int struct_491641_to_long(const void *pValue, long *nValue);
extern void compare_struct_491641(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_491641_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_491641(void *pValue);
extern int release_struct_491641(void *pValue);
extern int copy_struct_491641(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_491641_Utils;

/****************************************************************
 ** struct_491668 
 ****************************************************************/
extern int struct_491668_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_491668_string(const char *str, char **endptr);
extern int string_to_struct_491668(const char *str, void *pValue, char **endptr);
extern int is_struct_491668_double_conversion_allowed();
extern int struct_491668_to_double(const void *pValue, double *nValue);
extern int is_struct_491668_long_conversion_allowed();
extern int struct_491668_to_long(const void *pValue, long *nValue);
extern void compare_struct_491668(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_491668_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_491668(void *pValue);
extern int release_struct_491668(void *pValue);
extern int copy_struct_491668(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_491668_Utils;

/****************************************************************
 ** struct_491870 
 ****************************************************************/
extern int struct_491870_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_491870_string(const char *str, char **endptr);
extern int string_to_struct_491870(const char *str, void *pValue, char **endptr);
extern int is_struct_491870_double_conversion_allowed();
extern int struct_491870_to_double(const void *pValue, double *nValue);
extern int is_struct_491870_long_conversion_allowed();
extern int struct_491870_to_long(const void *pValue, long *nValue);
extern void compare_struct_491870(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_491870_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_491870(void *pValue);
extern int release_struct_491870(void *pValue);
extern int copy_struct_491870(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_491870_Utils;

/****************************************************************
 ** struct_492005 
 ****************************************************************/
extern int struct_492005_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_492005_string(const char *str, char **endptr);
extern int string_to_struct_492005(const char *str, void *pValue, char **endptr);
extern int is_struct_492005_double_conversion_allowed();
extern int struct_492005_to_double(const void *pValue, double *nValue);
extern int is_struct_492005_long_conversion_allowed();
extern int struct_492005_to_long(const void *pValue, long *nValue);
extern void compare_struct_492005(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_492005_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_492005(void *pValue);
extern int release_struct_492005(void *pValue);
extern int copy_struct_492005(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_492005_Utils;

/****************************************************************
 ** struct_492256 
 ****************************************************************/
extern int struct_492256_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_492256_string(const char *str, char **endptr);
extern int string_to_struct_492256(const char *str, void *pValue, char **endptr);
extern int is_struct_492256_double_conversion_allowed();
extern int struct_492256_to_double(const void *pValue, double *nValue);
extern int is_struct_492256_long_conversion_allowed();
extern int struct_492256_to_long(const void *pValue, long *nValue);
extern void compare_struct_492256(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_492256_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_492256(void *pValue);
extern int release_struct_492256(void *pValue);
extern int copy_struct_492256(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_492256_Utils;

/****************************************************************
 ** struct_492780 
 ****************************************************************/
extern int struct_492780_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_492780_string(const char *str, char **endptr);
extern int string_to_struct_492780(const char *str, void *pValue, char **endptr);
extern int is_struct_492780_double_conversion_allowed();
extern int struct_492780_to_double(const void *pValue, double *nValue);
extern int is_struct_492780_long_conversion_allowed();
extern int struct_492780_to_long(const void *pValue, long *nValue);
extern void compare_struct_492780(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_492780_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_492780(void *pValue);
extern int release_struct_492780(void *pValue);
extern int copy_struct_492780(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_492780_Utils;

/****************************************************************
 ** struct_493006 
 ****************************************************************/
extern int struct_493006_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_493006_string(const char *str, char **endptr);
extern int string_to_struct_493006(const char *str, void *pValue, char **endptr);
extern int is_struct_493006_double_conversion_allowed();
extern int struct_493006_to_double(const void *pValue, double *nValue);
extern int is_struct_493006_long_conversion_allowed();
extern int struct_493006_to_long(const void *pValue, long *nValue);
extern void compare_struct_493006(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_493006_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_493006(void *pValue);
extern int release_struct_493006(void *pValue);
extern int copy_struct_493006(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_493006_Utils;

/****************************************************************
 ** struct_493052 
 ****************************************************************/
extern int struct_493052_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_493052_string(const char *str, char **endptr);
extern int string_to_struct_493052(const char *str, void *pValue, char **endptr);
extern int is_struct_493052_double_conversion_allowed();
extern int struct_493052_to_double(const void *pValue, double *nValue);
extern int is_struct_493052_long_conversion_allowed();
extern int struct_493052_to_long(const void *pValue, long *nValue);
extern void compare_struct_493052(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_493052_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_493052(void *pValue);
extern int release_struct_493052(void *pValue);
extern int copy_struct_493052(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_493052_Utils;

/****************************************************************
 ** struct_493703 
 ****************************************************************/
extern int struct_493703_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_493703_string(const char *str, char **endptr);
extern int string_to_struct_493703(const char *str, void *pValue, char **endptr);
extern int is_struct_493703_double_conversion_allowed();
extern int struct_493703_to_double(const void *pValue, double *nValue);
extern int is_struct_493703_long_conversion_allowed();
extern int struct_493703_to_long(const void *pValue, long *nValue);
extern void compare_struct_493703(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_493703_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_493703(void *pValue);
extern int release_struct_493703(void *pValue);
extern int copy_struct_493703(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_493703_Utils;

/****************************************************************
 ** struct_493943 
 ****************************************************************/
extern int struct_493943_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_493943_string(const char *str, char **endptr);
extern int string_to_struct_493943(const char *str, void *pValue, char **endptr);
extern int is_struct_493943_double_conversion_allowed();
extern int struct_493943_to_double(const void *pValue, double *nValue);
extern int is_struct_493943_long_conversion_allowed();
extern int struct_493943_to_long(const void *pValue, long *nValue);
extern void compare_struct_493943(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_493943_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_493943(void *pValue);
extern int release_struct_493943(void *pValue);
extern int copy_struct_493943(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_493943_Utils;

/****************************************************************
 ** struct_494407 
 ****************************************************************/
extern int struct_494407_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_494407_string(const char *str, char **endptr);
extern int string_to_struct_494407(const char *str, void *pValue, char **endptr);
extern int is_struct_494407_double_conversion_allowed();
extern int struct_494407_to_double(const void *pValue, double *nValue);
extern int is_struct_494407_long_conversion_allowed();
extern int struct_494407_to_long(const void *pValue, long *nValue);
extern void compare_struct_494407(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_494407_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_494407(void *pValue);
extern int release_struct_494407(void *pValue);
extern int copy_struct_494407(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_494407_Utils;

/****************************************************************
 ** SupervisionStatus_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SupervisionStatus_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SupervisionStatus_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SupervisionStatus_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SupervisionStatus_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SupervisionStatus_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SupervisionStatus_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SupervisionStatus_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SupervisionStatus_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SupervisionStatus_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SupervisionStatus_T_SDM_Types_Pkg(void *pValue);
extern int release_SupervisionStatus_T_SDM_Types_Pkg(void *pValue);
extern int copy_SupervisionStatus_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SupervisionStatus_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SystemTime_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int SystemTime_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SystemTime_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_SystemTime_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SystemTime_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int SystemTime_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SystemTime_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int SystemTime_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SystemTime_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SystemTime_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SystemTime_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_SystemTime_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_SystemTime_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SystemTime_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** T_AcknoledgementRequest_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_AnnouncedLevel_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** t_Brake_t_SDMModelPkg 
 ****************************************************************/
extern int t_Brake_t_SDMModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_t_Brake_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_Brake_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_Brake_t_SDMModelPkg_double_conversion_allowed();
extern int t_Brake_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int is_t_Brake_t_SDMModelPkg_long_conversion_allowed();
extern int t_Brake_t_SDMModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_t_Brake_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_t_Brake_t_SDMModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_t_Brake_t_SDMModelPkg(void *pValue);
extern int release_t_Brake_t_SDMModelPkg(void *pValue);
extern int copy_t_Brake_t_SDMModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_t_Brake_t_SDMModelPkg_Utils;

/****************************************************************
 ** t_BrakeVt_t_SDMModelPkg 
 ****************************************************************/
extern int t_BrakeVt_t_SDMModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_t_BrakeVt_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_BrakeVt_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_BrakeVt_t_SDMModelPkg_double_conversion_allowed();
extern int t_BrakeVt_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int is_t_BrakeVt_t_SDMModelPkg_long_conversion_allowed();
extern int t_BrakeVt_t_SDMModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_t_BrakeVt_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_t_BrakeVt_t_SDMModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_t_BrakeVt_t_SDMModelPkg(void *pValue);
extern int release_t_BrakeVt_t_SDMModelPkg(void *pValue);
extern int copy_t_BrakeVt_t_SDMModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_t_BrakeVt_t_SDMModelPkg_Utils;

/****************************************************************
 ** T_CYCLOC 
 ****************************************************************/
extern int T_CYCLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_CYCLOC_string(const char *str, char **endptr);
extern int string_to_T_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_T_CYCLOC_double_conversion_allowed();
extern int T_CYCLOC_to_double(const void *pValue, double *nValue);
extern int is_T_CYCLOC_long_conversion_allowed();
extern int T_CYCLOC_to_long(const void *pValue, long *nValue);
extern void compare_T_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_CYCLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_CYCLOC(void *pValue);
extern int release_T_CYCLOC(void *pValue);
extern int copy_T_CYCLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_CYCLOC_Utils;

/****************************************************************
 ** T_CYCRQST 
 ****************************************************************/
extern int T_CYCRQST_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_CYCRQST_string(const char *str, char **endptr);
extern int string_to_T_CYCRQST(const char *str, void *pValue, char **endptr);
extern int is_T_CYCRQST_double_conversion_allowed();
extern int T_CYCRQST_to_double(const void *pValue, double *nValue);
extern int is_T_CYCRQST_long_conversion_allowed();
extern int T_CYCRQST_to_long(const void *pValue, long *nValue);
extern void compare_T_CYCRQST(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_CYCRQST_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_CYCRQST(void *pValue);
extern int release_T_CYCRQST(void *pValue);
extern int copy_T_CYCRQST(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_CYCRQST_Utils;

/****************************************************************
 ** T_Data_From_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_DMI_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_DMI_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_DMI_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_DMI_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_F2_functions_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Localisation_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_STM_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_STM_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_STM_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_STM_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_STM_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_STM_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_STM_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_STM_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_STM_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_STM_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_STM_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_BG_Management_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_To_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_DMI_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_To_DMI_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_To_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_To_DMI_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_To_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_To_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_To_DMI_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_To_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_ENDTIMER 
 ****************************************************************/
extern int T_ENDTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_T_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_ENDTIMER_double_conversion_allowed();
extern int T_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int is_T_ENDTIMER_long_conversion_allowed();
extern int T_ENDTIMER_to_long(const void *pValue, long *nValue);
extern void compare_T_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_ENDTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_ENDTIMER(void *pValue);
extern int release_T_ENDTIMER(void *pValue);
extern int copy_T_ENDTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_ENDTIMER_Utils;

/****************************************************************
 ** T_ERTMS_capabilities_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int T_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int T_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int T_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_T_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_T_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** T_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_T_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_T_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** T_LevelTansitionInfo_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LevelTransition_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_LevelTransition_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_LevelTransition_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LevelTransition_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LevelTransition_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_LevelTransition_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_LevelTransition_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LevelTransition_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LOA 
 ****************************************************************/
extern int T_LOA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LOA_string(const char *str, char **endptr);
extern int string_to_T_LOA(const char *str, void *pValue, char **endptr);
extern int is_T_LOA_double_conversion_allowed();
extern int T_LOA_to_double(const void *pValue, double *nValue);
extern int is_T_LOA_long_conversion_allowed();
extern int T_LOA_to_long(const void *pValue, long *nValue);
extern void compare_T_LOA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LOA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LOA(void *pValue);
extern int release_T_LOA(void *pValue);
extern int copy_T_LOA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LOA_Utils;

/****************************************************************
 ** T_MA_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_MA_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_MA_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_MA_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_MA_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_MA_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_MA_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_MA_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_MA_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_MA_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_MA_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_MA_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_MA_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_MA_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_MAR 
 ****************************************************************/
extern int T_MAR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_MAR_string(const char *str, char **endptr);
extern int string_to_T_MAR(const char *str, void *pValue, char **endptr);
extern int is_T_MAR_double_conversion_allowed();
extern int T_MAR_to_double(const void *pValue, double *nValue);
extern int is_T_MAR_long_conversion_allowed();
extern int T_MAR_to_long(const void *pValue, long *nValue);
extern void compare_T_MAR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_MAR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_MAR(void *pValue);
extern int release_T_MAR(void *pValue);
extern int copy_T_MAR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_MAR_Utils;

/****************************************************************
 ** T_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Level_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Level_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Level_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Profile_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Profile_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Profile_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Profile_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Profile_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Profile_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Profile_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Profile_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Table_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_NVCONTACT 
 ****************************************************************/
extern int T_NVCONTACT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_T_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_T_NVCONTACT_double_conversion_allowed();
extern int T_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int is_T_NVCONTACT_long_conversion_allowed();
extern int T_NVCONTACT_to_long(const void *pValue, long *nValue);
extern void compare_T_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_NVCONTACT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_NVCONTACT(void *pValue);
extern int release_T_NVCONTACT(void *pValue);
extern int copy_T_NVCONTACT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_NVCONTACT_Utils;

/****************************************************************
 ** T_NVOVTRP 
 ****************************************************************/
extern int T_NVOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_T_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_T_NVOVTRP_double_conversion_allowed();
extern int T_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int is_T_NVOVTRP_long_conversion_allowed();
extern int T_NVOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_T_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_NVOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_NVOVTRP(void *pValue);
extern int release_T_NVOVTRP(void *pValue);
extern int copy_T_NVOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_NVOVTRP_Utils;

/****************************************************************
 ** T_OL 
 ****************************************************************/
extern int T_OL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_OL_string(const char *str, char **endptr);
extern int string_to_T_OL(const char *str, void *pValue, char **endptr);
extern int is_T_OL_double_conversion_allowed();
extern int T_OL_to_double(const void *pValue, double *nValue);
extern int is_T_OL_long_conversion_allowed();
extern int T_OL_to_long(const void *pValue, long *nValue);
extern void compare_T_OL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_OL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_OL(void *pValue);
extern int release_T_OL(void *pValue);
extern int copy_T_OL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_OL_Utils;

/****************************************************************
 ** T_Reversing_Data_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Reversing_Data_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Reversing_Data_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Reversing_Data_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Reversing_Data_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Reversing_Data_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Reversing_Data_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Reversing_Data_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Reversing_Data_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Reversing_Data_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Reversing_Data_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_SECTIONTIMER 
 ****************************************************************/
extern int T_SECTIONTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_T_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_SECTIONTIMER_double_conversion_allowed();
extern int T_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int is_T_SECTIONTIMER_long_conversion_allowed();
extern int T_SECTIONTIMER_to_long(const void *pValue, long *nValue);
extern void compare_T_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_SECTIONTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_SECTIONTIMER(void *pValue);
extern int release_T_SECTIONTIMER(void *pValue);
extern int copy_T_SECTIONTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_SECTIONTIMER_Utils;

/****************************************************************
 ** T_TIMEOUTRQST 
 ****************************************************************/
extern int T_TIMEOUTRQST_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_TIMEOUTRQST_string(const char *str, char **endptr);
extern int string_to_T_TIMEOUTRQST(const char *str, void *pValue, char **endptr);
extern int is_T_TIMEOUTRQST_double_conversion_allowed();
extern int T_TIMEOUTRQST_to_double(const void *pValue, double *nValue);
extern int is_T_TIMEOUTRQST_long_conversion_allowed();
extern int T_TIMEOUTRQST_to_long(const void *pValue, long *nValue);
extern void compare_T_TIMEOUTRQST(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_TIMEOUTRQST_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_TIMEOUTRQST(void *pValue);
extern int release_T_TIMEOUTRQST(void *pValue);
extern int copy_T_TIMEOUTRQST(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_TIMEOUTRQST_Utils;

/****************************************************************
 ** T_trac_t_TargetLimits_Pkg 
 ****************************************************************/
extern int T_trac_t_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_trac_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_T_trac_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_trac_t_TargetLimits_Pkg_double_conversion_allowed();
extern int T_trac_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_trac_t_TargetLimits_Pkg_long_conversion_allowed();
extern int T_trac_t_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_trac_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_trac_t_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_trac_t_TargetLimits_Pkg(void *pValue);
extern int release_T_trac_t_TargetLimits_Pkg(void *pValue);
extern int copy_T_trac_t_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_trac_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** T_TRAIN 
 ****************************************************************/
extern int T_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_TRAIN_string(const char *str, char **endptr);
extern int string_to_T_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_T_TRAIN_double_conversion_allowed();
extern int T_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_T_TRAIN_long_conversion_allowed();
extern int T_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_T_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_TRAIN(void *pValue);
extern int release_T_TRAIN(void *pValue);
extern int copy_T_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_TRAIN_Utils;

/****************************************************************
 ** T_TransitionType_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_TransitionType_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_TransitionType_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_TransitionType_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_TransitionType_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_TransitionType_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_TransitionType_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_TransitionType_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_TransitionType_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_TransitionType_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_TransitionType_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** Target_list_MRSP_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_list_MRSP_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Target_list_MRSP_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_list_MRSP_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_list_MRSP_real_T_TargetManagement_types_double_conversion_allowed();
extern int Target_list_MRSP_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_Target_list_MRSP_real_T_TargetManagement_types_long_conversion_allowed();
extern int Target_list_MRSP_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_Target_list_MRSP_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Target_list_MRSP_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Target_list_MRSP_real_T_TargetManagement_types(void *pValue);
extern int release_Target_list_MRSP_real_T_TargetManagement_types(void *pValue);
extern int copy_Target_list_MRSP_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Target_list_MRSP_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Target_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_real_T_TargetManagement_types_double_conversion_allowed();
extern int Target_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_Target_real_T_TargetManagement_types_long_conversion_allowed();
extern int Target_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_Target_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Target_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Target_real_T_TargetManagement_types(void *pValue);
extern int release_Target_real_T_TargetManagement_types(void *pValue);
extern int copy_Target_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Target_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_T_TargetManagement_types 
 ****************************************************************/
extern int Target_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Target_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_T_TargetManagement_types_double_conversion_allowed();
extern int Target_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_Target_T_TargetManagement_types_long_conversion_allowed();
extern int Target_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_Target_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Target_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Target_T_TargetManagement_types(void *pValue);
extern int release_Target_T_TargetManagement_types(void *pValue);
extern int copy_Target_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Target_T_TargetManagement_types_Utils;

/****************************************************************
 ** TargetCollection_T_TargetManagement_types 
 ****************************************************************/
extern int TargetCollection_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TargetCollection_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetCollection_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetCollection_T_TargetManagement_types_double_conversion_allowed();
extern int TargetCollection_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_TargetCollection_T_TargetManagement_types_long_conversion_allowed();
extern int TargetCollection_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_TargetCollection_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TargetCollection_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TargetCollection_T_TargetManagement_types(void *pValue);
extern int release_TargetCollection_T_TargetManagement_types(void *pValue);
extern int copy_TargetCollection_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TargetCollection_T_TargetManagement_types_Utils;

/****************************************************************
 ** TargetIteratorAkku_TargetLimits_Pkg 
 ****************************************************************/
extern int TargetIteratorAkku_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TargetIteratorAkku_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TargetIteratorAkku_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TargetIteratorAkku_TargetLimits_Pkg_double_conversion_allowed();
extern int TargetIteratorAkku_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TargetIteratorAkku_TargetLimits_Pkg_long_conversion_allowed();
extern int TargetIteratorAkku_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TargetIteratorAkku_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TargetIteratorAkku_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TargetIteratorAkku_TargetLimits_Pkg(void *pValue);
extern int release_TargetIteratorAkku_TargetLimits_Pkg(void *pValue);
extern int copy_TargetIteratorAkku_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TargetIteratorAkku_TargetLimits_Pkg_Utils;

/****************************************************************
 ** TargetType_T_TargetManagement_types 
 ****************************************************************/
extern int TargetType_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TargetType_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetType_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetType_T_TargetManagement_types_double_conversion_allowed();
extern int TargetType_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_TargetType_T_TargetManagement_types_long_conversion_allowed();
extern int TargetType_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_TargetType_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TargetType_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TargetType_T_TargetManagement_types(void *pValue);
extern int release_TargetType_T_TargetManagement_types(void *pValue);
extern int copy_TargetType_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TargetType_T_TargetManagement_types_Utils;

/****************************************************************
 ** Telegram_T_BG_Types_Pkg 
 ****************************************************************/
extern int Telegram_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Telegram_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Telegram_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Telegram_T_BG_Types_Pkg_double_conversion_allowed();
extern int Telegram_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Telegram_T_BG_Types_Pkg_long_conversion_allowed();
extern int Telegram_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Telegram_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Telegram_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Telegram_T_BG_Types_Pkg(void *pValue);
extern int release_Telegram_T_BG_Types_Pkg(void *pValue);
extern int copy_Telegram_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Telegram_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramArray_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramArray_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TelegramArray_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramArray_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramArray_T_BG_Types_Pkg_double_conversion_allowed();
extern int TelegramArray_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TelegramArray_T_BG_Types_Pkg_long_conversion_allowed();
extern int TelegramArray_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TelegramArray_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TelegramArray_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TelegramArray_T_BG_Types_Pkg(void *pValue);
extern int release_TelegramArray_T_BG_Types_Pkg(void *pValue);
extern int copy_TelegramArray_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TelegramArray_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramHeader_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramHeader_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TelegramHeader_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramHeader_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramHeader_T_BG_Types_Pkg_double_conversion_allowed();
extern int TelegramHeader_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TelegramHeader_T_BG_Types_Pkg_long_conversion_allowed();
extern int TelegramHeader_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TelegramHeader_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TelegramHeader_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TelegramHeader_T_BG_Types_Pkg(void *pValue);
extern int release_TelegramHeader_T_BG_Types_Pkg(void *pValue);
extern int copy_TelegramHeader_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TelegramHeader_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramStore_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TelegramStore_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramStore_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramStore_T_Receive_TrackSide_Msg_Pkg_double_conversion_allowed();
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TelegramStore_T_Receive_TrackSide_Msg_Pkg_long_conversion_allowed();
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TelegramStore_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TelegramStore_T_Receive_TrackSide_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TelegramStore_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int release_TelegramStore_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int copy_TelegramStore_T_Receive_TrackSide_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TelegramStore_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** telephoneNumber_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_telephoneNumber_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_telephoneNumber_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_telephoneNumber_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_telephoneNumber_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_telephoneNumber_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_telephoneNumber_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_telephoneNumber_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_telephoneNumber_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_telephoneNumber_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_telephoneNumber_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** time_Type_MoRC_Pck 
 ****************************************************************/
extern int time_Type_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_time_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_time_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_time_Type_MoRC_Pck_double_conversion_allowed();
extern int time_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_time_Type_MoRC_Pck_long_conversion_allowed();
extern int time_Type_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_time_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_time_Type_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_time_Type_MoRC_Pck(void *pValue);
extern int release_time_Type_MoRC_Pck(void *pValue);
extern int copy_time_Type_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_time_Type_MoRC_Pck_Utils;

/****************************************************************
 ** TIU_commandStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_commandStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_commandStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_commandStatus_T_TIU_Types_Pkg_double_conversion_allowed();
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_commandStatus_T_TIU_Types_Pkg_long_conversion_allowed();
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_commandStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_commandStatus_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_commandStatus_T_TIU_Types_Pkg(void *pValue);
extern int release_TIU_commandStatus_T_TIU_Types_Pkg(void *pValue);
extern int copy_TIU_commandStatus_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_commandStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** TIU_Input_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Input_msg_API_TIU_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_Input_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Input_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Input_msg_API_TIU_Pkg_double_conversion_allowed();
extern int TIU_Input_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_Input_msg_API_TIU_Pkg_long_conversion_allowed();
extern int TIU_Input_msg_API_TIU_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_Input_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_Input_msg_API_TIU_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_Input_msg_API_TIU_Pkg(void *pValue);
extern int release_TIU_Input_msg_API_TIU_Pkg(void *pValue);
extern int copy_TIU_Input_msg_API_TIU_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_Input_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** TIU_Output_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Output_msg_API_TIU_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_Output_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Output_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Output_msg_API_TIU_Pkg_double_conversion_allowed();
extern int TIU_Output_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_Output_msg_API_TIU_Pkg_long_conversion_allowed();
extern int TIU_Output_msg_API_TIU_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_Output_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_Output_msg_API_TIU_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_Output_msg_API_TIU_Pkg(void *pValue);
extern int release_TIU_Output_msg_API_TIU_Pkg(void *pValue);
extern int copy_TIU_Output_msg_API_TIU_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_Output_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** TIU_trainStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_trainStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_trainStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_trainStatus_T_TIU_Types_Pkg_double_conversion_allowed();
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_trainStatus_T_TIU_Types_Pkg_long_conversion_allowed();
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_trainStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_trainStatus_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_trainStatus_T_TIU_Types_Pkg(void *pValue);
extern int release_TIU_trainStatus_T_TIU_Types_Pkg(void *pValue);
extern int copy_TIU_trainStatus_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_trainStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** tPASP_Array 
 ****************************************************************/
extern int tPASP_Array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_tPASP_Array_string(const char *str, char **endptr);
extern int string_to_tPASP_Array(const char *str, void *pValue, char **endptr);
extern int is_tPASP_Array_double_conversion_allowed();
extern int tPASP_Array_to_double(const void *pValue, double *nValue);
extern int is_tPASP_Array_long_conversion_allowed();
extern int tPASP_Array_to_long(const void *pValue, long *nValue);
extern void compare_tPASP_Array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_tPASP_Array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_tPASP_Array(void *pValue);
extern int release_tPASP_Array(void *pValue);
extern int copy_tPASP_Array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_tPASP_Array_Utils;

/****************************************************************
 ** tPASPOutput_Array 
 ****************************************************************/
extern int tPASPOutput_Array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_tPASPOutput_Array_string(const char *str, char **endptr);
extern int string_to_tPASPOutput_Array(const char *str, void *pValue, char **endptr);
extern int is_tPASPOutput_Array_double_conversion_allowed();
extern int tPASPOutput_Array_to_double(const void *pValue, double *nValue);
extern int is_tPASPOutput_Array_long_conversion_allowed();
extern int tPASPOutput_Array_to_long(const void *pValue, long *nValue);
extern void compare_tPASPOutput_Array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_tPASPOutput_Array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_tPASPOutput_Array(void *pValue);
extern int release_tPASPOutput_Array(void *pValue);
extern int copy_tPASPOutput_Array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_tPASPOutput_Array_Utils;

/****************************************************************
 ** TrackSectionData_T_InfraLib 
 ****************************************************************/
extern int TrackSectionData_T_InfraLib_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrackSectionData_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_TrackSectionData_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_TrackSectionData_T_InfraLib_double_conversion_allowed();
extern int TrackSectionData_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int is_TrackSectionData_T_InfraLib_long_conversion_allowed();
extern int TrackSectionData_T_InfraLib_to_long(const void *pValue, long *nValue);
extern void compare_TrackSectionData_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrackSectionData_T_InfraLib_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrackSectionData_T_InfraLib(void *pValue);
extern int release_TrackSectionData_T_InfraLib(void *pValue);
extern int copy_TrackSectionData_T_InfraLib(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrackSectionData_T_InfraLib_Utils;

/****************************************************************
 ** TrackSide_ForCheck_T_Common_Types_Pkg 
 ****************************************************************/
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrackSide_ForCheck_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrackSide_ForCheck_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrackSide_ForCheck_T_Common_Types_Pkg_double_conversion_allowed();
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TrackSide_ForCheck_T_Common_Types_Pkg_long_conversion_allowed();
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TrackSide_ForCheck_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrackSide_ForCheck_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrackSide_ForCheck_T_Common_Types_Pkg(void *pValue);
extern int release_TrackSide_ForCheck_T_Common_Types_Pkg(void *pValue);
extern int copy_TrackSide_ForCheck_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrackSide_ForCheck_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** TrackType_US_Integration_November 
 ****************************************************************/
extern int TrackType_US_Integration_November_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrackType_US_Integration_November_string(const char *str, char **endptr);
extern int string_to_TrackType_US_Integration_November(const char *str, void *pValue, char **endptr);
extern int is_TrackType_US_Integration_November_double_conversion_allowed();
extern int TrackType_US_Integration_November_to_double(const void *pValue, double *nValue);
extern int is_TrackType_US_Integration_November_long_conversion_allowed();
extern int TrackType_US_Integration_November_to_long(const void *pValue, long *nValue);
extern void compare_TrackType_US_Integration_November(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrackType_US_Integration_November_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrackType_US_Integration_November(void *pValue);
extern int release_TrackType_US_Integration_November(void *pValue);
extern int copy_TrackType_US_Integration_November(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrackType_US_Integration_November_Utils;

/****************************************************************
 ** TractionDeltaTriple_TargetLimits_Pkg 
 ****************************************************************/
extern int TractionDeltaTriple_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TractionDeltaTriple_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TractionDeltaTriple_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TractionDeltaTriple_TargetLimits_Pkg_double_conversion_allowed();
extern int TractionDeltaTriple_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TractionDeltaTriple_TargetLimits_Pkg_long_conversion_allowed();
extern int TractionDeltaTriple_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TractionDeltaTriple_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TractionDeltaTriple_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TractionDeltaTriple_TargetLimits_Pkg(void *pValue);
extern int release_TractionDeltaTriple_TargetLimits_Pkg(void *pValue);
extern int copy_TractionDeltaTriple_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TractionDeltaTriple_TargetLimits_Pkg_Utils;

/****************************************************************
 ** trainData_Events_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Events_T_trainData_Types_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_Events_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Events_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Events_T_trainData_Types_pkg_double_conversion_allowed();
extern int trainData_Events_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_Events_T_trainData_Types_pkg_long_conversion_allowed();
extern int trainData_Events_T_trainData_Types_pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_Events_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_Events_T_trainData_Types_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_Events_T_trainData_Types_pkg(void *pValue);
extern int release_trainData_Events_T_trainData_Types_pkg(void *pValue);
extern int copy_trainData_Events_T_trainData_Types_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_Events_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainData_internal_t_SDM_Types_Pkg 
 ****************************************************************/
extern int trainData_internal_t_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_internal_t_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_internal_t_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_internal_t_SDM_Types_Pkg_double_conversion_allowed();
extern int trainData_internal_t_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_internal_t_SDM_Types_Pkg_long_conversion_allowed();
extern int trainData_internal_t_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_internal_t_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_internal_t_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_internal_t_SDM_Types_Pkg(void *pValue);
extern int release_trainData_internal_t_SDM_Types_Pkg(void *pValue);
extern int copy_trainData_internal_t_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_internal_t_SDM_Types_Pkg_Utils;

/****************************************************************
 ** TrainData_T 
 ****************************************************************/
extern int TrainData_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrainData_T_string(const char *str, char **endptr);
extern int string_to_TrainData_T(const char *str, void *pValue, char **endptr);
extern int is_TrainData_T_double_conversion_allowed();
extern int TrainData_T_to_double(const void *pValue, double *nValue);
extern int is_TrainData_T_long_conversion_allowed();
extern int TrainData_T_to_long(const void *pValue, long *nValue);
extern void compare_TrainData_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrainData_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrainData_T(void *pValue);
extern int release_TrainData_T(void *pValue);
extern int copy_TrainData_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrainData_T_Utils;

/****************************************************************
 ** trainData_T_TIU_Types_Pkg 
 ****************************************************************/
extern int trainData_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_T_TIU_Types_Pkg_double_conversion_allowed();
extern int trainData_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_T_TIU_Types_Pkg_long_conversion_allowed();
extern int trainData_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_T_TIU_Types_Pkg(void *pValue);
extern int release_trainData_T_TIU_Types_Pkg(void *pValue);
extern int copy_trainData_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** trainData_Trigger_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Trigger_T_trainData_Types_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_Trigger_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Trigger_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Trigger_T_trainData_Types_pkg_double_conversion_allowed();
extern int trainData_Trigger_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_Trigger_T_trainData_Types_pkg_long_conversion_allowed();
extern int trainData_Trigger_T_trainData_Types_pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_Trigger_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_Trigger_T_trainData_Types_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_Trigger_T_trainData_Types_pkg(void *pValue);
extern int release_trainData_Trigger_T_trainData_Types_pkg(void *pValue);
extern int copy_trainData_Trigger_T_trainData_Types_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_Trigger_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainDataStatus_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainDataStatus_T_trainData_Types_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainDataStatus_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainDataStatus_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainDataStatus_T_trainData_Types_pkg_double_conversion_allowed();
extern int trainDataStatus_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int is_trainDataStatus_T_trainData_Types_pkg_long_conversion_allowed();
extern int trainDataStatus_T_trainData_Types_pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainDataStatus_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainDataStatus_T_trainData_Types_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainDataStatus_T_trainData_Types_pkg(void *pValue);
extern int release_trainDataStatus_T_trainData_Types_pkg(void *pValue);
extern int copy_trainDataStatus_T_trainData_Types_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainDataStatus_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** TrainLocations_real_T_SDM_Types_Pkg 
 ****************************************************************/
extern int TrainLocations_real_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrainLocations_real_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainLocations_real_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainLocations_real_T_SDM_Types_Pkg_double_conversion_allowed();
extern int TrainLocations_real_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TrainLocations_real_T_SDM_Types_Pkg_long_conversion_allowed();
extern int TrainLocations_real_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TrainLocations_real_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrainLocations_real_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrainLocations_real_T_SDM_Types_Pkg(void *pValue);
extern int release_TrainLocations_real_T_SDM_Types_Pkg(void *pValue);
extern int copy_TrainLocations_real_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrainLocations_real_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** trainPosition_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPosition_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainPosition_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPosition_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPosition_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int trainPosition_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_trainPosition_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int trainPosition_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_trainPosition_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainPosition_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainPosition_T_TrainPosition_Types_Pck(void *pValue);
extern int release_trainPosition_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_trainPosition_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainPosition_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** trainPositionInfo_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainPositionInfo_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPositionInfo_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPositionInfo_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_trainPositionInfo_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_trainPositionInfo_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainPositionInfo_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainPositionInfo_T_TrainPosition_Types_Pck(void *pValue);
extern int release_trainPositionInfo_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_trainPositionInfo_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainPositionInfo_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** TrainPosRaw_T_InfraLib 
 ****************************************************************/
extern int TrainPosRaw_T_InfraLib_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrainPosRaw_T_InfraLib_string(const char *str, char **endptr);
extern int string_to_TrainPosRaw_T_InfraLib(const char *str, void *pValue, char **endptr);
extern int is_TrainPosRaw_T_InfraLib_double_conversion_allowed();
extern int TrainPosRaw_T_InfraLib_to_double(const void *pValue, double *nValue);
extern int is_TrainPosRaw_T_InfraLib_long_conversion_allowed();
extern int TrainPosRaw_T_InfraLib_to_long(const void *pValue, long *nValue);
extern void compare_TrainPosRaw_T_InfraLib(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrainPosRaw_T_InfraLib_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrainPosRaw_T_InfraLib(void *pValue);
extern int release_TrainPosRaw_T_InfraLib(void *pValue);
extern int copy_TrainPosRaw_T_InfraLib(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrainPosRaw_T_InfraLib_Utils;

/****************************************************************
 ** trainProperties_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainProperties_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainProperties_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainProperties_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainProperties_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int trainProperties_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_trainProperties_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int trainProperties_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_trainProperties_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainProperties_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainProperties_T_TrainPosition_Types_Pck(void *pValue);
extern int release_trainProperties_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_trainProperties_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainProperties_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** TrainToTrackStatus_T_BG_Types_Pkg 
 ****************************************************************/
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrainToTrackStatus_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainToTrackStatus_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainToTrackStatus_T_BG_Types_Pkg_double_conversion_allowed();
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TrainToTrackStatus_T_BG_Types_Pkg_long_conversion_allowed();
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TrainToTrackStatus_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrainToTrackStatus_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrainToTrackStatus_T_BG_Types_Pkg(void *pValue);
extern int release_TrainToTrackStatus_T_BG_Types_Pkg(void *pValue);
extern int copy_TrainToTrackStatus_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrainToTrackStatus_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TransitionBuffer_T_InformationFilter_Pkg 
 ****************************************************************/
extern int TransitionBuffer_T_InformationFilter_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TransitionBuffer_T_InformationFilter_Pkg_string(const char *str, char **endptr);
extern int string_to_TransitionBuffer_T_InformationFilter_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TransitionBuffer_T_InformationFilter_Pkg_double_conversion_allowed();
extern int TransitionBuffer_T_InformationFilter_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TransitionBuffer_T_InformationFilter_Pkg_long_conversion_allowed();
extern int TransitionBuffer_T_InformationFilter_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TransitionBuffer_T_InformationFilter_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TransitionBuffer_T_InformationFilter_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TransitionBuffer_T_InformationFilter_Pkg(void *pValue);
extern int release_TransitionBuffer_T_InformationFilter_Pkg(void *pValue);
extern int copy_TransitionBuffer_T_InformationFilter_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TransitionBuffer_T_InformationFilter_Pkg_Utils;

/****************************************************************
 ** tScale 
 ****************************************************************/
extern int tScale_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_tScale_string(const char *str, char **endptr);
extern int string_to_tScale(const char *str, void *pValue, char **endptr);
extern int is_tScale_double_conversion_allowed();
extern int tScale_to_double(const void *pValue, double *nValue);
extern int is_tScale_long_conversion_allowed();
extern int tScale_to_long(const void *pValue, long *nValue);
extern void compare_tScale(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_tScale_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_tScale(void *pValue);
extern int release_tScale(void *pValue);
extern int copy_tScale(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_tScale_Utils;

/****************************************************************
 ** TSM_revokeCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TSM_revokeCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_revokeCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_revokeCond_T_SDM_Commands_Pkg_double_conversion_allowed();
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TSM_revokeCond_T_SDM_Commands_Pkg_long_conversion_allowed();
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TSM_revokeCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TSM_revokeCond_T_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TSM_revokeCond_T_SDM_Commands_Pkg(void *pValue);
extern int release_TSM_revokeCond_T_SDM_Commands_Pkg(void *pValue);
extern int copy_TSM_revokeCond_T_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TSM_revokeCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** TSM_triggerCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TSM_triggerCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_triggerCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_triggerCond_T_SDM_Commands_Pkg_double_conversion_allowed();
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TSM_triggerCond_T_SDM_Commands_Pkg_long_conversion_allowed();
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TSM_triggerCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TSM_triggerCond_T_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TSM_triggerCond_T_SDM_Commands_Pkg(void *pValue);
extern int release_TSM_triggerCond_T_SDM_Commands_Pkg(void *pValue);
extern int copy_TSM_triggerCond_T_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TSM_triggerCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** tSpeedPoints 
 ****************************************************************/
extern int tSpeedPoints_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_tSpeedPoints_string(const char *str, char **endptr);
extern int string_to_tSpeedPoints(const char *str, void *pValue, char **endptr);
extern int is_tSpeedPoints_double_conversion_allowed();
extern int tSpeedPoints_to_double(const void *pValue, double *nValue);
extern int is_tSpeedPoints_long_conversion_allowed();
extern int tSpeedPoints_to_long(const void *pValue, long *nValue);
extern void compare_tSpeedPoints(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_tSpeedPoints_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_tSpeedPoints(void *pValue);
extern int release_tSpeedPoints(void *pValue);
extern int copy_tSpeedPoints(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_tSpeedPoints_Utils;

/****************************************************************
 ** Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(void *pValue);
extern int release_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(void *pValue);
extern int copy_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Type_I_train_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Type_I_train_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_commands_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Type_I_train_commands_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Type_I_train_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Type_I_train_commands_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Type_I_train_commands_T_TIU_Types_Pkg(void *pValue);
extern int release_Type_I_train_commands_T_TIU_Types_Pkg(void *pValue);
extern int copy_Type_I_train_commands_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Type_I_train_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** V5 
 ****************************************************************/
extern int V5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V5_string(const char *str, char **endptr);
extern int string_to_V5(const char *str, void *pValue, char **endptr);
extern int is_V5_double_conversion_allowed();
extern int V5_to_double(const void *pValue, double *nValue);
extern int is_V5_long_conversion_allowed();
extern int V5_to_long(const void *pValue, long *nValue);
extern void compare_V5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V5(void *pValue);
extern int release_V5(void *pValue);
extern int copy_V5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V5_Utils;

/****************************************************************
 ** v_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_v_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_BrakeSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_v_BrakeSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_v_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_v_BrakeSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_v_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_v_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_v_BrakeSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_v_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** V_DIFF 
 ****************************************************************/
extern int V_DIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_DIFF_string(const char *str, char **endptr);
extern int string_to_V_DIFF(const char *str, void *pValue, char **endptr);
extern int is_V_DIFF_double_conversion_allowed();
extern int V_DIFF_to_double(const void *pValue, double *nValue);
extern int is_V_DIFF_long_conversion_allowed();
extern int V_DIFF_to_long(const void *pValue, long *nValue);
extern void compare_V_DIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_DIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_DIFF(void *pValue);
extern int release_V_DIFF(void *pValue);
extern int copy_V_DIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_DIFF_Utils;

/****************************************************************
 ** V_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int V_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int V_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_V_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int V_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_V_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_V_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_V_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** V_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_V_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_V_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_V_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_V_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** v_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_v_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_KvSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int v_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_v_KvSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int v_KvSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_v_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_v_KvSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_v_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_v_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_v_KvSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_v_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** V_LOA 
 ****************************************************************/
extern int V_LOA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_LOA_string(const char *str, char **endptr);
extern int string_to_V_LOA(const char *str, void *pValue, char **endptr);
extern int is_V_LOA_double_conversion_allowed();
extern int V_LOA_to_double(const void *pValue, double *nValue);
extern int is_V_LOA_long_conversion_allowed();
extern int V_LOA_to_long(const void *pValue, long *nValue);
extern void compare_V_LOA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_LOA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_LOA(void *pValue);
extern int release_V_LOA(void *pValue);
extern int copy_V_LOA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_LOA_Utils;

/****************************************************************
 ** V_MAIN 
 ****************************************************************/
extern int V_MAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_MAIN_string(const char *str, char **endptr);
extern int string_to_V_MAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAIN_double_conversion_allowed();
extern int V_MAIN_to_double(const void *pValue, double *nValue);
extern int is_V_MAIN_long_conversion_allowed();
extern int V_MAIN_to_long(const void *pValue, long *nValue);
extern void compare_V_MAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_MAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_MAIN(void *pValue);
extern int release_V_MAIN(void *pValue);
extern int copy_V_MAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_MAIN_Utils;

/****************************************************************
 ** V_MAMODE 
 ****************************************************************/
extern int V_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_MAMODE_string(const char *str, char **endptr);
extern int string_to_V_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_V_MAMODE_double_conversion_allowed();
extern int V_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_V_MAMODE_long_conversion_allowed();
extern int V_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_V_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_MAMODE(void *pValue);
extern int release_V_MAMODE(void *pValue);
extern int copy_V_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_MAMODE_Utils;

/****************************************************************
 ** V_MAXTRAIN 
 ****************************************************************/
extern int V_MAXTRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_MAXTRAIN_string(const char *str, char **endptr);
extern int string_to_V_MAXTRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAXTRAIN_double_conversion_allowed();
extern int V_MAXTRAIN_to_double(const void *pValue, double *nValue);
extern int is_V_MAXTRAIN_long_conversion_allowed();
extern int V_MAXTRAIN_to_long(const void *pValue, long *nValue);
extern void compare_V_MAXTRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_MAXTRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_MAXTRAIN(void *pValue);
extern int release_V_MAXTRAIN(void *pValue);
extern int copy_V_MAXTRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_MAXTRAIN_Utils;

/****************************************************************
 ** v_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_v_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_MergedSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int v_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_v_MergedSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int v_MergedSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_v_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_v_MergedSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_v_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_v_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_v_MergedSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_v_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** V_NVALLOWOVTRP 
 ****************************************************************/
extern int V_NVALLOWOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVALLOWOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVALLOWOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVALLOWOVTRP_double_conversion_allowed();
extern int V_NVALLOWOVTRP_to_double(const void *pValue, double *nValue);
extern int is_V_NVALLOWOVTRP_long_conversion_allowed();
extern int V_NVALLOWOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_V_NVALLOWOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVALLOWOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVALLOWOVTRP(void *pValue);
extern int release_V_NVALLOWOVTRP(void *pValue);
extern int copy_V_NVALLOWOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVALLOWOVTRP_Utils;

/****************************************************************
 ** V_NVKVINT 
 ****************************************************************/
extern int V_NVKVINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVKVINT_string(const char *str, char **endptr);
extern int string_to_V_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_V_NVKVINT_double_conversion_allowed();
extern int V_NVKVINT_to_double(const void *pValue, double *nValue);
extern int is_V_NVKVINT_long_conversion_allowed();
extern int V_NVKVINT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVKVINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVKVINT(void *pValue);
extern int release_V_NVKVINT(void *pValue);
extern int copy_V_NVKVINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVKVINT_Utils;

/****************************************************************
 ** V_NVLIMSUPERV 
 ****************************************************************/
extern int V_NVLIMSUPERV_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVLIMSUPERV_string(const char *str, char **endptr);
extern int string_to_V_NVLIMSUPERV(const char *str, void *pValue, char **endptr);
extern int is_V_NVLIMSUPERV_double_conversion_allowed();
extern int V_NVLIMSUPERV_to_double(const void *pValue, double *nValue);
extern int is_V_NVLIMSUPERV_long_conversion_allowed();
extern int V_NVLIMSUPERV_to_long(const void *pValue, long *nValue);
extern void compare_V_NVLIMSUPERV(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVLIMSUPERV_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVLIMSUPERV(void *pValue);
extern int release_V_NVLIMSUPERV(void *pValue);
extern int copy_V_NVLIMSUPERV(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVLIMSUPERV_Utils;

/****************************************************************
 ** V_NVONSIGHT 
 ****************************************************************/
extern int V_NVONSIGHT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVONSIGHT_string(const char *str, char **endptr);
extern int string_to_V_NVONSIGHT(const char *str, void *pValue, char **endptr);
extern int is_V_NVONSIGHT_double_conversion_allowed();
extern int V_NVONSIGHT_to_double(const void *pValue, double *nValue);
extern int is_V_NVONSIGHT_long_conversion_allowed();
extern int V_NVONSIGHT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVONSIGHT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVONSIGHT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVONSIGHT(void *pValue);
extern int release_V_NVONSIGHT(void *pValue);
extern int copy_V_NVONSIGHT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVONSIGHT_Utils;

/****************************************************************
 ** V_NVREL 
 ****************************************************************/
extern int V_NVREL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVREL_string(const char *str, char **endptr);
extern int string_to_V_NVREL(const char *str, void *pValue, char **endptr);
extern int is_V_NVREL_double_conversion_allowed();
extern int V_NVREL_to_double(const void *pValue, double *nValue);
extern int is_V_NVREL_long_conversion_allowed();
extern int V_NVREL_to_long(const void *pValue, long *nValue);
extern void compare_V_NVREL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVREL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVREL(void *pValue);
extern int release_V_NVREL(void *pValue);
extern int copy_V_NVREL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVREL_Utils;

/****************************************************************
 ** V_NVSHUNT 
 ****************************************************************/
extern int V_NVSHUNT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVSHUNT_string(const char *str, char **endptr);
extern int string_to_V_NVSHUNT(const char *str, void *pValue, char **endptr);
extern int is_V_NVSHUNT_double_conversion_allowed();
extern int V_NVSHUNT_to_double(const void *pValue, double *nValue);
extern int is_V_NVSHUNT_long_conversion_allowed();
extern int V_NVSHUNT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVSHUNT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVSHUNT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVSHUNT(void *pValue);
extern int release_V_NVSHUNT(void *pValue);
extern int copy_V_NVSHUNT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVSHUNT_Utils;

/****************************************************************
 ** V_NVSTFF 
 ****************************************************************/
extern int V_NVSTFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVSTFF_string(const char *str, char **endptr);
extern int string_to_V_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_V_NVSTFF_double_conversion_allowed();
extern int V_NVSTFF_to_double(const void *pValue, double *nValue);
extern int is_V_NVSTFF_long_conversion_allowed();
extern int V_NVSTFF_to_long(const void *pValue, long *nValue);
extern void compare_V_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVSTFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVSTFF(void *pValue);
extern int release_V_NVSTFF(void *pValue);
extern int copy_V_NVSTFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVSTFF_Utils;

/****************************************************************
 ** V_NVSUPOVTRP 
 ****************************************************************/
extern int V_NVSUPOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVSUPOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVSUPOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVSUPOVTRP_double_conversion_allowed();
extern int V_NVSUPOVTRP_to_double(const void *pValue, double *nValue);
extern int is_V_NVSUPOVTRP_long_conversion_allowed();
extern int V_NVSUPOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_V_NVSUPOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVSUPOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVSUPOVTRP(void *pValue);
extern int release_V_NVSUPOVTRP(void *pValue);
extern int copy_V_NVSUPOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVSUPOVTRP_Utils;

/****************************************************************
 ** V_NVUNFIT 
 ****************************************************************/
extern int V_NVUNFIT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVUNFIT_string(const char *str, char **endptr);
extern int string_to_V_NVUNFIT(const char *str, void *pValue, char **endptr);
extern int is_V_NVUNFIT_double_conversion_allowed();
extern int V_NVUNFIT_to_double(const void *pValue, double *nValue);
extern int is_V_NVUNFIT_long_conversion_allowed();
extern int V_NVUNFIT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVUNFIT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVUNFIT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVUNFIT(void *pValue);
extern int release_V_NVUNFIT(void *pValue);
extern int copy_V_NVUNFIT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVUNFIT_Utils;

/****************************************************************
 ** V_odometry_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_odometry_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_odometry_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_odometry_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_V_odometry_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_V_odometry_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_odometry_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_odometry_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_V_odometry_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_V_odometry_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_odometry_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** V_RELEASEDP 
 ****************************************************************/
extern int V_RELEASEDP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_RELEASEDP_string(const char *str, char **endptr);
extern int string_to_V_RELEASEDP(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEDP_double_conversion_allowed();
extern int V_RELEASEDP_to_double(const void *pValue, double *nValue);
extern int is_V_RELEASEDP_long_conversion_allowed();
extern int V_RELEASEDP_to_long(const void *pValue, long *nValue);
extern void compare_V_RELEASEDP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_RELEASEDP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_RELEASEDP(void *pValue);
extern int release_V_RELEASEDP(void *pValue);
extern int copy_V_RELEASEDP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_RELEASEDP_Utils;

/****************************************************************
 ** V_RELEASEOL 
 ****************************************************************/
extern int V_RELEASEOL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_RELEASEOL_string(const char *str, char **endptr);
extern int string_to_V_RELEASEOL(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEOL_double_conversion_allowed();
extern int V_RELEASEOL_to_double(const void *pValue, double *nValue);
extern int is_V_RELEASEOL_long_conversion_allowed();
extern int V_RELEASEOL_to_long(const void *pValue, long *nValue);
extern void compare_V_RELEASEOL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_RELEASEOL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_RELEASEOL(void *pValue);
extern int release_V_RELEASEOL(void *pValue);
extern int copy_V_RELEASEOL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_RELEASEOL_Utils;

/****************************************************************
 ** V_REVERSE 
 ****************************************************************/
extern int V_REVERSE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_REVERSE_string(const char *str, char **endptr);
extern int string_to_V_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_V_REVERSE_double_conversion_allowed();
extern int V_REVERSE_to_double(const void *pValue, double *nValue);
extern int is_V_REVERSE_long_conversion_allowed();
extern int V_REVERSE_to_long(const void *pValue, long *nValue);
extern void compare_V_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_REVERSE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_REVERSE(void *pValue);
extern int release_V_REVERSE(void *pValue);
extern int copy_V_REVERSE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_REVERSE_Utils;

/****************************************************************
 ** V_STATIC 
 ****************************************************************/
extern int V_STATIC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_STATIC_string(const char *str, char **endptr);
extern int string_to_V_STATIC(const char *str, void *pValue, char **endptr);
extern int is_V_STATIC_double_conversion_allowed();
extern int V_STATIC_to_double(const void *pValue, double *nValue);
extern int is_V_STATIC_long_conversion_allowed();
extern int V_STATIC_to_long(const void *pValue, long *nValue);
extern void compare_V_STATIC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_STATIC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_STATIC(void *pValue);
extern int release_V_STATIC(void *pValue);
extern int copy_V_STATIC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_STATIC_Utils;

/****************************************************************
 ** V_TRAIN 
 ****************************************************************/
extern int V_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_TRAIN_string(const char *str, char **endptr);
extern int string_to_V_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_TRAIN_double_conversion_allowed();
extern int V_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_V_TRAIN_long_conversion_allowed();
extern int V_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_V_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_TRAIN(void *pValue);
extern int release_V_TRAIN(void *pValue);
extern int copy_V_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_TRAIN_Utils;

/****************************************************************
 ** V_TSR 
 ****************************************************************/
extern int V_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_TSR_string(const char *str, char **endptr);
extern int string_to_V_TSR(const char *str, void *pValue, char **endptr);
extern int is_V_TSR_double_conversion_allowed();
extern int V_TSR_to_double(const void *pValue, double *nValue);
extern int is_V_TSR_long_conversion_allowed();
extern int V_TSR_to_long(const void *pValue, long *nValue);
extern void compare_V_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_TSR(void *pValue);
extern int release_V_TSR(void *pValue);
extern int copy_V_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_TSR_Utils;


#endif /*TESTBENCH_INTEGRATION_TYPES_CONVERSION */
