#ifndef OPENETCS_EVC_TYPES_CONVERSION
#define OPENETCS_EVC_TYPES_CONVERSION

#include "SmuTypes.h"

/****************************************************************
 ** _10_GradientProfile_for_DMI_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int _10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_double_conversion_allowed();
extern int _10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_long_conversion_allowed();
extern int _10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes(void *pValue);
extern int release__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes(void *pValue);
extern int copy__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__10_GradientProfile_for_DMI_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** _112_array 
 ****************************************************************/
extern int _112_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__112_array_string(const char *str, char **endptr);
extern int string_to__112_array(const char *str, void *pValue, char **endptr);
extern int is__112_array_double_conversion_allowed();
extern int _112_array_to_double(const void *pValue, double *nValue);
extern int is__112_array_long_conversion_allowed();
extern int _112_array_to_long(const void *pValue, long *nValue);
extern void compare__112_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__112_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__112_array(void *pValue);
extern int release__112_array(void *pValue);
extern int copy__112_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__112_array_Utils;

/****************************************************************
 ** _113_array 
 ****************************************************************/
extern int _113_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__113_array_string(const char *str, char **endptr);
extern int string_to__113_array(const char *str, void *pValue, char **endptr);
extern int is__113_array_double_conversion_allowed();
extern int _113_array_to_double(const void *pValue, double *nValue);
extern int is__113_array_long_conversion_allowed();
extern int _113_array_to_long(const void *pValue, long *nValue);
extern void compare__113_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__113_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__113_array(void *pValue);
extern int release__113_array(void *pValue);
extern int copy__113_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__113_array_Utils;

/****************************************************************
 ** _114_array 
 ****************************************************************/
extern int _114_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__114_array_string(const char *str, char **endptr);
extern int string_to__114_array(const char *str, void *pValue, char **endptr);
extern int is__114_array_double_conversion_allowed();
extern int _114_array_to_double(const void *pValue, double *nValue);
extern int is__114_array_long_conversion_allowed();
extern int _114_array_to_long(const void *pValue, long *nValue);
extern void compare__114_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__114_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__114_array(void *pValue);
extern int release__114_array(void *pValue);
extern int copy__114_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__114_array_Utils;

/****************************************************************
 ** _115_array 
 ****************************************************************/
extern int _115_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__115_array_string(const char *str, char **endptr);
extern int string_to__115_array(const char *str, void *pValue, char **endptr);
extern int is__115_array_double_conversion_allowed();
extern int _115_array_to_double(const void *pValue, double *nValue);
extern int is__115_array_long_conversion_allowed();
extern int _115_array_to_long(const void *pValue, long *nValue);
extern void compare__115_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__115_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__115_array(void *pValue);
extern int release__115_array(void *pValue);
extern int copy__115_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__115_array_Utils;

/****************************************************************
 ** _116_array 
 ****************************************************************/
extern int _116_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__116_array_string(const char *str, char **endptr);
extern int string_to__116_array(const char *str, void *pValue, char **endptr);
extern int is__116_array_double_conversion_allowed();
extern int _116_array_to_double(const void *pValue, double *nValue);
extern int is__116_array_long_conversion_allowed();
extern int _116_array_to_long(const void *pValue, long *nValue);
extern void compare__116_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__116_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__116_array(void *pValue);
extern int release__116_array(void *pValue);
extern int copy__116_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__116_array_Utils;

/****************************************************************
 ** _117_array 
 ****************************************************************/
extern int _117_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__117_array_string(const char *str, char **endptr);
extern int string_to__117_array(const char *str, void *pValue, char **endptr);
extern int is__117_array_double_conversion_allowed();
extern int _117_array_to_double(const void *pValue, double *nValue);
extern int is__117_array_long_conversion_allowed();
extern int _117_array_to_long(const void *pValue, long *nValue);
extern void compare__117_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__117_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__117_array(void *pValue);
extern int release__117_array(void *pValue);
extern int copy__117_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__117_array_Utils;

/****************************************************************
 ** _118_array 
 ****************************************************************/
extern int _118_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__118_array_string(const char *str, char **endptr);
extern int string_to__118_array(const char *str, void *pValue, char **endptr);
extern int is__118_array_double_conversion_allowed();
extern int _118_array_to_double(const void *pValue, double *nValue);
extern int is__118_array_long_conversion_allowed();
extern int _118_array_to_long(const void *pValue, long *nValue);
extern void compare__118_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__118_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__118_array(void *pValue);
extern int release__118_array(void *pValue);
extern int copy__118_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__118_array_Utils;

/****************************************************************
 ** _119_array 
 ****************************************************************/
extern int _119_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__119_array_string(const char *str, char **endptr);
extern int string_to__119_array(const char *str, void *pValue, char **endptr);
extern int is__119_array_double_conversion_allowed();
extern int _119_array_to_double(const void *pValue, double *nValue);
extern int is__119_array_long_conversion_allowed();
extern int _119_array_to_long(const void *pValue, long *nValue);
extern void compare__119_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__119_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__119_array(void *pValue);
extern int release__119_array(void *pValue);
extern int copy__119_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__119_array_Utils;

/****************************************************************
 ** _11_DMI_EVC_Coded_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int _11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_double_conversion_allowed();
extern int _11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_long_conversion_allowed();
extern int _11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA(void *pValue);
extern int release__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA(void *pValue);
extern int copy__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__11_DMI_EVC_Coded_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** _120_array 
 ****************************************************************/
extern int _120_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__120_array_string(const char *str, char **endptr);
extern int string_to__120_array(const char *str, void *pValue, char **endptr);
extern int is__120_array_double_conversion_allowed();
extern int _120_array_to_double(const void *pValue, double *nValue);
extern int is__120_array_long_conversion_allowed();
extern int _120_array_to_long(const void *pValue, long *nValue);
extern void compare__120_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__120_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__120_array(void *pValue);
extern int release__120_array(void *pValue);
extern int copy__120_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__120_array_Utils;

/****************************************************************
 ** _121_array 
 ****************************************************************/
extern int _121_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__121_array_string(const char *str, char **endptr);
extern int string_to__121_array(const char *str, void *pValue, char **endptr);
extern int is__121_array_double_conversion_allowed();
extern int _121_array_to_double(const void *pValue, double *nValue);
extern int is__121_array_long_conversion_allowed();
extern int _121_array_to_long(const void *pValue, long *nValue);
extern void compare__121_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__121_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__121_array(void *pValue);
extern int release__121_array(void *pValue);
extern int copy__121_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__121_array_Utils;

/****************************************************************
 ** _122_array 
 ****************************************************************/
extern int _122_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__122_array_string(const char *str, char **endptr);
extern int string_to__122_array(const char *str, void *pValue, char **endptr);
extern int is__122_array_double_conversion_allowed();
extern int _122_array_to_double(const void *pValue, double *nValue);
extern int is__122_array_long_conversion_allowed();
extern int _122_array_to_long(const void *pValue, long *nValue);
extern void compare__122_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__122_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__122_array(void *pValue);
extern int release__122_array(void *pValue);
extern int copy__122_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__122_array_Utils;

/****************************************************************
 ** _123_array 
 ****************************************************************/
extern int _123_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__123_array_string(const char *str, char **endptr);
extern int string_to__123_array(const char *str, void *pValue, char **endptr);
extern int is__123_array_double_conversion_allowed();
extern int _123_array_to_double(const void *pValue, double *nValue);
extern int is__123_array_long_conversion_allowed();
extern int _123_array_to_long(const void *pValue, long *nValue);
extern void compare__123_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__123_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__123_array(void *pValue);
extern int release__123_array(void *pValue);
extern int copy__123_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__123_array_Utils;

/****************************************************************
 ** _124_array 
 ****************************************************************/
extern int _124_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__124_array_string(const char *str, char **endptr);
extern int string_to__124_array(const char *str, void *pValue, char **endptr);
extern int is__124_array_double_conversion_allowed();
extern int _124_array_to_double(const void *pValue, double *nValue);
extern int is__124_array_long_conversion_allowed();
extern int _124_array_to_long(const void *pValue, long *nValue);
extern void compare__124_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__124_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__124_array(void *pValue);
extern int release__124_array(void *pValue);
extern int copy__124_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__124_array_Utils;

/****************************************************************
 ** _125_array 
 ****************************************************************/
extern int _125_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__125_array_string(const char *str, char **endptr);
extern int string_to__125_array(const char *str, void *pValue, char **endptr);
extern int is__125_array_double_conversion_allowed();
extern int _125_array_to_double(const void *pValue, double *nValue);
extern int is__125_array_long_conversion_allowed();
extern int _125_array_to_long(const void *pValue, long *nValue);
extern void compare__125_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__125_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__125_array(void *pValue);
extern int release__125_array(void *pValue);
extern int copy__125_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__125_array_Utils;

/****************************************************************
 ** _126_array 
 ****************************************************************/
extern int _126_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__126_array_string(const char *str, char **endptr);
extern int string_to__126_array(const char *str, void *pValue, char **endptr);
extern int is__126_array_double_conversion_allowed();
extern int _126_array_to_double(const void *pValue, double *nValue);
extern int is__126_array_long_conversion_allowed();
extern int _126_array_to_long(const void *pValue, long *nValue);
extern void compare__126_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__126_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__126_array(void *pValue);
extern int release__126_array(void *pValue);
extern int copy__126_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__126_array_Utils;

/****************************************************************
 ** _127_array 
 ****************************************************************/
extern int _127_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__127_array_string(const char *str, char **endptr);
extern int string_to__127_array(const char *str, void *pValue, char **endptr);
extern int is__127_array_double_conversion_allowed();
extern int _127_array_to_double(const void *pValue, double *nValue);
extern int is__127_array_long_conversion_allowed();
extern int _127_array_to_long(const void *pValue, long *nValue);
extern void compare__127_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__127_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__127_array(void *pValue);
extern int release__127_array(void *pValue);
extern int copy__127_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__127_array_Utils;

/****************************************************************
 ** _128_array 
 ****************************************************************/
extern int _128_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__128_array_string(const char *str, char **endptr);
extern int string_to__128_array(const char *str, void *pValue, char **endptr);
extern int is__128_array_double_conversion_allowed();
extern int _128_array_to_double(const void *pValue, double *nValue);
extern int is__128_array_long_conversion_allowed();
extern int _128_array_to_long(const void *pValue, long *nValue);
extern void compare__128_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__128_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__128_array(void *pValue);
extern int release__128_array(void *pValue);
extern int copy__128_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__128_array_Utils;

/****************************************************************
 ** _129_array 
 ****************************************************************/
extern int _129_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__129_array_string(const char *str, char **endptr);
extern int string_to__129_array(const char *str, void *pValue, char **endptr);
extern int is__129_array_double_conversion_allowed();
extern int _129_array_to_double(const void *pValue, double *nValue);
extern int is__129_array_long_conversion_allowed();
extern int _129_array_to_long(const void *pValue, long *nValue);
extern void compare__129_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__129_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__129_array(void *pValue);
extern int release__129_array(void *pValue);
extern int copy__129_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__129_array_Utils;

/****************************************************************
 ** _12_DMI_Identifier_Request_int_array_T_DATA 
 ****************************************************************/
extern int _12_DMI_Identifier_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__12_DMI_Identifier_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to__12_DMI_Identifier_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is__12_DMI_Identifier_Request_int_array_T_DATA_double_conversion_allowed();
extern int _12_DMI_Identifier_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is__12_DMI_Identifier_Request_int_array_T_DATA_long_conversion_allowed();
extern int _12_DMI_Identifier_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare__12_DMI_Identifier_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__12_DMI_Identifier_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__12_DMI_Identifier_Request_int_array_T_DATA(void *pValue);
extern int release__12_DMI_Identifier_Request_int_array_T_DATA(void *pValue);
extern int copy__12_DMI_Identifier_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__12_DMI_Identifier_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** _130_array 
 ****************************************************************/
extern int _130_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__130_array_string(const char *str, char **endptr);
extern int string_to__130_array(const char *str, void *pValue, char **endptr);
extern int is__130_array_double_conversion_allowed();
extern int _130_array_to_double(const void *pValue, double *nValue);
extern int is__130_array_long_conversion_allowed();
extern int _130_array_to_long(const void *pValue, long *nValue);
extern void compare__130_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__130_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__130_array(void *pValue);
extern int release__130_array(void *pValue);
extern int copy__130_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__130_array_Utils;

/****************************************************************
 ** _131_array 
 ****************************************************************/
extern int _131_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__131_array_string(const char *str, char **endptr);
extern int string_to__131_array(const char *str, void *pValue, char **endptr);
extern int is__131_array_double_conversion_allowed();
extern int _131_array_to_double(const void *pValue, double *nValue);
extern int is__131_array_long_conversion_allowed();
extern int _131_array_to_long(const void *pValue, long *nValue);
extern void compare__131_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__131_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__131_array(void *pValue);
extern int release__131_array(void *pValue);
extern int copy__131_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__131_array_Utils;

/****************************************************************
 ** _132_array 
 ****************************************************************/
extern int _132_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__132_array_string(const char *str, char **endptr);
extern int string_to__132_array(const char *str, void *pValue, char **endptr);
extern int is__132_array_double_conversion_allowed();
extern int _132_array_to_double(const void *pValue, double *nValue);
extern int is__132_array_long_conversion_allowed();
extern int _132_array_to_long(const void *pValue, long *nValue);
extern void compare__132_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__132_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__132_array(void *pValue);
extern int release__132_array(void *pValue);
extern int copy__132_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__132_array_Utils;

/****************************************************************
 ** _133_array 
 ****************************************************************/
extern int _133_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__133_array_string(const char *str, char **endptr);
extern int string_to__133_array(const char *str, void *pValue, char **endptr);
extern int is__133_array_double_conversion_allowed();
extern int _133_array_to_double(const void *pValue, double *nValue);
extern int is__133_array_long_conversion_allowed();
extern int _133_array_to_long(const void *pValue, long *nValue);
extern void compare__133_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__133_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__133_array(void *pValue);
extern int release__133_array(void *pValue);
extern int copy__133_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__133_array_Utils;

/****************************************************************
 ** _134_array 
 ****************************************************************/
extern int _134_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__134_array_string(const char *str, char **endptr);
extern int string_to__134_array(const char *str, void *pValue, char **endptr);
extern int is__134_array_double_conversion_allowed();
extern int _134_array_to_double(const void *pValue, double *nValue);
extern int is__134_array_long_conversion_allowed();
extern int _134_array_to_long(const void *pValue, long *nValue);
extern void compare__134_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__134_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__134_array(void *pValue);
extern int release__134_array(void *pValue);
extern int copy__134_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__134_array_Utils;

/****************************************************************
 ** _135_array 
 ****************************************************************/
extern int _135_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__135_array_string(const char *str, char **endptr);
extern int string_to__135_array(const char *str, void *pValue, char **endptr);
extern int is__135_array_double_conversion_allowed();
extern int _135_array_to_double(const void *pValue, double *nValue);
extern int is__135_array_long_conversion_allowed();
extern int _135_array_to_long(const void *pValue, long *nValue);
extern void compare__135_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__135_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__135_array(void *pValue);
extern int release__135_array(void *pValue);
extern int copy__135_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__135_array_Utils;

/****************************************************************
 ** _136_array 
 ****************************************************************/
extern int _136_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__136_array_string(const char *str, char **endptr);
extern int string_to__136_array(const char *str, void *pValue, char **endptr);
extern int is__136_array_double_conversion_allowed();
extern int _136_array_to_double(const void *pValue, double *nValue);
extern int is__136_array_long_conversion_allowed();
extern int _136_array_to_long(const void *pValue, long *nValue);
extern void compare__136_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__136_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__136_array(void *pValue);
extern int release__136_array(void *pValue);
extern int copy__136_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__136_array_Utils;

/****************************************************************
 ** _137_array 
 ****************************************************************/
extern int _137_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__137_array_string(const char *str, char **endptr);
extern int string_to__137_array(const char *str, void *pValue, char **endptr);
extern int is__137_array_double_conversion_allowed();
extern int _137_array_to_double(const void *pValue, double *nValue);
extern int is__137_array_long_conversion_allowed();
extern int _137_array_to_long(const void *pValue, long *nValue);
extern void compare__137_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__137_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__137_array(void *pValue);
extern int release__137_array(void *pValue);
extern int copy__137_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__137_array_Utils;

/****************************************************************
 ** _138_array 
 ****************************************************************/
extern int _138_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__138_array_string(const char *str, char **endptr);
extern int string_to__138_array(const char *str, void *pValue, char **endptr);
extern int is__138_array_double_conversion_allowed();
extern int _138_array_to_double(const void *pValue, double *nValue);
extern int is__138_array_long_conversion_allowed();
extern int _138_array_to_long(const void *pValue, long *nValue);
extern void compare__138_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__138_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__138_array(void *pValue);
extern int release__138_array(void *pValue);
extern int copy__138_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__138_array_Utils;

/****************************************************************
 ** _139_array 
 ****************************************************************/
extern int _139_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__139_array_string(const char *str, char **endptr);
extern int string_to__139_array(const char *str, void *pValue, char **endptr);
extern int is__139_array_double_conversion_allowed();
extern int _139_array_to_double(const void *pValue, double *nValue);
extern int is__139_array_long_conversion_allowed();
extern int _139_array_to_long(const void *pValue, long *nValue);
extern void compare__139_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__139_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__139_array(void *pValue);
extern int release__139_array(void *pValue);
extern int copy__139_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__139_array_Utils;

/****************************************************************
 ** _13_DMI_EVC_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int _13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_double_conversion_allowed();
extern int _13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_long_conversion_allowed();
extern int _13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int release__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int copy__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__13_DMI_EVC_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** _140_array 
 ****************************************************************/
extern int _140_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__140_array_string(const char *str, char **endptr);
extern int string_to__140_array(const char *str, void *pValue, char **endptr);
extern int is__140_array_double_conversion_allowed();
extern int _140_array_to_double(const void *pValue, double *nValue);
extern int is__140_array_long_conversion_allowed();
extern int _140_array_to_long(const void *pValue, long *nValue);
extern void compare__140_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__140_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__140_array(void *pValue);
extern int release__140_array(void *pValue);
extern int copy__140_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__140_array_Utils;

/****************************************************************
 ** _141_array 
 ****************************************************************/
extern int _141_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__141_array_string(const char *str, char **endptr);
extern int string_to__141_array(const char *str, void *pValue, char **endptr);
extern int is__141_array_double_conversion_allowed();
extern int _141_array_to_double(const void *pValue, double *nValue);
extern int is__141_array_long_conversion_allowed();
extern int _141_array_to_long(const void *pValue, long *nValue);
extern void compare__141_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__141_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__141_array(void *pValue);
extern int release__141_array(void *pValue);
extern int copy__141_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__141_array_Utils;

/****************************************************************
 ** _142_array 
 ****************************************************************/
extern int _142_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__142_array_string(const char *str, char **endptr);
extern int string_to__142_array(const char *str, void *pValue, char **endptr);
extern int is__142_array_double_conversion_allowed();
extern int _142_array_to_double(const void *pValue, double *nValue);
extern int is__142_array_long_conversion_allowed();
extern int _142_array_to_long(const void *pValue, long *nValue);
extern void compare__142_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__142_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__142_array(void *pValue);
extern int release__142_array(void *pValue);
extern int copy__142_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__142_array_Utils;

/****************************************************************
 ** _143_array 
 ****************************************************************/
extern int _143_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__143_array_string(const char *str, char **endptr);
extern int string_to__143_array(const char *str, void *pValue, char **endptr);
extern int is__143_array_double_conversion_allowed();
extern int _143_array_to_double(const void *pValue, double *nValue);
extern int is__143_array_long_conversion_allowed();
extern int _143_array_to_long(const void *pValue, long *nValue);
extern void compare__143_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__143_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__143_array(void *pValue);
extern int release__143_array(void *pValue);
extern int copy__143_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__143_array_Utils;

/****************************************************************
 ** _144_array 
 ****************************************************************/
extern int _144_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__144_array_string(const char *str, char **endptr);
extern int string_to__144_array(const char *str, void *pValue, char **endptr);
extern int is__144_array_double_conversion_allowed();
extern int _144_array_to_double(const void *pValue, double *nValue);
extern int is__144_array_long_conversion_allowed();
extern int _144_array_to_long(const void *pValue, long *nValue);
extern void compare__144_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__144_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__144_array(void *pValue);
extern int release__144_array(void *pValue);
extern int copy__144_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__144_array_Utils;

/****************************************************************
 ** _145_array 
 ****************************************************************/
extern int _145_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__145_array_string(const char *str, char **endptr);
extern int string_to__145_array(const char *str, void *pValue, char **endptr);
extern int is__145_array_double_conversion_allowed();
extern int _145_array_to_double(const void *pValue, double *nValue);
extern int is__145_array_long_conversion_allowed();
extern int _145_array_to_long(const void *pValue, long *nValue);
extern void compare__145_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__145_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__145_array(void *pValue);
extern int release__145_array(void *pValue);
extern int copy__145_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__145_array_Utils;

/****************************************************************
 ** _146_array 
 ****************************************************************/
extern int _146_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__146_array_string(const char *str, char **endptr);
extern int string_to__146_array(const char *str, void *pValue, char **endptr);
extern int is__146_array_double_conversion_allowed();
extern int _146_array_to_double(const void *pValue, double *nValue);
extern int is__146_array_long_conversion_allowed();
extern int _146_array_to_long(const void *pValue, long *nValue);
extern void compare__146_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__146_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__146_array(void *pValue);
extern int release__146_array(void *pValue);
extern int copy__146_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__146_array_Utils;

/****************************************************************
 ** _147_array 
 ****************************************************************/
extern int _147_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__147_array_string(const char *str, char **endptr);
extern int string_to__147_array(const char *str, void *pValue, char **endptr);
extern int is__147_array_double_conversion_allowed();
extern int _147_array_to_double(const void *pValue, double *nValue);
extern int is__147_array_long_conversion_allowed();
extern int _147_array_to_long(const void *pValue, long *nValue);
extern void compare__147_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__147_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__147_array(void *pValue);
extern int release__147_array(void *pValue);
extern int copy__147_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__147_array_Utils;

/****************************************************************
 ** _148_array 
 ****************************************************************/
extern int _148_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__148_array_string(const char *str, char **endptr);
extern int string_to__148_array(const char *str, void *pValue, char **endptr);
extern int is__148_array_double_conversion_allowed();
extern int _148_array_to_double(const void *pValue, double *nValue);
extern int is__148_array_long_conversion_allowed();
extern int _148_array_to_long(const void *pValue, long *nValue);
extern void compare__148_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__148_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__148_array(void *pValue);
extern int release__148_array(void *pValue);
extern int copy__148_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__148_array_Utils;

/****************************************************************
 ** _149_array 
 ****************************************************************/
extern int _149_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__149_array_string(const char *str, char **endptr);
extern int string_to__149_array(const char *str, void *pValue, char **endptr);
extern int is__149_array_double_conversion_allowed();
extern int _149_array_to_double(const void *pValue, double *nValue);
extern int is__149_array_long_conversion_allowed();
extern int _149_array_to_long(const void *pValue, long *nValue);
extern void compare__149_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__149_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__149_array(void *pValue);
extern int release__149_array(void *pValue);
extern int copy__149_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__149_array_Utils;

/****************************************************************
 ** _14_DMI_Train_Running_Number_int_array_T_DATA 
 ****************************************************************/
extern int _14_DMI_Train_Running_Number_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__14_DMI_Train_Running_Number_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to__14_DMI_Train_Running_Number_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is__14_DMI_Train_Running_Number_int_array_T_DATA_double_conversion_allowed();
extern int _14_DMI_Train_Running_Number_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is__14_DMI_Train_Running_Number_int_array_T_DATA_long_conversion_allowed();
extern int _14_DMI_Train_Running_Number_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare__14_DMI_Train_Running_Number_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__14_DMI_Train_Running_Number_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__14_DMI_Train_Running_Number_int_array_T_DATA(void *pValue);
extern int release__14_DMI_Train_Running_Number_int_array_T_DATA(void *pValue);
extern int copy__14_DMI_Train_Running_Number_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__14_DMI_Train_Running_Number_int_array_T_DATA_Utils;

/****************************************************************
 ** _150_array 
 ****************************************************************/
extern int _150_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__150_array_string(const char *str, char **endptr);
extern int string_to__150_array(const char *str, void *pValue, char **endptr);
extern int is__150_array_double_conversion_allowed();
extern int _150_array_to_double(const void *pValue, double *nValue);
extern int is__150_array_long_conversion_allowed();
extern int _150_array_to_long(const void *pValue, long *nValue);
extern void compare__150_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__150_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__150_array(void *pValue);
extern int release__150_array(void *pValue);
extern int copy__150_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__150_array_Utils;

/****************************************************************
 ** _151_array 
 ****************************************************************/
extern int _151_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__151_array_string(const char *str, char **endptr);
extern int string_to__151_array(const char *str, void *pValue, char **endptr);
extern int is__151_array_double_conversion_allowed();
extern int _151_array_to_double(const void *pValue, double *nValue);
extern int is__151_array_long_conversion_allowed();
extern int _151_array_to_long(const void *pValue, long *nValue);
extern void compare__151_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__151_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__151_array(void *pValue);
extern int release__151_array(void *pValue);
extern int copy__151_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__151_array_Utils;

/****************************************************************
 ** _152_array 
 ****************************************************************/
extern int _152_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__152_array_string(const char *str, char **endptr);
extern int string_to__152_array(const char *str, void *pValue, char **endptr);
extern int is__152_array_double_conversion_allowed();
extern int _152_array_to_double(const void *pValue, double *nValue);
extern int is__152_array_long_conversion_allowed();
extern int _152_array_to_long(const void *pValue, long *nValue);
extern void compare__152_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__152_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__152_array(void *pValue);
extern int release__152_array(void *pValue);
extern int copy__152_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__152_array_Utils;

/****************************************************************
 ** _153_array 
 ****************************************************************/
extern int _153_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__153_array_string(const char *str, char **endptr);
extern int string_to__153_array(const char *str, void *pValue, char **endptr);
extern int is__153_array_double_conversion_allowed();
extern int _153_array_to_double(const void *pValue, double *nValue);
extern int is__153_array_long_conversion_allowed();
extern int _153_array_to_long(const void *pValue, long *nValue);
extern void compare__153_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__153_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__153_array(void *pValue);
extern int release__153_array(void *pValue);
extern int copy__153_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__153_array_Utils;

/****************************************************************
 ** _154_array 
 ****************************************************************/
extern int _154_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__154_array_string(const char *str, char **endptr);
extern int string_to__154_array(const char *str, void *pValue, char **endptr);
extern int is__154_array_double_conversion_allowed();
extern int _154_array_to_double(const void *pValue, double *nValue);
extern int is__154_array_long_conversion_allowed();
extern int _154_array_to_long(const void *pValue, long *nValue);
extern void compare__154_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__154_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__154_array(void *pValue);
extern int release__154_array(void *pValue);
extern int copy__154_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__154_array_Utils;

/****************************************************************
 ** _155_array 
 ****************************************************************/
extern int _155_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__155_array_string(const char *str, char **endptr);
extern int string_to__155_array(const char *str, void *pValue, char **endptr);
extern int is__155_array_double_conversion_allowed();
extern int _155_array_to_double(const void *pValue, double *nValue);
extern int is__155_array_long_conversion_allowed();
extern int _155_array_to_long(const void *pValue, long *nValue);
extern void compare__155_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__155_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__155_array(void *pValue);
extern int release__155_array(void *pValue);
extern int copy__155_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__155_array_Utils;

/****************************************************************
 ** _156_array 
 ****************************************************************/
extern int _156_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__156_array_string(const char *str, char **endptr);
extern int string_to__156_array(const char *str, void *pValue, char **endptr);
extern int is__156_array_double_conversion_allowed();
extern int _156_array_to_double(const void *pValue, double *nValue);
extern int is__156_array_long_conversion_allowed();
extern int _156_array_to_long(const void *pValue, long *nValue);
extern void compare__156_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__156_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__156_array(void *pValue);
extern int release__156_array(void *pValue);
extern int copy__156_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__156_array_Utils;

/****************************************************************
 ** _157_array 
 ****************************************************************/
extern int _157_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__157_array_string(const char *str, char **endptr);
extern int string_to__157_array(const char *str, void *pValue, char **endptr);
extern int is__157_array_double_conversion_allowed();
extern int _157_array_to_double(const void *pValue, double *nValue);
extern int is__157_array_long_conversion_allowed();
extern int _157_array_to_long(const void *pValue, long *nValue);
extern void compare__157_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__157_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__157_array(void *pValue);
extern int release__157_array(void *pValue);
extern int copy__157_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__157_array_Utils;

/****************************************************************
 ** _158_array 
 ****************************************************************/
extern int _158_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__158_array_string(const char *str, char **endptr);
extern int string_to__158_array(const char *str, void *pValue, char **endptr);
extern int is__158_array_double_conversion_allowed();
extern int _158_array_to_double(const void *pValue, double *nValue);
extern int is__158_array_long_conversion_allowed();
extern int _158_array_to_long(const void *pValue, long *nValue);
extern void compare__158_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__158_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__158_array(void *pValue);
extern int release__158_array(void *pValue);
extern int copy__158_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__158_array_Utils;

/****************************************************************
 ** _159_array 
 ****************************************************************/
extern int _159_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__159_array_string(const char *str, char **endptr);
extern int string_to__159_array(const char *str, void *pValue, char **endptr);
extern int is__159_array_double_conversion_allowed();
extern int _159_array_to_double(const void *pValue, double *nValue);
extern int is__159_array_long_conversion_allowed();
extern int _159_array_to_long(const void *pValue, long *nValue);
extern void compare__159_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__159_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__159_array(void *pValue);
extern int release__159_array(void *pValue);
extern int copy__159_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__159_array_Utils;

/****************************************************************
 ** _15_DMI_Adhesion_Factor_Data_int_array_T_DATA 
 ****************************************************************/
extern int _15_DMI_Adhesion_Factor_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__15_DMI_Adhesion_Factor_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to__15_DMI_Adhesion_Factor_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is__15_DMI_Adhesion_Factor_Data_int_array_T_DATA_double_conversion_allowed();
extern int _15_DMI_Adhesion_Factor_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is__15_DMI_Adhesion_Factor_Data_int_array_T_DATA_long_conversion_allowed();
extern int _15_DMI_Adhesion_Factor_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare__15_DMI_Adhesion_Factor_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__15_DMI_Adhesion_Factor_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__15_DMI_Adhesion_Factor_Data_int_array_T_DATA(void *pValue);
extern int release__15_DMI_Adhesion_Factor_Data_int_array_T_DATA(void *pValue);
extern int copy__15_DMI_Adhesion_Factor_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__15_DMI_Adhesion_Factor_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** _160_array 
 ****************************************************************/
extern int _160_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__160_array_string(const char *str, char **endptr);
extern int string_to__160_array(const char *str, void *pValue, char **endptr);
extern int is__160_array_double_conversion_allowed();
extern int _160_array_to_double(const void *pValue, double *nValue);
extern int is__160_array_long_conversion_allowed();
extern int _160_array_to_long(const void *pValue, long *nValue);
extern void compare__160_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__160_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__160_array(void *pValue);
extern int release__160_array(void *pValue);
extern int copy__160_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__160_array_Utils;

/****************************************************************
 ** _161_array 
 ****************************************************************/
extern int _161_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__161_array_string(const char *str, char **endptr);
extern int string_to__161_array(const char *str, void *pValue, char **endptr);
extern int is__161_array_double_conversion_allowed();
extern int _161_array_to_double(const void *pValue, double *nValue);
extern int is__161_array_long_conversion_allowed();
extern int _161_array_to_long(const void *pValue, long *nValue);
extern void compare__161_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__161_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__161_array(void *pValue);
extern int release__161_array(void *pValue);
extern int copy__161_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__161_array_Utils;

/****************************************************************
 ** _162_array 
 ****************************************************************/
extern int _162_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__162_array_string(const char *str, char **endptr);
extern int string_to__162_array(const char *str, void *pValue, char **endptr);
extern int is__162_array_double_conversion_allowed();
extern int _162_array_to_double(const void *pValue, double *nValue);
extern int is__162_array_long_conversion_allowed();
extern int _162_array_to_long(const void *pValue, long *nValue);
extern void compare__162_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__162_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__162_array(void *pValue);
extern int release__162_array(void *pValue);
extern int copy__162_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__162_array_Utils;

/****************************************************************
 ** _163_array 
 ****************************************************************/
extern int _163_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__163_array_string(const char *str, char **endptr);
extern int string_to__163_array(const char *str, void *pValue, char **endptr);
extern int is__163_array_double_conversion_allowed();
extern int _163_array_to_double(const void *pValue, double *nValue);
extern int is__163_array_long_conversion_allowed();
extern int _163_array_to_long(const void *pValue, long *nValue);
extern void compare__163_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__163_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__163_array(void *pValue);
extern int release__163_array(void *pValue);
extern int copy__163_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__163_array_Utils;

/****************************************************************
 ** _164_array 
 ****************************************************************/
extern int _164_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__164_array_string(const char *str, char **endptr);
extern int string_to__164_array(const char *str, void *pValue, char **endptr);
extern int is__164_array_double_conversion_allowed();
extern int _164_array_to_double(const void *pValue, double *nValue);
extern int is__164_array_long_conversion_allowed();
extern int _164_array_to_long(const void *pValue, long *nValue);
extern void compare__164_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__164_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__164_array(void *pValue);
extern int release__164_array(void *pValue);
extern int copy__164_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__164_array_Utils;

/****************************************************************
 ** _165_array 
 ****************************************************************/
extern int _165_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__165_array_string(const char *str, char **endptr);
extern int string_to__165_array(const char *str, void *pValue, char **endptr);
extern int is__165_array_double_conversion_allowed();
extern int _165_array_to_double(const void *pValue, double *nValue);
extern int is__165_array_long_conversion_allowed();
extern int _165_array_to_long(const void *pValue, long *nValue);
extern void compare__165_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__165_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__165_array(void *pValue);
extern int release__165_array(void *pValue);
extern int copy__165_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__165_array_Utils;

/****************************************************************
 ** _166_array 
 ****************************************************************/
extern int _166_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__166_array_string(const char *str, char **endptr);
extern int string_to__166_array(const char *str, void *pValue, char **endptr);
extern int is__166_array_double_conversion_allowed();
extern int _166_array_to_double(const void *pValue, double *nValue);
extern int is__166_array_long_conversion_allowed();
extern int _166_array_to_long(const void *pValue, long *nValue);
extern void compare__166_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__166_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__166_array(void *pValue);
extern int release__166_array(void *pValue);
extern int copy__166_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__166_array_Utils;

/****************************************************************
 ** _167_array 
 ****************************************************************/
extern int _167_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__167_array_string(const char *str, char **endptr);
extern int string_to__167_array(const char *str, void *pValue, char **endptr);
extern int is__167_array_double_conversion_allowed();
extern int _167_array_to_double(const void *pValue, double *nValue);
extern int is__167_array_long_conversion_allowed();
extern int _167_array_to_long(const void *pValue, long *nValue);
extern void compare__167_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__167_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__167_array(void *pValue);
extern int release__167_array(void *pValue);
extern int copy__167_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__167_array_Utils;

/****************************************************************
 ** _168_array 
 ****************************************************************/
extern int _168_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__168_array_string(const char *str, char **endptr);
extern int string_to__168_array(const char *str, void *pValue, char **endptr);
extern int is__168_array_double_conversion_allowed();
extern int _168_array_to_double(const void *pValue, double *nValue);
extern int is__168_array_long_conversion_allowed();
extern int _168_array_to_long(const void *pValue, long *nValue);
extern void compare__168_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__168_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__168_array(void *pValue);
extern int release__168_array(void *pValue);
extern int copy__168_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__168_array_Utils;

/****************************************************************
 ** _169_array 
 ****************************************************************/
extern int _169_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__169_array_string(const char *str, char **endptr);
extern int string_to__169_array(const char *str, void *pValue, char **endptr);
extern int is__169_array_double_conversion_allowed();
extern int _169_array_to_double(const void *pValue, double *nValue);
extern int is__169_array_long_conversion_allowed();
extern int _169_array_to_long(const void *pValue, long *nValue);
extern void compare__169_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__169_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__169_array(void *pValue);
extern int release__169_array(void *pValue);
extern int copy__169_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__169_array_Utils;

/****************************************************************
 ** _16_P003_OBU_nid_c_sectionlist_enum_T_TM 
 ****************************************************************/
extern int _16_P003_OBU_nid_c_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__16_P003_OBU_nid_c_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to__16_P003_OBU_nid_c_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is__16_P003_OBU_nid_c_sectionlist_enum_T_TM_double_conversion_allowed();
extern int _16_P003_OBU_nid_c_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is__16_P003_OBU_nid_c_sectionlist_enum_T_TM_long_conversion_allowed();
extern int _16_P003_OBU_nid_c_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare__16_P003_OBU_nid_c_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__16_P003_OBU_nid_c_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__16_P003_OBU_nid_c_sectionlist_enum_T_TM(void *pValue);
extern int release__16_P003_OBU_nid_c_sectionlist_enum_T_TM(void *pValue);
extern int copy__16_P003_OBU_nid_c_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__16_P003_OBU_nid_c_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** _170_array 
 ****************************************************************/
extern int _170_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__170_array_string(const char *str, char **endptr);
extern int string_to__170_array(const char *str, void *pValue, char **endptr);
extern int is__170_array_double_conversion_allowed();
extern int _170_array_to_double(const void *pValue, double *nValue);
extern int is__170_array_long_conversion_allowed();
extern int _170_array_to_long(const void *pValue, long *nValue);
extern void compare__170_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__170_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__170_array(void *pValue);
extern int release__170_array(void *pValue);
extern int copy__170_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__170_array_Utils;

/****************************************************************
 ** _171_array 
 ****************************************************************/
extern int _171_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__171_array_string(const char *str, char **endptr);
extern int string_to__171_array(const char *str, void *pValue, char **endptr);
extern int is__171_array_double_conversion_allowed();
extern int _171_array_to_double(const void *pValue, double *nValue);
extern int is__171_array_long_conversion_allowed();
extern int _171_array_to_long(const void *pValue, long *nValue);
extern void compare__171_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__171_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__171_array(void *pValue);
extern int release__171_array(void *pValue);
extern int copy__171_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__171_array_Utils;

/****************************************************************
 ** _172_array 
 ****************************************************************/
extern int _172_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__172_array_string(const char *str, char **endptr);
extern int string_to__172_array(const char *str, void *pValue, char **endptr);
extern int is__172_array_double_conversion_allowed();
extern int _172_array_to_double(const void *pValue, double *nValue);
extern int is__172_array_long_conversion_allowed();
extern int _172_array_to_long(const void *pValue, long *nValue);
extern void compare__172_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__172_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__172_array(void *pValue);
extern int release__172_array(void *pValue);
extern int copy__172_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__172_array_Utils;

/****************************************************************
 ** _173_array 
 ****************************************************************/
extern int _173_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__173_array_string(const char *str, char **endptr);
extern int string_to__173_array(const char *str, void *pValue, char **endptr);
extern int is__173_array_double_conversion_allowed();
extern int _173_array_to_double(const void *pValue, double *nValue);
extern int is__173_array_long_conversion_allowed();
extern int _173_array_to_long(const void *pValue, long *nValue);
extern void compare__173_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__173_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__173_array(void *pValue);
extern int release__173_array(void *pValue);
extern int copy__173_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__173_array_Utils;

/****************************************************************
 ** _174_array 
 ****************************************************************/
extern int _174_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__174_array_string(const char *str, char **endptr);
extern int string_to__174_array(const char *str, void *pValue, char **endptr);
extern int is__174_array_double_conversion_allowed();
extern int _174_array_to_double(const void *pValue, double *nValue);
extern int is__174_array_long_conversion_allowed();
extern int _174_array_to_long(const void *pValue, long *nValue);
extern void compare__174_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__174_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__174_array(void *pValue);
extern int release__174_array(void *pValue);
extern int copy__174_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__174_array_Utils;

/****************************************************************
 ** _175_array 
 ****************************************************************/
extern int _175_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__175_array_string(const char *str, char **endptr);
extern int string_to__175_array(const char *str, void *pValue, char **endptr);
extern int is__175_array_double_conversion_allowed();
extern int _175_array_to_double(const void *pValue, double *nValue);
extern int is__175_array_long_conversion_allowed();
extern int _175_array_to_long(const void *pValue, long *nValue);
extern void compare__175_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__175_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__175_array(void *pValue);
extern int release__175_array(void *pValue);
extern int copy__175_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__175_array_Utils;

/****************************************************************
 ** _176_array 
 ****************************************************************/
extern int _176_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__176_array_string(const char *str, char **endptr);
extern int string_to__176_array(const char *str, void *pValue, char **endptr);
extern int is__176_array_double_conversion_allowed();
extern int _176_array_to_double(const void *pValue, double *nValue);
extern int is__176_array_long_conversion_allowed();
extern int _176_array_to_long(const void *pValue, long *nValue);
extern void compare__176_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__176_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__176_array(void *pValue);
extern int release__176_array(void *pValue);
extern int copy__176_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__176_array_Utils;

/****************************************************************
 ** _177_array 
 ****************************************************************/
extern int _177_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__177_array_string(const char *str, char **endptr);
extern int string_to__177_array(const char *str, void *pValue, char **endptr);
extern int is__177_array_double_conversion_allowed();
extern int _177_array_to_double(const void *pValue, double *nValue);
extern int is__177_array_long_conversion_allowed();
extern int _177_array_to_long(const void *pValue, long *nValue);
extern void compare__177_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__177_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__177_array(void *pValue);
extern int release__177_array(void *pValue);
extern int copy__177_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__177_array_Utils;

/****************************************************************
 ** _178_array 
 ****************************************************************/
extern int _178_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__178_array_string(const char *str, char **endptr);
extern int string_to__178_array(const char *str, void *pValue, char **endptr);
extern int is__178_array_double_conversion_allowed();
extern int _178_array_to_double(const void *pValue, double *nValue);
extern int is__178_array_long_conversion_allowed();
extern int _178_array_to_long(const void *pValue, long *nValue);
extern void compare__178_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__178_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__178_array(void *pValue);
extern int release__178_array(void *pValue);
extern int copy__178_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__178_array_Utils;

/****************************************************************
 ** _179_array 
 ****************************************************************/
extern int _179_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__179_array_string(const char *str, char **endptr);
extern int string_to__179_array(const char *str, void *pValue, char **endptr);
extern int is__179_array_double_conversion_allowed();
extern int _179_array_to_double(const void *pValue, double *nValue);
extern int is__179_array_long_conversion_allowed();
extern int _179_array_to_long(const void *pValue, long *nValue);
extern void compare__179_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__179_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__179_array(void *pValue);
extern int release__179_array(void *pValue);
extern int copy__179_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__179_array_Utils;

/****************************************************************
 ** _17_Radio_TrainTrack_Header_T_TM_transitional 
 ****************************************************************/
extern int _17_Radio_TrainTrack_Header_T_TM_transitional_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__17_Radio_TrainTrack_Header_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to__17_Radio_TrainTrack_Header_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is__17_Radio_TrainTrack_Header_T_TM_transitional_double_conversion_allowed();
extern int _17_Radio_TrainTrack_Header_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int is__17_Radio_TrainTrack_Header_T_TM_transitional_long_conversion_allowed();
extern int _17_Radio_TrainTrack_Header_T_TM_transitional_to_long(const void *pValue, long *nValue);
extern void compare__17_Radio_TrainTrack_Header_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__17_Radio_TrainTrack_Header_T_TM_transitional_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__17_Radio_TrainTrack_Header_T_TM_transitional(void *pValue);
extern int release__17_Radio_TrainTrack_Header_T_TM_transitional(void *pValue);
extern int copy__17_Radio_TrainTrack_Header_T_TM_transitional(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__17_Radio_TrainTrack_Header_T_TM_transitional_Utils;

/****************************************************************
 ** _180_array 
 ****************************************************************/
extern int _180_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__180_array_string(const char *str, char **endptr);
extern int string_to__180_array(const char *str, void *pValue, char **endptr);
extern int is__180_array_double_conversion_allowed();
extern int _180_array_to_double(const void *pValue, double *nValue);
extern int is__180_array_long_conversion_allowed();
extern int _180_array_to_long(const void *pValue, long *nValue);
extern void compare__180_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__180_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__180_array(void *pValue);
extern int release__180_array(void *pValue);
extern int copy__180_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__180_array_Utils;

/****************************************************************
 ** _181_array 
 ****************************************************************/
extern int _181_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__181_array_string(const char *str, char **endptr);
extern int string_to__181_array(const char *str, void *pValue, char **endptr);
extern int is__181_array_double_conversion_allowed();
extern int _181_array_to_double(const void *pValue, double *nValue);
extern int is__181_array_long_conversion_allowed();
extern int _181_array_to_long(const void *pValue, long *nValue);
extern void compare__181_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__181_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__181_array(void *pValue);
extern int release__181_array(void *pValue);
extern int copy__181_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__181_array_Utils;

/****************************************************************
 ** _182_array 
 ****************************************************************/
extern int _182_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__182_array_string(const char *str, char **endptr);
extern int string_to__182_array(const char *str, void *pValue, char **endptr);
extern int is__182_array_double_conversion_allowed();
extern int _182_array_to_double(const void *pValue, double *nValue);
extern int is__182_array_long_conversion_allowed();
extern int _182_array_to_long(const void *pValue, long *nValue);
extern void compare__182_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__182_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__182_array(void *pValue);
extern int release__182_array(void *pValue);
extern int copy__182_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__182_array_Utils;

/****************************************************************
 ** _183_array 
 ****************************************************************/
extern int _183_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__183_array_string(const char *str, char **endptr);
extern int string_to__183_array(const char *str, void *pValue, char **endptr);
extern int is__183_array_double_conversion_allowed();
extern int _183_array_to_double(const void *pValue, double *nValue);
extern int is__183_array_long_conversion_allowed();
extern int _183_array_to_long(const void *pValue, long *nValue);
extern void compare__183_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__183_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__183_array(void *pValue);
extern int release__183_array(void *pValue);
extern int copy__183_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__183_array_Utils;

/****************************************************************
 ** _184_array 
 ****************************************************************/
extern int _184_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__184_array_string(const char *str, char **endptr);
extern int string_to__184_array(const char *str, void *pValue, char **endptr);
extern int is__184_array_double_conversion_allowed();
extern int _184_array_to_double(const void *pValue, double *nValue);
extern int is__184_array_long_conversion_allowed();
extern int _184_array_to_long(const void *pValue, long *nValue);
extern void compare__184_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__184_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__184_array(void *pValue);
extern int release__184_array(void *pValue);
extern int copy__184_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__184_array_Utils;

/****************************************************************
 ** _185_array 
 ****************************************************************/
extern int _185_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__185_array_string(const char *str, char **endptr);
extern int string_to__185_array(const char *str, void *pValue, char **endptr);
extern int is__185_array_double_conversion_allowed();
extern int _185_array_to_double(const void *pValue, double *nValue);
extern int is__185_array_long_conversion_allowed();
extern int _185_array_to_long(const void *pValue, long *nValue);
extern void compare__185_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__185_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__185_array(void *pValue);
extern int release__185_array(void *pValue);
extern int copy__185_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__185_array_Utils;

/****************************************************************
 ** _186_array 
 ****************************************************************/
extern int _186_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__186_array_string(const char *str, char **endptr);
extern int string_to__186_array(const char *str, void *pValue, char **endptr);
extern int is__186_array_double_conversion_allowed();
extern int _186_array_to_double(const void *pValue, double *nValue);
extern int is__186_array_long_conversion_allowed();
extern int _186_array_to_long(const void *pValue, long *nValue);
extern void compare__186_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__186_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__186_array(void *pValue);
extern int release__186_array(void *pValue);
extern int copy__186_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__186_array_Utils;

/****************************************************************
 ** _187_array 
 ****************************************************************/
extern int _187_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__187_array_string(const char *str, char **endptr);
extern int string_to__187_array(const char *str, void *pValue, char **endptr);
extern int is__187_array_double_conversion_allowed();
extern int _187_array_to_double(const void *pValue, double *nValue);
extern int is__187_array_long_conversion_allowed();
extern int _187_array_to_long(const void *pValue, long *nValue);
extern void compare__187_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__187_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__187_array(void *pValue);
extern int release__187_array(void *pValue);
extern int copy__187_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__187_array_Utils;

/****************************************************************
 ** _188_array 
 ****************************************************************/
extern int _188_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__188_array_string(const char *str, char **endptr);
extern int string_to__188_array(const char *str, void *pValue, char **endptr);
extern int is__188_array_double_conversion_allowed();
extern int _188_array_to_double(const void *pValue, double *nValue);
extern int is__188_array_long_conversion_allowed();
extern int _188_array_to_long(const void *pValue, long *nValue);
extern void compare__188_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__188_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__188_array(void *pValue);
extern int release__188_array(void *pValue);
extern int copy__188_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__188_array_Utils;

/****************************************************************
 ** _189_array 
 ****************************************************************/
extern int _189_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__189_array_string(const char *str, char **endptr);
extern int string_to__189_array(const char *str, void *pValue, char **endptr);
extern int is__189_array_double_conversion_allowed();
extern int _189_array_to_double(const void *pValue, double *nValue);
extern int is__189_array_long_conversion_allowed();
extern int _189_array_to_long(const void *pValue, long *nValue);
extern void compare__189_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__189_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__189_array(void *pValue);
extern int release__189_array(void *pValue);
extern int copy__189_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__189_array_Utils;

/****************************************************************
 ** _18_Radio_TrainTrack_Message_T_TM_transitional 
 ****************************************************************/
extern int _18_Radio_TrainTrack_Message_T_TM_transitional_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__18_Radio_TrainTrack_Message_T_TM_transitional_string(const char *str, char **endptr);
extern int string_to__18_Radio_TrainTrack_Message_T_TM_transitional(const char *str, void *pValue, char **endptr);
extern int is__18_Radio_TrainTrack_Message_T_TM_transitional_double_conversion_allowed();
extern int _18_Radio_TrainTrack_Message_T_TM_transitional_to_double(const void *pValue, double *nValue);
extern int is__18_Radio_TrainTrack_Message_T_TM_transitional_long_conversion_allowed();
extern int _18_Radio_TrainTrack_Message_T_TM_transitional_to_long(const void *pValue, long *nValue);
extern void compare__18_Radio_TrainTrack_Message_T_TM_transitional(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__18_Radio_TrainTrack_Message_T_TM_transitional_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__18_Radio_TrainTrack_Message_T_TM_transitional(void *pValue);
extern int release__18_Radio_TrainTrack_Message_T_TM_transitional(void *pValue);
extern int copy__18_Radio_TrainTrack_Message_T_TM_transitional(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__18_Radio_TrainTrack_Message_T_TM_transitional_Utils;

/****************************************************************
 ** _190_array 
 ****************************************************************/
extern int _190_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__190_array_string(const char *str, char **endptr);
extern int string_to__190_array(const char *str, void *pValue, char **endptr);
extern int is__190_array_double_conversion_allowed();
extern int _190_array_to_double(const void *pValue, double *nValue);
extern int is__190_array_long_conversion_allowed();
extern int _190_array_to_long(const void *pValue, long *nValue);
extern void compare__190_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__190_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__190_array(void *pValue);
extern int release__190_array(void *pValue);
extern int copy__190_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__190_array_Utils;

/****************************************************************
 ** _191_array 
 ****************************************************************/
extern int _191_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__191_array_string(const char *str, char **endptr);
extern int string_to__191_array(const char *str, void *pValue, char **endptr);
extern int is__191_array_double_conversion_allowed();
extern int _191_array_to_double(const void *pValue, double *nValue);
extern int is__191_array_long_conversion_allowed();
extern int _191_array_to_long(const void *pValue, long *nValue);
extern void compare__191_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__191_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__191_array(void *pValue);
extern int release__191_array(void *pValue);
extern int copy__191_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__191_array_Utils;

/****************************************************************
 ** _192_array 
 ****************************************************************/
extern int _192_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__192_array_string(const char *str, char **endptr);
extern int string_to__192_array(const char *str, void *pValue, char **endptr);
extern int is__192_array_double_conversion_allowed();
extern int _192_array_to_double(const void *pValue, double *nValue);
extern int is__192_array_long_conversion_allowed();
extern int _192_array_to_long(const void *pValue, long *nValue);
extern void compare__192_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__192_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__192_array(void *pValue);
extern int release__192_array(void *pValue);
extern int copy__192_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__192_array_Utils;

/****************************************************************
 ** _193_array 
 ****************************************************************/
extern int _193_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__193_array_string(const char *str, char **endptr);
extern int string_to__193_array(const char *str, void *pValue, char **endptr);
extern int is__193_array_double_conversion_allowed();
extern int _193_array_to_double(const void *pValue, double *nValue);
extern int is__193_array_long_conversion_allowed();
extern int _193_array_to_long(const void *pValue, long *nValue);
extern void compare__193_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__193_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__193_array(void *pValue);
extern int release__193_array(void *pValue);
extern int copy__193_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__193_array_Utils;

/****************************************************************
 ** _194_array 
 ****************************************************************/
extern int _194_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__194_array_string(const char *str, char **endptr);
extern int string_to__194_array(const char *str, void *pValue, char **endptr);
extern int is__194_array_double_conversion_allowed();
extern int _194_array_to_double(const void *pValue, double *nValue);
extern int is__194_array_long_conversion_allowed();
extern int _194_array_to_long(const void *pValue, long *nValue);
extern void compare__194_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__194_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__194_array(void *pValue);
extern int release__194_array(void *pValue);
extern int copy__194_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__194_array_Utils;

/****************************************************************
 ** _195_array 
 ****************************************************************/
extern int _195_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__195_array_string(const char *str, char **endptr);
extern int string_to__195_array(const char *str, void *pValue, char **endptr);
extern int is__195_array_double_conversion_allowed();
extern int _195_array_to_double(const void *pValue, double *nValue);
extern int is__195_array_long_conversion_allowed();
extern int _195_array_to_long(const void *pValue, long *nValue);
extern void compare__195_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__195_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__195_array(void *pValue);
extern int release__195_array(void *pValue);
extern int copy__195_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__195_array_Utils;

/****************************************************************
 ** _196_array 
 ****************************************************************/
extern int _196_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__196_array_string(const char *str, char **endptr);
extern int string_to__196_array(const char *str, void *pValue, char **endptr);
extern int is__196_array_double_conversion_allowed();
extern int _196_array_to_double(const void *pValue, double *nValue);
extern int is__196_array_long_conversion_allowed();
extern int _196_array_to_long(const void *pValue, long *nValue);
extern void compare__196_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__196_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__196_array(void *pValue);
extern int release__196_array(void *pValue);
extern int copy__196_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__196_array_Utils;

/****************************************************************
 ** _197_array 
 ****************************************************************/
extern int _197_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__197_array_string(const char *str, char **endptr);
extern int string_to__197_array(const char *str, void *pValue, char **endptr);
extern int is__197_array_double_conversion_allowed();
extern int _197_array_to_double(const void *pValue, double *nValue);
extern int is__197_array_long_conversion_allowed();
extern int _197_array_to_long(const void *pValue, long *nValue);
extern void compare__197_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__197_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__197_array(void *pValue);
extern int release__197_array(void *pValue);
extern int copy__197_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__197_array_Utils;

/****************************************************************
 ** _198_array 
 ****************************************************************/
extern int _198_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__198_array_string(const char *str, char **endptr);
extern int string_to__198_array(const char *str, void *pValue, char **endptr);
extern int is__198_array_double_conversion_allowed();
extern int _198_array_to_double(const void *pValue, double *nValue);
extern int is__198_array_long_conversion_allowed();
extern int _198_array_to_long(const void *pValue, long *nValue);
extern void compare__198_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__198_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__198_array(void *pValue);
extern int release__198_array(void *pValue);
extern int copy__198_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__198_array_Utils;

/****************************************************************
 ** _199_array 
 ****************************************************************/
extern int _199_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__199_array_string(const char *str, char **endptr);
extern int string_to__199_array(const char *str, void *pValue, char **endptr);
extern int is__199_array_double_conversion_allowed();
extern int _199_array_to_double(const void *pValue, double *nValue);
extern int is__199_array_long_conversion_allowed();
extern int _199_array_to_long(const void *pValue, long *nValue);
extern void compare__199_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__199_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__199_array(void *pValue);
extern int release__199_array(void *pValue);
extern int copy__199_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__199_array_Utils;

/****************************************************************
 ** _200_array 
 ****************************************************************/
extern int _200_array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__200_array_string(const char *str, char **endptr);
extern int string_to__200_array(const char *str, void *pValue, char **endptr);
extern int is__200_array_double_conversion_allowed();
extern int _200_array_to_double(const void *pValue, double *nValue);
extern int is__200_array_long_conversion_allowed();
extern int _200_array_to_long(const void *pValue, long *nValue);
extern void compare__200_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__200_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__200_array(void *pValue);
extern int release__200_array(void *pValue);
extern int copy__200_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__200_array_Utils;

/****************************************************************
 ** _201_SSM_ST_SM1 
 ****************************************************************/
extern int _201_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__201_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__201_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__201_SSM_ST_SM1_double_conversion_allowed();
extern int _201_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__201_SSM_ST_SM1_long_conversion_allowed();
extern int _201_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__201_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__201_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__201_SSM_ST_SM1(void *pValue);
extern int release__201_SSM_ST_SM1(void *pValue);
extern int copy__201_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__201_SSM_ST_SM1_Utils;

/****************************************************************
 ** _202_SSM_TR_SM1 
 ****************************************************************/
extern int _202_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__202_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__202_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__202_SSM_TR_SM1_double_conversion_allowed();
extern int _202_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__202_SSM_TR_SM1_long_conversion_allowed();
extern int _202_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__202_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__202_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__202_SSM_TR_SM1(void *pValue);
extern int release__202_SSM_TR_SM1(void *pValue);
extern int copy__202_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__202_SSM_TR_SM1_Utils;

/****************************************************************
 ** _203_SSM_ST_SM1 
 ****************************************************************/
extern int _203_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__203_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__203_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__203_SSM_ST_SM1_double_conversion_allowed();
extern int _203_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__203_SSM_ST_SM1_long_conversion_allowed();
extern int _203_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__203_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__203_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__203_SSM_ST_SM1(void *pValue);
extern int release__203_SSM_ST_SM1(void *pValue);
extern int copy__203_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__203_SSM_ST_SM1_Utils;

/****************************************************************
 ** _204_SSM_TR_SM1 
 ****************************************************************/
extern int _204_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__204_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__204_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__204_SSM_TR_SM1_double_conversion_allowed();
extern int _204_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__204_SSM_TR_SM1_long_conversion_allowed();
extern int _204_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__204_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__204_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__204_SSM_TR_SM1(void *pValue);
extern int release__204_SSM_TR_SM1(void *pValue);
extern int copy__204_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__204_SSM_TR_SM1_Utils;

/****************************************************************
 ** _205_SSM_ST_SM1 
 ****************************************************************/
extern int _205_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__205_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__205_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__205_SSM_ST_SM1_double_conversion_allowed();
extern int _205_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__205_SSM_ST_SM1_long_conversion_allowed();
extern int _205_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__205_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__205_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__205_SSM_ST_SM1(void *pValue);
extern int release__205_SSM_ST_SM1(void *pValue);
extern int copy__205_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__205_SSM_ST_SM1_Utils;

/****************************************************************
 ** _206_SSM_TR_SM1 
 ****************************************************************/
extern int _206_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__206_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__206_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__206_SSM_TR_SM1_double_conversion_allowed();
extern int _206_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__206_SSM_TR_SM1_long_conversion_allowed();
extern int _206_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__206_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__206_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__206_SSM_TR_SM1(void *pValue);
extern int release__206_SSM_TR_SM1(void *pValue);
extern int copy__206_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__206_SSM_TR_SM1_Utils;

/****************************************************************
 ** _207_SSM_ST_SM1 
 ****************************************************************/
extern int _207_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__207_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__207_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__207_SSM_ST_SM1_double_conversion_allowed();
extern int _207_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__207_SSM_ST_SM1_long_conversion_allowed();
extern int _207_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__207_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__207_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__207_SSM_ST_SM1(void *pValue);
extern int release__207_SSM_ST_SM1(void *pValue);
extern int copy__207_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__207_SSM_ST_SM1_Utils;

/****************************************************************
 ** _208_SSM_TR_SM1 
 ****************************************************************/
extern int _208_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__208_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__208_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__208_SSM_TR_SM1_double_conversion_allowed();
extern int _208_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__208_SSM_TR_SM1_long_conversion_allowed();
extern int _208_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__208_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__208_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__208_SSM_TR_SM1(void *pValue);
extern int release__208_SSM_TR_SM1(void *pValue);
extern int copy__208_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__208_SSM_TR_SM1_Utils;

/****************************************************************
 ** _209_SSM_ST_SM1 
 ****************************************************************/
extern int _209_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__209_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__209_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__209_SSM_ST_SM1_double_conversion_allowed();
extern int _209_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__209_SSM_ST_SM1_long_conversion_allowed();
extern int _209_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__209_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__209_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__209_SSM_ST_SM1(void *pValue);
extern int release__209_SSM_ST_SM1(void *pValue);
extern int copy__209_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__209_SSM_ST_SM1_Utils;

/****************************************************************
 ** _210_SSM_TR_SM1 
 ****************************************************************/
extern int _210_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__210_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__210_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__210_SSM_TR_SM1_double_conversion_allowed();
extern int _210_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__210_SSM_TR_SM1_long_conversion_allowed();
extern int _210_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__210_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__210_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__210_SSM_TR_SM1(void *pValue);
extern int release__210_SSM_TR_SM1(void *pValue);
extern int copy__210_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__210_SSM_TR_SM1_Utils;

/****************************************************************
 ** _211_SSM_ST_SM1 
 ****************************************************************/
extern int _211_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__211_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__211_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__211_SSM_ST_SM1_double_conversion_allowed();
extern int _211_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__211_SSM_ST_SM1_long_conversion_allowed();
extern int _211_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__211_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__211_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__211_SSM_ST_SM1(void *pValue);
extern int release__211_SSM_ST_SM1(void *pValue);
extern int copy__211_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__211_SSM_ST_SM1_Utils;

/****************************************************************
 ** _212_SSM_TR_SM1 
 ****************************************************************/
extern int _212_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__212_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__212_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__212_SSM_TR_SM1_double_conversion_allowed();
extern int _212_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__212_SSM_TR_SM1_long_conversion_allowed();
extern int _212_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__212_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__212_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__212_SSM_TR_SM1(void *pValue);
extern int release__212_SSM_TR_SM1(void *pValue);
extern int copy__212_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__212_SSM_TR_SM1_Utils;

/****************************************************************
 ** _213_SSM_ST_SM1 
 ****************************************************************/
extern int _213_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__213_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__213_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__213_SSM_ST_SM1_double_conversion_allowed();
extern int _213_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__213_SSM_ST_SM1_long_conversion_allowed();
extern int _213_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__213_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__213_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__213_SSM_ST_SM1(void *pValue);
extern int release__213_SSM_ST_SM1(void *pValue);
extern int copy__213_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__213_SSM_ST_SM1_Utils;

/****************************************************************
 ** _214_SSM_TR_SM1 
 ****************************************************************/
extern int _214_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__214_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__214_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__214_SSM_TR_SM1_double_conversion_allowed();
extern int _214_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__214_SSM_TR_SM1_long_conversion_allowed();
extern int _214_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__214_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__214_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__214_SSM_TR_SM1(void *pValue);
extern int release__214_SSM_TR_SM1(void *pValue);
extern int copy__214_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__214_SSM_TR_SM1_Utils;

/****************************************************************
 ** _215_SSM_ST_SM1 
 ****************************************************************/
extern int _215_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__215_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__215_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__215_SSM_ST_SM1_double_conversion_allowed();
extern int _215_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__215_SSM_ST_SM1_long_conversion_allowed();
extern int _215_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__215_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__215_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__215_SSM_ST_SM1(void *pValue);
extern int release__215_SSM_ST_SM1(void *pValue);
extern int copy__215_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__215_SSM_ST_SM1_Utils;

/****************************************************************
 ** _216_SSM_TR_SM1 
 ****************************************************************/
extern int _216_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__216_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__216_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__216_SSM_TR_SM1_double_conversion_allowed();
extern int _216_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__216_SSM_TR_SM1_long_conversion_allowed();
extern int _216_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__216_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__216_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__216_SSM_TR_SM1(void *pValue);
extern int release__216_SSM_TR_SM1(void *pValue);
extern int copy__216_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__216_SSM_TR_SM1_Utils;

/****************************************************************
 ** _217_SSM_ST_SM1 
 ****************************************************************/
extern int _217_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__217_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__217_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__217_SSM_ST_SM1_double_conversion_allowed();
extern int _217_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__217_SSM_ST_SM1_long_conversion_allowed();
extern int _217_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__217_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__217_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__217_SSM_ST_SM1(void *pValue);
extern int release__217_SSM_ST_SM1(void *pValue);
extern int copy__217_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__217_SSM_ST_SM1_Utils;

/****************************************************************
 ** _218_SSM_TR_SM1 
 ****************************************************************/
extern int _218_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__218_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__218_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__218_SSM_TR_SM1_double_conversion_allowed();
extern int _218_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__218_SSM_TR_SM1_long_conversion_allowed();
extern int _218_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__218_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__218_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__218_SSM_TR_SM1(void *pValue);
extern int release__218_SSM_TR_SM1(void *pValue);
extern int copy__218_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__218_SSM_TR_SM1_Utils;

/****************************************************************
 ** _219_SSM_ST_SM1 
 ****************************************************************/
extern int _219_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__219_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__219_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__219_SSM_ST_SM1_double_conversion_allowed();
extern int _219_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__219_SSM_ST_SM1_long_conversion_allowed();
extern int _219_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__219_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__219_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__219_SSM_ST_SM1(void *pValue);
extern int release__219_SSM_ST_SM1(void *pValue);
extern int copy__219_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__219_SSM_ST_SM1_Utils;

/****************************************************************
 ** _220_SSM_TR_SM1 
 ****************************************************************/
extern int _220_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__220_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__220_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__220_SSM_TR_SM1_double_conversion_allowed();
extern int _220_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__220_SSM_TR_SM1_long_conversion_allowed();
extern int _220_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__220_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__220_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__220_SSM_TR_SM1(void *pValue);
extern int release__220_SSM_TR_SM1(void *pValue);
extern int copy__220_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__220_SSM_TR_SM1_Utils;

/****************************************************************
 ** _221_SSM_ST_SM1 
 ****************************************************************/
extern int _221_SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__221_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to__221_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is__221_SSM_ST_SM1_double_conversion_allowed();
extern int _221_SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is__221_SSM_ST_SM1_long_conversion_allowed();
extern int _221_SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare__221_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__221_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__221_SSM_ST_SM1(void *pValue);
extern int release__221_SSM_ST_SM1(void *pValue);
extern int copy__221_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__221_SSM_ST_SM1_Utils;

/****************************************************************
 ** _222_SSM_TR_SM1 
 ****************************************************************/
extern int _222_SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__222_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to__222_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is__222_SSM_TR_SM1_double_conversion_allowed();
extern int _222_SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is__222_SSM_TR_SM1_long_conversion_allowed();
extern int _222_SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare__222_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__222_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__222_SSM_TR_SM1(void *pValue);
extern int release__222_SSM_TR_SM1(void *pValue);
extern int copy__222_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__222_SSM_TR_SM1_Utils;

/****************************************************************
 ** _2_MovementAuthoritySection_t_TrackAtlasTypes 
 ****************************************************************/
extern int _2_MovementAuthoritySection_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__2_MovementAuthoritySection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to__2_MovementAuthoritySection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is__2_MovementAuthoritySection_t_TrackAtlasTypes_double_conversion_allowed();
extern int _2_MovementAuthoritySection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is__2_MovementAuthoritySection_t_TrackAtlasTypes_long_conversion_allowed();
extern int _2_MovementAuthoritySection_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare__2_MovementAuthoritySection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__2_MovementAuthoritySection_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__2_MovementAuthoritySection_t_TrackAtlasTypes(void *pValue);
extern int release__2_MovementAuthoritySection_t_TrackAtlasTypes(void *pValue);
extern int copy__2_MovementAuthoritySection_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__2_MovementAuthoritySection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** _3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int _3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int _3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int _3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(void *pValue);
extern int release__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(void *pValue);
extern int copy__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__3_P027V1_OBU_sectionlist_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** _4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int _4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int _4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int _4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__4_DMI_Track_Description_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** _5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int _5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int _5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int _5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__5_DMI_Driver_Identifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** _6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int _6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_double_conversion_allowed();
extern int _6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_long_conversion_allowed();
extern int _6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int release__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int copy__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__6_P15_Level23MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** _7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg 
 ****************************************************************/
extern int _7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_double_conversion_allowed();
extern int _7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_long_conversion_allowed();
extern int _7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int release__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(void *pValue);
extern int copy__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__7_P12_Level1MovementAuthorities_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** _8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int _8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_double_conversion_allowed();
extern int _8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_long_conversion_allowed();
extern int _8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(void *pValue);
extern int release__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(void *pValue);
extern int copy__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__8_P46_ConditionalLevelTransitionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** _9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int _9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int _9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int _9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type__9_P203V1_OBU_k_m_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** a_Brake_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_Brake_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_a_Brake_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_Brake_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_Brake_t_SDMConversionModelPkg_double_conversion_allowed();
extern int a_Brake_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_a_Brake_t_SDMConversionModelPkg_long_conversion_allowed();
extern int a_Brake_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_a_Brake_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_a_Brake_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_a_Brake_t_SDMConversionModelPkg(void *pValue);
extern int release_a_Brake_t_SDMConversionModelPkg(void *pValue);
extern int copy_a_Brake_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_a_Brake_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** a_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_a_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_BrakeSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_a_BrakeSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int a_BrakeSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_a_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_a_BrakeSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_a_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_a_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_a_BrakeSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_a_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** A_gradient_element_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_gradient_element_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_element_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_element_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_A_gradient_element_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int A_gradient_element_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_A_gradient_element_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_gradient_element_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_gradient_element_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_A_gradient_element_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_A_gradient_element_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_gradient_element_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_gradient_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int A_gradient_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_gradient_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_A_gradient_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_A_gradient_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int A_gradient_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_A_gradient_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int A_gradient_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_A_gradient_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_gradient_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_gradient_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_A_gradient_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_A_gradient_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_gradient_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** A_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int A_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int A_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_A_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int A_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_A_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_A_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_A_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** A_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_A_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_A_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_A_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int A_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_A_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_A_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_A_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** a_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int a_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_a_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_a_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_a_MergedSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int a_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_a_MergedSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int a_MergedSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_a_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_a_MergedSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_a_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_a_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_a_MergedSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_a_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** A_NVMAXREDADH1 
 ****************************************************************/
extern int A_NVMAXREDADH1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVMAXREDADH1_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH1(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH1_double_conversion_allowed();
extern int A_NVMAXREDADH1_to_double(const void *pValue, double *nValue);
extern int is_A_NVMAXREDADH1_long_conversion_allowed();
extern int A_NVMAXREDADH1_to_long(const void *pValue, long *nValue);
extern void compare_A_NVMAXREDADH1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVMAXREDADH1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVMAXREDADH1(void *pValue);
extern int release_A_NVMAXREDADH1(void *pValue);
extern int copy_A_NVMAXREDADH1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVMAXREDADH1_Utils;

/****************************************************************
 ** A_NVMAXREDADH2 
 ****************************************************************/
extern int A_NVMAXREDADH2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVMAXREDADH2_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH2(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH2_double_conversion_allowed();
extern int A_NVMAXREDADH2_to_double(const void *pValue, double *nValue);
extern int is_A_NVMAXREDADH2_long_conversion_allowed();
extern int A_NVMAXREDADH2_to_long(const void *pValue, long *nValue);
extern void compare_A_NVMAXREDADH2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVMAXREDADH2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVMAXREDADH2(void *pValue);
extern int release_A_NVMAXREDADH2(void *pValue);
extern int copy_A_NVMAXREDADH2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVMAXREDADH2_Utils;

/****************************************************************
 ** A_NVMAXREDADH3 
 ****************************************************************/
extern int A_NVMAXREDADH3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVMAXREDADH3_string(const char *str, char **endptr);
extern int string_to_A_NVMAXREDADH3(const char *str, void *pValue, char **endptr);
extern int is_A_NVMAXREDADH3_double_conversion_allowed();
extern int A_NVMAXREDADH3_to_double(const void *pValue, double *nValue);
extern int is_A_NVMAXREDADH3_long_conversion_allowed();
extern int A_NVMAXREDADH3_to_long(const void *pValue, long *nValue);
extern void compare_A_NVMAXREDADH3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVMAXREDADH3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVMAXREDADH3(void *pValue);
extern int release_A_NVMAXREDADH3(void *pValue);
extern int copy_A_NVMAXREDADH3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVMAXREDADH3_Utils;

/****************************************************************
 ** A_NVP12 
 ****************************************************************/
extern int A_NVP12_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVP12_string(const char *str, char **endptr);
extern int string_to_A_NVP12(const char *str, void *pValue, char **endptr);
extern int is_A_NVP12_double_conversion_allowed();
extern int A_NVP12_to_double(const void *pValue, double *nValue);
extern int is_A_NVP12_long_conversion_allowed();
extern int A_NVP12_to_long(const void *pValue, long *nValue);
extern void compare_A_NVP12(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVP12_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVP12(void *pValue);
extern int release_A_NVP12(void *pValue);
extern int copy_A_NVP12(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVP12_Utils;

/****************************************************************
 ** A_NVP23 
 ****************************************************************/
extern int A_NVP23_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_A_NVP23_string(const char *str, char **endptr);
extern int string_to_A_NVP23(const char *str, void *pValue, char **endptr);
extern int is_A_NVP23_double_conversion_allowed();
extern int A_NVP23_to_double(const void *pValue, double *nValue);
extern int is_A_NVP23_long_conversion_allowed();
extern int A_NVP23_to_long(const void *pValue, long *nValue);
extern void compare_A_NVP23(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_A_NVP23_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_A_NVP23(void *pValue);
extern int release_A_NVP23(void *pValue);
extern int copy_A_NVP23(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_A_NVP23_Utils;

/****************************************************************
 ** abilityToHandleCommunicationSessions_Handover_Pkg 
 ****************************************************************/
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_abilityToHandleCommunicationSessions_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_abilityToHandleCommunicationSessions_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_abilityToHandleCommunicationSessions_Handover_Pkg_double_conversion_allowed();
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int is_abilityToHandleCommunicationSessions_Handover_Pkg_long_conversion_allowed();
extern int abilityToHandleCommunicationSessions_Handover_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_abilityToHandleCommunicationSessions_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_abilityToHandleCommunicationSessions_Handover_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_abilityToHandleCommunicationSessions_Handover_Pkg(void *pValue);
extern int release_abilityToHandleCommunicationSessions_Handover_Pkg(void *pValue);
extern int copy_abilityToHandleCommunicationSessions_Handover_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_abilityToHandleCommunicationSessions_Handover_Pkg_Utils;

/****************************************************************
 ** ACC_SDM_GradientAcceleration_Pkg 
 ****************************************************************/
extern int ACC_SDM_GradientAcceleration_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ACC_SDM_GradientAcceleration_Pkg_string(const char *str, char **endptr);
extern int string_to_ACC_SDM_GradientAcceleration_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ACC_SDM_GradientAcceleration_Pkg_double_conversion_allowed();
extern int ACC_SDM_GradientAcceleration_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ACC_SDM_GradientAcceleration_Pkg_long_conversion_allowed();
extern int ACC_SDM_GradientAcceleration_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ACC_SDM_GradientAcceleration_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ACC_SDM_GradientAcceleration_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ACC_SDM_GradientAcceleration_Pkg(void *pValue);
extern int release_ACC_SDM_GradientAcceleration_Pkg(void *pValue);
extern int copy_ACC_SDM_GradientAcceleration_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ACC_SDM_GradientAcceleration_Pkg_Utils;

/****************************************************************
 ** AccuDistanceProfileMA_TA_MA_new 
 ****************************************************************/
extern int AccuDistanceProfileMA_TA_MA_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_AccuDistanceProfileMA_TA_MA_new_string(const char *str, char **endptr);
extern int string_to_AccuDistanceProfileMA_TA_MA_new(const char *str, void *pValue, char **endptr);
extern int is_AccuDistanceProfileMA_TA_MA_new_double_conversion_allowed();
extern int AccuDistanceProfileMA_TA_MA_new_to_double(const void *pValue, double *nValue);
extern int is_AccuDistanceProfileMA_TA_MA_new_long_conversion_allowed();
extern int AccuDistanceProfileMA_TA_MA_new_to_long(const void *pValue, long *nValue);
extern void compare_AccuDistanceProfileMA_TA_MA_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_AccuDistanceProfileMA_TA_MA_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_AccuDistanceProfileMA_TA_MA_new(void *pValue);
extern int release_AccuDistanceProfileMA_TA_MA_new(void *pValue);
extern int copy_AccuDistanceProfileMA_TA_MA_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_AccuDistanceProfileMA_TA_MA_new_Utils;

/****************************************************************
 ** ActionType_TA_MA_new 
 ****************************************************************/
extern int ActionType_TA_MA_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ActionType_TA_MA_new_string(const char *str, char **endptr);
extern int string_to_ActionType_TA_MA_new(const char *str, void *pValue, char **endptr);
extern int is_ActionType_TA_MA_new_double_conversion_allowed();
extern int ActionType_TA_MA_new_to_double(const void *pValue, double *nValue);
extern int is_ActionType_TA_MA_new_long_conversion_allowed();
extern int ActionType_TA_MA_new_to_long(const void *pValue, long *nValue);
extern void compare_ActionType_TA_MA_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ActionType_TA_MA_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ActionType_TA_MA_new(void *pValue);
extern int release_ActionType_TA_MA_new(void *pValue);
extern int copy_ActionType_TA_MA_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ActionType_TA_MA_new_Utils;

/****************************************************************
 ** aNID_NTC_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_aNID_NTC_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_NTC_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_NTC_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_aNID_NTC_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int aNID_NTC_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_aNID_NTC_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_aNID_NTC_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_aNID_NTC_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_aNID_NTC_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_aNID_NTC_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_aNID_NTC_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** aNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_aNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aNID_RADIO_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_aNID_RADIO_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int aNID_RADIO_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_aNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_aNID_RADIO_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_aNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_aNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_aNID_RADIO_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_aNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** API_RadioMsgHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_API_RadioMsgHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_RadioMsgHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_RadioMsgHeader_T_API_Msg_Pkg_double_conversion_allowed();
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_API_RadioMsgHeader_T_API_Msg_Pkg_long_conversion_allowed();
extern int API_RadioMsgHeader_T_API_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_API_RadioMsgHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_API_RadioMsgHeader_T_API_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_API_RadioMsgHeader_T_API_Msg_Pkg(void *pValue);
extern int release_API_RadioMsgHeader_T_API_Msg_Pkg(void *pValue);
extern int copy_API_RadioMsgHeader_T_API_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_API_RadioMsgHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_TelegramHeader_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TelegramHeader_T_API_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_API_TelegramHeader_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TelegramHeader_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TelegramHeader_T_API_Msg_Pkg_double_conversion_allowed();
extern int API_TelegramHeader_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_API_TelegramHeader_T_API_Msg_Pkg_long_conversion_allowed();
extern int API_TelegramHeader_T_API_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_API_TelegramHeader_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_API_TelegramHeader_T_API_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_API_TelegramHeader_T_API_Msg_Pkg(void *pValue);
extern int release_API_TelegramHeader_T_API_Msg_Pkg(void *pValue);
extern int copy_API_TelegramHeader_T_API_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_API_TelegramHeader_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** API_TrackSideInput_T_API_Msg_Pkg 
 ****************************************************************/
extern int API_TrackSideInput_T_API_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_API_TrackSideInput_T_API_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_API_TrackSideInput_T_API_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_API_TrackSideInput_T_API_Msg_Pkg_double_conversion_allowed();
extern int API_TrackSideInput_T_API_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_API_TrackSideInput_T_API_Msg_Pkg_long_conversion_allowed();
extern int API_TrackSideInput_T_API_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_API_TrackSideInput_T_API_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_API_TrackSideInput_T_API_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_API_TrackSideInput_T_API_Msg_Pkg(void *pValue);
extern int release_API_TrackSideInput_T_API_Msg_Pkg(void *pValue);
extern int copy_API_TrackSideInput_T_API_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_API_TrackSideInput_T_API_Msg_Pkg_Utils;

/****************************************************************
 ** Area_group_INT_T_DATA 
 ****************************************************************/
extern int Area_group_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Area_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Area_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Area_group_INT_T_DATA_double_conversion_allowed();
extern int Area_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_Area_group_INT_T_DATA_long_conversion_allowed();
extern int Area_group_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_Area_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Area_group_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Area_group_INT_T_DATA(void *pValue);
extern int release_Area_group_INT_T_DATA(void *pValue);
extern int copy_Area_group_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Area_group_INT_T_DATA_Utils;

/****************************************************************
 ** Area_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Area_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Area_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Area_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Area_group_T_DMI_Types_Pkg_double_conversion_allowed();
extern int Area_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Area_group_T_DMI_Types_Pkg_long_conversion_allowed();
extern int Area_group_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Area_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Area_group_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Area_group_T_DMI_Types_Pkg(void *pValue);
extern int release_Area_group_T_DMI_Types_Pkg(void *pValue);
extern int copy_Area_group_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Area_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** array 
 ****************************************************************/
extern int array_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_string(const char *str, char **endptr);
extern int string_to_array(const char *str, void *pValue, char **endptr);
extern int is_array_double_conversion_allowed();
extern int array_to_double(const void *pValue, double *nValue);
extern int is_array_long_conversion_allowed();
extern int array_to_long(const void *pValue, long *nValue);
extern void compare_array(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array(void *pValue);
extern int release_array(void *pValue);
extern int copy_array(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_Utils;

/****************************************************************
 ** Array03_TM 
 ****************************************************************/
extern int Array03_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array03_TM_string(const char *str, char **endptr);
extern int string_to_Array03_TM(const char *str, void *pValue, char **endptr);
extern int is_Array03_TM_double_conversion_allowed();
extern int Array03_TM_to_double(const void *pValue, double *nValue);
extern int is_Array03_TM_long_conversion_allowed();
extern int Array03_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array03_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array03_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array03_TM(void *pValue);
extern int release_Array03_TM(void *pValue);
extern int copy_Array03_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array03_TM_Utils;

/****************************************************************
 ** Array04_TM 
 ****************************************************************/
extern int Array04_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array04_TM_string(const char *str, char **endptr);
extern int string_to_Array04_TM(const char *str, void *pValue, char **endptr);
extern int is_Array04_TM_double_conversion_allowed();
extern int Array04_TM_to_double(const void *pValue, double *nValue);
extern int is_Array04_TM_long_conversion_allowed();
extern int Array04_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array04_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array04_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array04_TM(void *pValue);
extern int release_Array04_TM(void *pValue);
extern int copy_Array04_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array04_TM_Utils;

/****************************************************************
 ** Array05_TM 
 ****************************************************************/
extern int Array05_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array05_TM_string(const char *str, char **endptr);
extern int string_to_Array05_TM(const char *str, void *pValue, char **endptr);
extern int is_Array05_TM_double_conversion_allowed();
extern int Array05_TM_to_double(const void *pValue, double *nValue);
extern int is_Array05_TM_long_conversion_allowed();
extern int Array05_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array05_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array05_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array05_TM(void *pValue);
extern int release_Array05_TM(void *pValue);
extern int copy_Array05_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array05_TM_Utils;

/****************************************************************
 ** Array06_TM 
 ****************************************************************/
extern int Array06_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array06_TM_string(const char *str, char **endptr);
extern int string_to_Array06_TM(const char *str, void *pValue, char **endptr);
extern int is_Array06_TM_double_conversion_allowed();
extern int Array06_TM_to_double(const void *pValue, double *nValue);
extern int is_Array06_TM_long_conversion_allowed();
extern int Array06_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array06_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array06_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array06_TM(void *pValue);
extern int release_Array06_TM(void *pValue);
extern int copy_Array06_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array06_TM_Utils;

/****************************************************************
 ** Array07_TM 
 ****************************************************************/
extern int Array07_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array07_TM_string(const char *str, char **endptr);
extern int string_to_Array07_TM(const char *str, void *pValue, char **endptr);
extern int is_Array07_TM_double_conversion_allowed();
extern int Array07_TM_to_double(const void *pValue, double *nValue);
extern int is_Array07_TM_long_conversion_allowed();
extern int Array07_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array07_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array07_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array07_TM(void *pValue);
extern int release_Array07_TM(void *pValue);
extern int copy_Array07_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array07_TM_Utils;

/****************************************************************
 ** Array08_TM 
 ****************************************************************/
extern int Array08_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array08_TM_string(const char *str, char **endptr);
extern int string_to_Array08_TM(const char *str, void *pValue, char **endptr);
extern int is_Array08_TM_double_conversion_allowed();
extern int Array08_TM_to_double(const void *pValue, double *nValue);
extern int is_Array08_TM_long_conversion_allowed();
extern int Array08_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array08_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array08_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array08_TM(void *pValue);
extern int release_Array08_TM(void *pValue);
extern int copy_Array08_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array08_TM_Utils;

/****************************************************************
 ** Array09_TM 
 ****************************************************************/
extern int Array09_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array09_TM_string(const char *str, char **endptr);
extern int string_to_Array09_TM(const char *str, void *pValue, char **endptr);
extern int is_Array09_TM_double_conversion_allowed();
extern int Array09_TM_to_double(const void *pValue, double *nValue);
extern int is_Array09_TM_long_conversion_allowed();
extern int Array09_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array09_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array09_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array09_TM(void *pValue);
extern int release_Array09_TM(void *pValue);
extern int copy_Array09_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array09_TM_Utils;

/****************************************************************
 ** Array15_TM 
 ****************************************************************/
extern int Array15_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array15_TM_string(const char *str, char **endptr);
extern int string_to_Array15_TM(const char *str, void *pValue, char **endptr);
extern int is_Array15_TM_double_conversion_allowed();
extern int Array15_TM_to_double(const void *pValue, double *nValue);
extern int is_Array15_TM_long_conversion_allowed();
extern int Array15_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array15_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array15_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array15_TM(void *pValue);
extern int release_Array15_TM(void *pValue);
extern int copy_Array15_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array15_TM_Utils;

/****************************************************************
 ** Array24_TM 
 ****************************************************************/
extern int Array24_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Array24_TM_string(const char *str, char **endptr);
extern int string_to_Array24_TM(const char *str, void *pValue, char **endptr);
extern int is_Array24_TM_double_conversion_allowed();
extern int Array24_TM_to_double(const void *pValue, double *nValue);
extern int is_Array24_TM_long_conversion_allowed();
extern int Array24_TM_to_long(const void *pValue, long *nValue);
extern void compare_Array24_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Array24_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Array24_TM(void *pValue);
extern int release_Array24_TM(void *pValue);
extern int copy_Array24_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Array24_TM_Utils;

/****************************************************************
 ** array_bool_1 
 ****************************************************************/
extern int array_bool_1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_1_string(const char *str, char **endptr);
extern int string_to_array_bool_1(const char *str, void *pValue, char **endptr);
extern int is_array_bool_1_double_conversion_allowed();
extern int array_bool_1_to_double(const void *pValue, double *nValue);
extern int is_array_bool_1_long_conversion_allowed();
extern int array_bool_1_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_1(void *pValue);
extern int release_array_bool_1(void *pValue);
extern int copy_array_bool_1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_1_Utils;

/****************************************************************
 ** array_bool_100 
 ****************************************************************/
extern int array_bool_100_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_100_string(const char *str, char **endptr);
extern int string_to_array_bool_100(const char *str, void *pValue, char **endptr);
extern int is_array_bool_100_double_conversion_allowed();
extern int array_bool_100_to_double(const void *pValue, double *nValue);
extern int is_array_bool_100_long_conversion_allowed();
extern int array_bool_100_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_100(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_100_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_100(void *pValue);
extern int release_array_bool_100(void *pValue);
extern int copy_array_bool_100(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_100_Utils;

/****************************************************************
 ** array_bool_110 
 ****************************************************************/
extern int array_bool_110_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_110_string(const char *str, char **endptr);
extern int string_to_array_bool_110(const char *str, void *pValue, char **endptr);
extern int is_array_bool_110_double_conversion_allowed();
extern int array_bool_110_to_double(const void *pValue, double *nValue);
extern int is_array_bool_110_long_conversion_allowed();
extern int array_bool_110_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_110(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_110_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_110(void *pValue);
extern int release_array_bool_110(void *pValue);
extern int copy_array_bool_110(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_110_Utils;

/****************************************************************
 ** array_bool_113 
 ****************************************************************/
extern int array_bool_113_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_113_string(const char *str, char **endptr);
extern int string_to_array_bool_113(const char *str, void *pValue, char **endptr);
extern int is_array_bool_113_double_conversion_allowed();
extern int array_bool_113_to_double(const void *pValue, double *nValue);
extern int is_array_bool_113_long_conversion_allowed();
extern int array_bool_113_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_113(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_113_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_113(void *pValue);
extern int release_array_bool_113(void *pValue);
extern int copy_array_bool_113(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_113_Utils;

/****************************************************************
 ** array_bool_256 
 ****************************************************************/
extern int array_bool_256_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_256_string(const char *str, char **endptr);
extern int string_to_array_bool_256(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_double_conversion_allowed();
extern int array_bool_256_to_double(const void *pValue, double *nValue);
extern int is_array_bool_256_long_conversion_allowed();
extern int array_bool_256_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_256(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_256_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_256(void *pValue);
extern int release_array_bool_256(void *pValue);
extern int copy_array_bool_256(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_256_Utils;

/****************************************************************
 ** array_bool_256_46_30 
 ****************************************************************/
extern int array_bool_256_46_30_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_256_46_30_string(const char *str, char **endptr);
extern int string_to_array_bool_256_46_30(const char *str, void *pValue, char **endptr);
extern int is_array_bool_256_46_30_double_conversion_allowed();
extern int array_bool_256_46_30_to_double(const void *pValue, double *nValue);
extern int is_array_bool_256_46_30_long_conversion_allowed();
extern int array_bool_256_46_30_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_256_46_30(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_256_46_30_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_256_46_30(void *pValue);
extern int release_array_bool_256_46_30(void *pValue);
extern int copy_array_bool_256_46_30(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_256_46_30_Utils;

/****************************************************************
 ** array_bool_30 
 ****************************************************************/
extern int array_bool_30_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_30_string(const char *str, char **endptr);
extern int string_to_array_bool_30(const char *str, void *pValue, char **endptr);
extern int is_array_bool_30_double_conversion_allowed();
extern int array_bool_30_to_double(const void *pValue, double *nValue);
extern int is_array_bool_30_long_conversion_allowed();
extern int array_bool_30_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_30(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_30_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_30(void *pValue);
extern int release_array_bool_30(void *pValue);
extern int copy_array_bool_30(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_30_Utils;

/****************************************************************
 ** array_bool_4 
 ****************************************************************/
extern int array_bool_4_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_4_string(const char *str, char **endptr);
extern int string_to_array_bool_4(const char *str, void *pValue, char **endptr);
extern int is_array_bool_4_double_conversion_allowed();
extern int array_bool_4_to_double(const void *pValue, double *nValue);
extern int is_array_bool_4_long_conversion_allowed();
extern int array_bool_4_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_4(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_4_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_4(void *pValue);
extern int release_array_bool_4(void *pValue);
extern int copy_array_bool_4(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_4_Utils;

/****************************************************************
 ** array_bool_41 
 ****************************************************************/
extern int array_bool_41_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_41_string(const char *str, char **endptr);
extern int string_to_array_bool_41(const char *str, void *pValue, char **endptr);
extern int is_array_bool_41_double_conversion_allowed();
extern int array_bool_41_to_double(const void *pValue, double *nValue);
extern int is_array_bool_41_long_conversion_allowed();
extern int array_bool_41_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_41(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_41_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_41(void *pValue);
extern int release_array_bool_41(void *pValue);
extern int copy_array_bool_41(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_41_Utils;

/****************************************************************
 ** array_bool_6 
 ****************************************************************/
extern int array_bool_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_6_string(const char *str, char **endptr);
extern int string_to_array_bool_6(const char *str, void *pValue, char **endptr);
extern int is_array_bool_6_double_conversion_allowed();
extern int array_bool_6_to_double(const void *pValue, double *nValue);
extern int is_array_bool_6_long_conversion_allowed();
extern int array_bool_6_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_6(void *pValue);
extern int release_array_bool_6(void *pValue);
extern int copy_array_bool_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_6_Utils;

/****************************************************************
 ** array_bool_7 
 ****************************************************************/
extern int array_bool_7_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_7_string(const char *str, char **endptr);
extern int string_to_array_bool_7(const char *str, void *pValue, char **endptr);
extern int is_array_bool_7_double_conversion_allowed();
extern int array_bool_7_to_double(const void *pValue, double *nValue);
extern int is_array_bool_7_long_conversion_allowed();
extern int array_bool_7_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_7(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_7_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_7(void *pValue);
extern int release_array_bool_7(void *pValue);
extern int copy_array_bool_7(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_7_Utils;

/****************************************************************
 ** array_bool_8 
 ****************************************************************/
extern int array_bool_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_bool_8_string(const char *str, char **endptr);
extern int string_to_array_bool_8(const char *str, void *pValue, char **endptr);
extern int is_array_bool_8_double_conversion_allowed();
extern int array_bool_8_to_double(const void *pValue, double *nValue);
extern int is_array_bool_8_long_conversion_allowed();
extern int array_bool_8_to_long(const void *pValue, long *nValue);
extern void compare_array_bool_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_bool_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_bool_8(void *pValue);
extern int release_array_bool_8(void *pValue);
extern int copy_array_bool_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_bool_8_Utils;

/****************************************************************
 ** array_float32_1 
 ****************************************************************/
extern int array_float32_1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_1_string(const char *str, char **endptr);
extern int string_to_array_float32_1(const char *str, void *pValue, char **endptr);
extern int is_array_float32_1_double_conversion_allowed();
extern int array_float32_1_to_double(const void *pValue, double *nValue);
extern int is_array_float32_1_long_conversion_allowed();
extern int array_float32_1_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_1(void *pValue);
extern int release_array_float32_1(void *pValue);
extern int copy_array_float32_1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_1_Utils;

/****************************************************************
 ** array_float32_10 
 ****************************************************************/
extern int array_float32_10_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_10_string(const char *str, char **endptr);
extern int string_to_array_float32_10(const char *str, void *pValue, char **endptr);
extern int is_array_float32_10_double_conversion_allowed();
extern int array_float32_10_to_double(const void *pValue, double *nValue);
extern int is_array_float32_10_long_conversion_allowed();
extern int array_float32_10_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_10(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_10_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_10(void *pValue);
extern int release_array_float32_10(void *pValue);
extern int copy_array_float32_10(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_10_Utils;

/****************************************************************
 ** array_float32_100 
 ****************************************************************/
extern int array_float32_100_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_string(const char *str, char **endptr);
extern int string_to_array_float32_100(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_double_conversion_allowed();
extern int array_float32_100_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_long_conversion_allowed();
extern int array_float32_100_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100(void *pValue);
extern int release_array_float32_100(void *pValue);
extern int copy_array_float32_100(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_Utils;

/****************************************************************
 ** array_float32_100_1 
 ****************************************************************/
extern int array_float32_100_1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_1_string(const char *str, char **endptr);
extern int string_to_array_float32_100_1(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_1_double_conversion_allowed();
extern int array_float32_100_1_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_1_long_conversion_allowed();
extern int array_float32_100_1_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_1(void *pValue);
extern int release_array_float32_100_1(void *pValue);
extern int copy_array_float32_100_1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_1_Utils;

/****************************************************************
 ** array_float32_100_13 
 ****************************************************************/
extern int array_float32_100_13_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_13_string(const char *str, char **endptr);
extern int string_to_array_float32_100_13(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_13_double_conversion_allowed();
extern int array_float32_100_13_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_13_long_conversion_allowed();
extern int array_float32_100_13_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_13(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_13_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_13(void *pValue);
extern int release_array_float32_100_13(void *pValue);
extern int copy_array_float32_100_13(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_13_Utils;

/****************************************************************
 ** array_float32_100_6 
 ****************************************************************/
extern int array_float32_100_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_6_string(const char *str, char **endptr);
extern int string_to_array_float32_100_6(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_6_double_conversion_allowed();
extern int array_float32_100_6_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_6_long_conversion_allowed();
extern int array_float32_100_6_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_6(void *pValue);
extern int release_array_float32_100_6(void *pValue);
extern int copy_array_float32_100_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_6_Utils;

/****************************************************************
 ** array_float32_100_8 
 ****************************************************************/
extern int array_float32_100_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_100_8_string(const char *str, char **endptr);
extern int string_to_array_float32_100_8(const char *str, void *pValue, char **endptr);
extern int is_array_float32_100_8_double_conversion_allowed();
extern int array_float32_100_8_to_double(const void *pValue, double *nValue);
extern int is_array_float32_100_8_long_conversion_allowed();
extern int array_float32_100_8_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_100_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_100_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_100_8(void *pValue);
extern int release_array_float32_100_8(void *pValue);
extern int copy_array_float32_100_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_100_8_Utils;

/****************************************************************
 ** array_float32_110 
 ****************************************************************/
extern int array_float32_110_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_110_string(const char *str, char **endptr);
extern int string_to_array_float32_110(const char *str, void *pValue, char **endptr);
extern int is_array_float32_110_double_conversion_allowed();
extern int array_float32_110_to_double(const void *pValue, double *nValue);
extern int is_array_float32_110_long_conversion_allowed();
extern int array_float32_110_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_110(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_110_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_110(void *pValue);
extern int release_array_float32_110(void *pValue);
extern int copy_array_float32_110(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_110_Utils;

/****************************************************************
 ** array_float32_113 
 ****************************************************************/
extern int array_float32_113_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_113_string(const char *str, char **endptr);
extern int string_to_array_float32_113(const char *str, void *pValue, char **endptr);
extern int is_array_float32_113_double_conversion_allowed();
extern int array_float32_113_to_double(const void *pValue, double *nValue);
extern int is_array_float32_113_long_conversion_allowed();
extern int array_float32_113_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_113(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_113_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_113(void *pValue);
extern int release_array_float32_113(void *pValue);
extern int copy_array_float32_113(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_113_Utils;

/****************************************************************
 ** array_float32_114 
 ****************************************************************/
extern int array_float32_114_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_114_string(const char *str, char **endptr);
extern int string_to_array_float32_114(const char *str, void *pValue, char **endptr);
extern int is_array_float32_114_double_conversion_allowed();
extern int array_float32_114_to_double(const void *pValue, double *nValue);
extern int is_array_float32_114_long_conversion_allowed();
extern int array_float32_114_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_114(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_114_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_114(void *pValue);
extern int release_array_float32_114(void *pValue);
extern int copy_array_float32_114(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_114_Utils;

/****************************************************************
 ** array_float32_13 
 ****************************************************************/
extern int array_float32_13_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_13_string(const char *str, char **endptr);
extern int string_to_array_float32_13(const char *str, void *pValue, char **endptr);
extern int is_array_float32_13_double_conversion_allowed();
extern int array_float32_13_to_double(const void *pValue, double *nValue);
extern int is_array_float32_13_long_conversion_allowed();
extern int array_float32_13_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_13(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_13_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_13(void *pValue);
extern int release_array_float32_13(void *pValue);
extern int copy_array_float32_13(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_13_Utils;

/****************************************************************
 ** array_float32_3 
 ****************************************************************/
extern int array_float32_3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_3_string(const char *str, char **endptr);
extern int string_to_array_float32_3(const char *str, void *pValue, char **endptr);
extern int is_array_float32_3_double_conversion_allowed();
extern int array_float32_3_to_double(const void *pValue, double *nValue);
extern int is_array_float32_3_long_conversion_allowed();
extern int array_float32_3_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_3(void *pValue);
extern int release_array_float32_3(void *pValue);
extern int copy_array_float32_3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_3_Utils;

/****************************************************************
 ** array_float32_50 
 ****************************************************************/
extern int array_float32_50_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_50_string(const char *str, char **endptr);
extern int string_to_array_float32_50(const char *str, void *pValue, char **endptr);
extern int is_array_float32_50_double_conversion_allowed();
extern int array_float32_50_to_double(const void *pValue, double *nValue);
extern int is_array_float32_50_long_conversion_allowed();
extern int array_float32_50_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_50(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_50_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_50(void *pValue);
extern int release_array_float32_50(void *pValue);
extern int copy_array_float32_50(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_50_Utils;

/****************************************************************
 ** array_float32_6 
 ****************************************************************/
extern int array_float32_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_6_string(const char *str, char **endptr);
extern int string_to_array_float32_6(const char *str, void *pValue, char **endptr);
extern int is_array_float32_6_double_conversion_allowed();
extern int array_float32_6_to_double(const void *pValue, double *nValue);
extern int is_array_float32_6_long_conversion_allowed();
extern int array_float32_6_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_6(void *pValue);
extern int release_array_float32_6(void *pValue);
extern int copy_array_float32_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_6_Utils;

/****************************************************************
 ** array_float32_8 
 ****************************************************************/
extern int array_float32_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_float32_8_string(const char *str, char **endptr);
extern int string_to_array_float32_8(const char *str, void *pValue, char **endptr);
extern int is_array_float32_8_double_conversion_allowed();
extern int array_float32_8_to_double(const void *pValue, double *nValue);
extern int is_array_float32_8_long_conversion_allowed();
extern int array_float32_8_to_long(const void *pValue, long *nValue);
extern void compare_array_float32_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_float32_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_float32_8(void *pValue);
extern int release_array_float32_8(void *pValue);
extern int copy_array_float32_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_float32_8_Utils;

/****************************************************************
 ** array_int32_10 
 ****************************************************************/
extern int array_int32_10_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_10_string(const char *str, char **endptr);
extern int string_to_array_int32_10(const char *str, void *pValue, char **endptr);
extern int is_array_int32_10_double_conversion_allowed();
extern int array_int32_10_to_double(const void *pValue, double *nValue);
extern int is_array_int32_10_long_conversion_allowed();
extern int array_int32_10_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_10(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_10_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_10(void *pValue);
extern int release_array_int32_10(void *pValue);
extern int copy_array_int32_10(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_10_Utils;

/****************************************************************
 ** array_int32_100 
 ****************************************************************/
extern int array_int32_100_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_100_string(const char *str, char **endptr);
extern int string_to_array_int32_100(const char *str, void *pValue, char **endptr);
extern int is_array_int32_100_double_conversion_allowed();
extern int array_int32_100_to_double(const void *pValue, double *nValue);
extern int is_array_int32_100_long_conversion_allowed();
extern int array_int32_100_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_100(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_100_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_100(void *pValue);
extern int release_array_int32_100(void *pValue);
extern int copy_array_int32_100(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_100_Utils;

/****************************************************************
 ** array_int32_110 
 ****************************************************************/
extern int array_int32_110_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_110_string(const char *str, char **endptr);
extern int string_to_array_int32_110(const char *str, void *pValue, char **endptr);
extern int is_array_int32_110_double_conversion_allowed();
extern int array_int32_110_to_double(const void *pValue, double *nValue);
extern int is_array_int32_110_long_conversion_allowed();
extern int array_int32_110_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_110(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_110_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_110(void *pValue);
extern int release_array_int32_110(void *pValue);
extern int copy_array_int32_110(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_110_Utils;

/****************************************************************
 ** array_int32_114 
 ****************************************************************/
extern int array_int32_114_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_114_string(const char *str, char **endptr);
extern int string_to_array_int32_114(const char *str, void *pValue, char **endptr);
extern int is_array_int32_114_double_conversion_allowed();
extern int array_int32_114_to_double(const void *pValue, double *nValue);
extern int is_array_int32_114_long_conversion_allowed();
extern int array_int32_114_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_114(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_114_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_114(void *pValue);
extern int release_array_int32_114(void *pValue);
extern int copy_array_int32_114(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_114_Utils;

/****************************************************************
 ** array_int32_128 
 ****************************************************************/
extern int array_int32_128_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_128_string(const char *str, char **endptr);
extern int string_to_array_int32_128(const char *str, void *pValue, char **endptr);
extern int is_array_int32_128_double_conversion_allowed();
extern int array_int32_128_to_double(const void *pValue, double *nValue);
extern int is_array_int32_128_long_conversion_allowed();
extern int array_int32_128_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_128(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_128_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_128(void *pValue);
extern int release_array_int32_128(void *pValue);
extern int copy_array_int32_128(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_128_Utils;

/****************************************************************
 ** array_int32_128_32 
 ****************************************************************/
extern int array_int32_128_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_128_32_string(const char *str, char **endptr);
extern int string_to_array_int32_128_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_128_32_double_conversion_allowed();
extern int array_int32_128_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_128_32_long_conversion_allowed();
extern int array_int32_128_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_128_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_128_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_128_32(void *pValue);
extern int release_array_int32_128_32(void *pValue);
extern int copy_array_int32_128_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_128_32_Utils;

/****************************************************************
 ** array_int32_129 
 ****************************************************************/
extern int array_int32_129_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_129_string(const char *str, char **endptr);
extern int string_to_array_int32_129(const char *str, void *pValue, char **endptr);
extern int is_array_int32_129_double_conversion_allowed();
extern int array_int32_129_to_double(const void *pValue, double *nValue);
extern int is_array_int32_129_long_conversion_allowed();
extern int array_int32_129_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_129(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_129_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_129(void *pValue);
extern int release_array_int32_129(void *pValue);
extern int copy_array_int32_129(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_129_Utils;

/****************************************************************
 ** array_int32_13 
 ****************************************************************/
extern int array_int32_13_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_13_string(const char *str, char **endptr);
extern int string_to_array_int32_13(const char *str, void *pValue, char **endptr);
extern int is_array_int32_13_double_conversion_allowed();
extern int array_int32_13_to_double(const void *pValue, double *nValue);
extern int is_array_int32_13_long_conversion_allowed();
extern int array_int32_13_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_13(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_13_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_13(void *pValue);
extern int release_array_int32_13(void *pValue);
extern int copy_array_int32_13(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_13_Utils;

/****************************************************************
 ** array_int32_131 
 ****************************************************************/
extern int array_int32_131_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_131_string(const char *str, char **endptr);
extern int string_to_array_int32_131(const char *str, void *pValue, char **endptr);
extern int is_array_int32_131_double_conversion_allowed();
extern int array_int32_131_to_double(const void *pValue, double *nValue);
extern int is_array_int32_131_long_conversion_allowed();
extern int array_int32_131_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_131(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_131_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_131(void *pValue);
extern int release_array_int32_131(void *pValue);
extern int copy_array_int32_131(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_131_Utils;

/****************************************************************
 ** array_int32_14 
 ****************************************************************/
extern int array_int32_14_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_14_string(const char *str, char **endptr);
extern int string_to_array_int32_14(const char *str, void *pValue, char **endptr);
extern int is_array_int32_14_double_conversion_allowed();
extern int array_int32_14_to_double(const void *pValue, double *nValue);
extern int is_array_int32_14_long_conversion_allowed();
extern int array_int32_14_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_14(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_14_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_14(void *pValue);
extern int release_array_int32_14(void *pValue);
extern int copy_array_int32_14(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_14_Utils;

/****************************************************************
 ** array_int32_15 
 ****************************************************************/
extern int array_int32_15_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_15_string(const char *str, char **endptr);
extern int string_to_array_int32_15(const char *str, void *pValue, char **endptr);
extern int is_array_int32_15_double_conversion_allowed();
extern int array_int32_15_to_double(const void *pValue, double *nValue);
extern int is_array_int32_15_long_conversion_allowed();
extern int array_int32_15_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_15(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_15_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_15(void *pValue);
extern int release_array_int32_15(void *pValue);
extern int copy_array_int32_15(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_15_Utils;

/****************************************************************
 ** array_int32_17 
 ****************************************************************/
extern int array_int32_17_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_17_string(const char *str, char **endptr);
extern int string_to_array_int32_17(const char *str, void *pValue, char **endptr);
extern int is_array_int32_17_double_conversion_allowed();
extern int array_int32_17_to_double(const void *pValue, double *nValue);
extern int is_array_int32_17_long_conversion_allowed();
extern int array_int32_17_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_17(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_17_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_17(void *pValue);
extern int release_array_int32_17(void *pValue);
extern int copy_array_int32_17(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_17_Utils;

/****************************************************************
 ** array_int32_198_33 
 ****************************************************************/
extern int array_int32_198_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_198_33_string(const char *str, char **endptr);
extern int string_to_array_int32_198_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_198_33_double_conversion_allowed();
extern int array_int32_198_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_198_33_long_conversion_allowed();
extern int array_int32_198_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_198_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_198_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_198_33(void *pValue);
extern int release_array_int32_198_33(void *pValue);
extern int copy_array_int32_198_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_198_33_Utils;

/****************************************************************
 ** array_int32_2 
 ****************************************************************/
extern int array_int32_2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_string(const char *str, char **endptr);
extern int string_to_array_int32_2(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_double_conversion_allowed();
extern int array_int32_2_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_long_conversion_allowed();
extern int array_int32_2_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2(void *pValue);
extern int release_array_int32_2(void *pValue);
extern int copy_array_int32_2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_Utils;

/****************************************************************
 ** array_int32_20 
 ****************************************************************/
extern int array_int32_20_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_20_string(const char *str, char **endptr);
extern int string_to_array_int32_20(const char *str, void *pValue, char **endptr);
extern int is_array_int32_20_double_conversion_allowed();
extern int array_int32_20_to_double(const void *pValue, double *nValue);
extern int is_array_int32_20_long_conversion_allowed();
extern int array_int32_20_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_20(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_20_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_20(void *pValue);
extern int release_array_int32_20(void *pValue);
extern int copy_array_int32_20(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_20_Utils;

/****************************************************************
 ** array_int32_221 
 ****************************************************************/
extern int array_int32_221_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_221_string(const char *str, char **endptr);
extern int string_to_array_int32_221(const char *str, void *pValue, char **endptr);
extern int is_array_int32_221_double_conversion_allowed();
extern int array_int32_221_to_double(const void *pValue, double *nValue);
extern int is_array_int32_221_long_conversion_allowed();
extern int array_int32_221_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_221(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_221_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_221(void *pValue);
extern int release_array_int32_221(void *pValue);
extern int copy_array_int32_221(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_221_Utils;

/****************************************************************
 ** array_int32_23 
 ****************************************************************/
extern int array_int32_23_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_23_string(const char *str, char **endptr);
extern int string_to_array_int32_23(const char *str, void *pValue, char **endptr);
extern int is_array_int32_23_double_conversion_allowed();
extern int array_int32_23_to_double(const void *pValue, double *nValue);
extern int is_array_int32_23_long_conversion_allowed();
extern int array_int32_23_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_23(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_23_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_23(void *pValue);
extern int release_array_int32_23(void *pValue);
extern int copy_array_int32_23(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_23_Utils;

/****************************************************************
 ** array_int32_24 
 ****************************************************************/
extern int array_int32_24_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_24_string(const char *str, char **endptr);
extern int string_to_array_int32_24(const char *str, void *pValue, char **endptr);
extern int is_array_int32_24_double_conversion_allowed();
extern int array_int32_24_to_double(const void *pValue, double *nValue);
extern int is_array_int32_24_long_conversion_allowed();
extern int array_int32_24_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_24(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_24_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_24(void *pValue);
extern int release_array_int32_24(void *pValue);
extern int copy_array_int32_24(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_24_Utils;

/****************************************************************
 ** array_int32_25 
 ****************************************************************/
extern int array_int32_25_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_25_string(const char *str, char **endptr);
extern int string_to_array_int32_25(const char *str, void *pValue, char **endptr);
extern int is_array_int32_25_double_conversion_allowed();
extern int array_int32_25_to_double(const void *pValue, double *nValue);
extern int is_array_int32_25_long_conversion_allowed();
extern int array_int32_25_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_25(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_25_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_25(void *pValue);
extern int release_array_int32_25(void *pValue);
extern int copy_array_int32_25(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_25_Utils;

/****************************************************************
 ** array_int32_260 
 ****************************************************************/
extern int array_int32_260_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_260_string(const char *str, char **endptr);
extern int string_to_array_int32_260(const char *str, void *pValue, char **endptr);
extern int is_array_int32_260_double_conversion_allowed();
extern int array_int32_260_to_double(const void *pValue, double *nValue);
extern int is_array_int32_260_long_conversion_allowed();
extern int array_int32_260_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_260(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_260_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_260(void *pValue);
extern int release_array_int32_260(void *pValue);
extern int copy_array_int32_260(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_260_Utils;

/****************************************************************
 ** array_int32_261 
 ****************************************************************/
extern int array_int32_261_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_261_string(const char *str, char **endptr);
extern int string_to_array_int32_261(const char *str, void *pValue, char **endptr);
extern int is_array_int32_261_double_conversion_allowed();
extern int array_int32_261_to_double(const void *pValue, double *nValue);
extern int is_array_int32_261_long_conversion_allowed();
extern int array_int32_261_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_261(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_261_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_261(void *pValue);
extern int release_array_int32_261(void *pValue);
extern int copy_array_int32_261(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_261_Utils;

/****************************************************************
 ** array_int32_28 
 ****************************************************************/
extern int array_int32_28_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_28_string(const char *str, char **endptr);
extern int string_to_array_int32_28(const char *str, void *pValue, char **endptr);
extern int is_array_int32_28_double_conversion_allowed();
extern int array_int32_28_to_double(const void *pValue, double *nValue);
extern int is_array_int32_28_long_conversion_allowed();
extern int array_int32_28_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_28(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_28_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_28(void *pValue);
extern int release_array_int32_28(void *pValue);
extern int copy_array_int32_28(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_28_Utils;

/****************************************************************
 ** array_int32_2_4_8 
 ****************************************************************/
extern int array_int32_2_4_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_2_4_8_string(const char *str, char **endptr);
extern int string_to_array_int32_2_4_8(const char *str, void *pValue, char **endptr);
extern int is_array_int32_2_4_8_double_conversion_allowed();
extern int array_int32_2_4_8_to_double(const void *pValue, double *nValue);
extern int is_array_int32_2_4_8_long_conversion_allowed();
extern int array_int32_2_4_8_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_2_4_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_2_4_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_2_4_8(void *pValue);
extern int release_array_int32_2_4_8(void *pValue);
extern int copy_array_int32_2_4_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_2_4_8_Utils;

/****************************************************************
 ** array_int32_3 
 ****************************************************************/
extern int array_int32_3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_3_string(const char *str, char **endptr);
extern int string_to_array_int32_3(const char *str, void *pValue, char **endptr);
extern int is_array_int32_3_double_conversion_allowed();
extern int array_int32_3_to_double(const void *pValue, double *nValue);
extern int is_array_int32_3_long_conversion_allowed();
extern int array_int32_3_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_3(void *pValue);
extern int release_array_int32_3(void *pValue);
extern int copy_array_int32_3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_3_Utils;

/****************************************************************
 ** array_int32_30 
 ****************************************************************/
extern int array_int32_30_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_30_string(const char *str, char **endptr);
extern int string_to_array_int32_30(const char *str, void *pValue, char **endptr);
extern int is_array_int32_30_double_conversion_allowed();
extern int array_int32_30_to_double(const void *pValue, double *nValue);
extern int is_array_int32_30_long_conversion_allowed();
extern int array_int32_30_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_30(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_30_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_30(void *pValue);
extern int release_array_int32_30(void *pValue);
extern int copy_array_int32_30(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_30_Utils;

/****************************************************************
 ** array_int32_302 
 ****************************************************************/
extern int array_int32_302_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_302_string(const char *str, char **endptr);
extern int string_to_array_int32_302(const char *str, void *pValue, char **endptr);
extern int is_array_int32_302_double_conversion_allowed();
extern int array_int32_302_to_double(const void *pValue, double *nValue);
extern int is_array_int32_302_long_conversion_allowed();
extern int array_int32_302_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_302(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_302_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_302(void *pValue);
extern int release_array_int32_302(void *pValue);
extern int copy_array_int32_302(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_302_Utils;

/****************************************************************
 ** array_int32_31 
 ****************************************************************/
extern int array_int32_31_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_31_string(const char *str, char **endptr);
extern int string_to_array_int32_31(const char *str, void *pValue, char **endptr);
extern int is_array_int32_31_double_conversion_allowed();
extern int array_int32_31_to_double(const void *pValue, double *nValue);
extern int is_array_int32_31_long_conversion_allowed();
extern int array_int32_31_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_31(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_31_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_31(void *pValue);
extern int release_array_int32_31(void *pValue);
extern int copy_array_int32_31(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_31_Utils;

/****************************************************************
 ** array_int32_32 
 ****************************************************************/
extern int array_int32_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_32_string(const char *str, char **endptr);
extern int string_to_array_int32_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_32_double_conversion_allowed();
extern int array_int32_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_32_long_conversion_allowed();
extern int array_int32_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_32(void *pValue);
extern int release_array_int32_32(void *pValue);
extern int copy_array_int32_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_32_Utils;

/****************************************************************
 ** array_int32_32_32 
 ****************************************************************/
extern int array_int32_32_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_32_32_string(const char *str, char **endptr);
extern int string_to_array_int32_32_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_32_32_double_conversion_allowed();
extern int array_int32_32_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_32_32_long_conversion_allowed();
extern int array_int32_32_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_32_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_32_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_32_32(void *pValue);
extern int release_array_int32_32_32(void *pValue);
extern int copy_array_int32_32_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_32_32_Utils;

/****************************************************************
 ** array_int32_33 
 ****************************************************************/
extern int array_int32_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_33_string(const char *str, char **endptr);
extern int string_to_array_int32_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_33_double_conversion_allowed();
extern int array_int32_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_33_long_conversion_allowed();
extern int array_int32_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_33(void *pValue);
extern int release_array_int32_33(void *pValue);
extern int copy_array_int32_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_33_Utils;

/****************************************************************
 ** array_int32_4 
 ****************************************************************/
extern int array_int32_4_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_4_string(const char *str, char **endptr);
extern int string_to_array_int32_4(const char *str, void *pValue, char **endptr);
extern int is_array_int32_4_double_conversion_allowed();
extern int array_int32_4_to_double(const void *pValue, double *nValue);
extern int is_array_int32_4_long_conversion_allowed();
extern int array_int32_4_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_4(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_4_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_4(void *pValue);
extern int release_array_int32_4(void *pValue);
extern int copy_array_int32_4(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_4_Utils;

/****************************************************************
 ** array_int32_40 
 ****************************************************************/
extern int array_int32_40_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_40_string(const char *str, char **endptr);
extern int string_to_array_int32_40(const char *str, void *pValue, char **endptr);
extern int is_array_int32_40_double_conversion_allowed();
extern int array_int32_40_to_double(const void *pValue, double *nValue);
extern int is_array_int32_40_long_conversion_allowed();
extern int array_int32_40_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_40(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_40_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_40(void *pValue);
extern int release_array_int32_40(void *pValue);
extern int copy_array_int32_40(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_40_Utils;

/****************************************************************
 ** array_int32_41 
 ****************************************************************/
extern int array_int32_41_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_41_string(const char *str, char **endptr);
extern int string_to_array_int32_41(const char *str, void *pValue, char **endptr);
extern int is_array_int32_41_double_conversion_allowed();
extern int array_int32_41_to_double(const void *pValue, double *nValue);
extern int is_array_int32_41_long_conversion_allowed();
extern int array_int32_41_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_41(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_41_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_41(void *pValue);
extern int release_array_int32_41(void *pValue);
extern int copy_array_int32_41(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_41_Utils;

/****************************************************************
 ** array_int32_42 
 ****************************************************************/
extern int array_int32_42_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_42_string(const char *str, char **endptr);
extern int string_to_array_int32_42(const char *str, void *pValue, char **endptr);
extern int is_array_int32_42_double_conversion_allowed();
extern int array_int32_42_to_double(const void *pValue, double *nValue);
extern int is_array_int32_42_long_conversion_allowed();
extern int array_int32_42_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_42(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_42_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_42(void *pValue);
extern int release_array_int32_42(void *pValue);
extern int copy_array_int32_42(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_42_Utils;

/****************************************************************
 ** array_int32_48 
 ****************************************************************/
extern int array_int32_48_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_48_string(const char *str, char **endptr);
extern int string_to_array_int32_48(const char *str, void *pValue, char **endptr);
extern int is_array_int32_48_double_conversion_allowed();
extern int array_int32_48_to_double(const void *pValue, double *nValue);
extern int is_array_int32_48_long_conversion_allowed();
extern int array_int32_48_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_48(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_48_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_48(void *pValue);
extern int release_array_int32_48(void *pValue);
extern int copy_array_int32_48(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_48_Utils;

/****************************************************************
 ** array_int32_492 
 ****************************************************************/
extern int array_int32_492_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_492_string(const char *str, char **endptr);
extern int string_to_array_int32_492(const char *str, void *pValue, char **endptr);
extern int is_array_int32_492_double_conversion_allowed();
extern int array_int32_492_to_double(const void *pValue, double *nValue);
extern int is_array_int32_492_long_conversion_allowed();
extern int array_int32_492_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_492(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_492_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_492(void *pValue);
extern int release_array_int32_492(void *pValue);
extern int copy_array_int32_492(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_492_Utils;

/****************************************************************
 ** array_int32_5 
 ****************************************************************/
extern int array_int32_5_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_5_string(const char *str, char **endptr);
extern int string_to_array_int32_5(const char *str, void *pValue, char **endptr);
extern int is_array_int32_5_double_conversion_allowed();
extern int array_int32_5_to_double(const void *pValue, double *nValue);
extern int is_array_int32_5_long_conversion_allowed();
extern int array_int32_5_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_5(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_5_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_5(void *pValue);
extern int release_array_int32_5(void *pValue);
extern int copy_array_int32_5(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_5_Utils;

/****************************************************************
 ** array_int32_500_500 
 ****************************************************************/
extern int array_int32_500_500_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_500_500_string(const char *str, char **endptr);
extern int string_to_array_int32_500_500(const char *str, void *pValue, char **endptr);
extern int is_array_int32_500_500_double_conversion_allowed();
extern int array_int32_500_500_to_double(const void *pValue, double *nValue);
extern int is_array_int32_500_500_long_conversion_allowed();
extern int array_int32_500_500_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_500_500(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_500_500_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_500_500(void *pValue);
extern int release_array_int32_500_500(void *pValue);
extern int copy_array_int32_500_500(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_500_500_Utils;

/****************************************************************
 ** array_int32_6 
 ****************************************************************/
extern int array_int32_6_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_6_string(const char *str, char **endptr);
extern int string_to_array_int32_6(const char *str, void *pValue, char **endptr);
extern int is_array_int32_6_double_conversion_allowed();
extern int array_int32_6_to_double(const void *pValue, double *nValue);
extern int is_array_int32_6_long_conversion_allowed();
extern int array_int32_6_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_6(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_6_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_6(void *pValue);
extern int release_array_int32_6(void *pValue);
extern int copy_array_int32_6(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_6_Utils;

/****************************************************************
 ** array_int32_627 
 ****************************************************************/
extern int array_int32_627_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_627_string(const char *str, char **endptr);
extern int string_to_array_int32_627(const char *str, void *pValue, char **endptr);
extern int is_array_int32_627_double_conversion_allowed();
extern int array_int32_627_to_double(const void *pValue, double *nValue);
extern int is_array_int32_627_long_conversion_allowed();
extern int array_int32_627_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_627(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_627_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_627(void *pValue);
extern int release_array_int32_627(void *pValue);
extern int copy_array_int32_627(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_627_Utils;

/****************************************************************
 ** array_int32_64 
 ****************************************************************/
extern int array_int32_64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_64_string(const char *str, char **endptr);
extern int string_to_array_int32_64(const char *str, void *pValue, char **endptr);
extern int is_array_int32_64_double_conversion_allowed();
extern int array_int32_64_to_double(const void *pValue, double *nValue);
extern int is_array_int32_64_long_conversion_allowed();
extern int array_int32_64_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_64(void *pValue);
extern int release_array_int32_64(void *pValue);
extern int copy_array_int32_64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_64_Utils;

/****************************************************************
 ** array_int32_64_32 
 ****************************************************************/
extern int array_int32_64_32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_64_32_string(const char *str, char **endptr);
extern int string_to_array_int32_64_32(const char *str, void *pValue, char **endptr);
extern int is_array_int32_64_32_double_conversion_allowed();
extern int array_int32_64_32_to_double(const void *pValue, double *nValue);
extern int is_array_int32_64_32_long_conversion_allowed();
extern int array_int32_64_32_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_64_32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_64_32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_64_32(void *pValue);
extern int release_array_int32_64_32(void *pValue);
extern int copy_array_int32_64_32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_64_32_Utils;

/****************************************************************
 ** array_int32_65 
 ****************************************************************/
extern int array_int32_65_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_65_string(const char *str, char **endptr);
extern int string_to_array_int32_65(const char *str, void *pValue, char **endptr);
extern int is_array_int32_65_double_conversion_allowed();
extern int array_int32_65_to_double(const void *pValue, double *nValue);
extern int is_array_int32_65_long_conversion_allowed();
extern int array_int32_65_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_65(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_65_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_65(void *pValue);
extern int release_array_int32_65(void *pValue);
extern int copy_array_int32_65(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_65_Utils;

/****************************************************************
 ** array_int32_66_33 
 ****************************************************************/
extern int array_int32_66_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_66_33_string(const char *str, char **endptr);
extern int string_to_array_int32_66_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_66_33_double_conversion_allowed();
extern int array_int32_66_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_66_33_long_conversion_allowed();
extern int array_int32_66_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_66_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_66_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_66_33(void *pValue);
extern int release_array_int32_66_33(void *pValue);
extern int copy_array_int32_66_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_66_33_Utils;

/****************************************************************
 ** array_int32_6_221 
 ****************************************************************/
extern int array_int32_6_221_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_6_221_string(const char *str, char **endptr);
extern int string_to_array_int32_6_221(const char *str, void *pValue, char **endptr);
extern int is_array_int32_6_221_double_conversion_allowed();
extern int array_int32_6_221_to_double(const void *pValue, double *nValue);
extern int is_array_int32_6_221_long_conversion_allowed();
extern int array_int32_6_221_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_6_221(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_6_221_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_6_221(void *pValue);
extern int release_array_int32_6_221(void *pValue);
extern int copy_array_int32_6_221(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_6_221_Utils;

/****************************************************************
 ** array_int32_7 
 ****************************************************************/
extern int array_int32_7_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_7_string(const char *str, char **endptr);
extern int string_to_array_int32_7(const char *str, void *pValue, char **endptr);
extern int is_array_int32_7_double_conversion_allowed();
extern int array_int32_7_to_double(const void *pValue, double *nValue);
extern int is_array_int32_7_long_conversion_allowed();
extern int array_int32_7_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_7(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_7_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_7(void *pValue);
extern int release_array_int32_7(void *pValue);
extern int copy_array_int32_7(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_7_Utils;

/****************************************************************
 ** array_int32_8 
 ****************************************************************/
extern int array_int32_8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_8_string(const char *str, char **endptr);
extern int string_to_array_int32_8(const char *str, void *pValue, char **endptr);
extern int is_array_int32_8_double_conversion_allowed();
extern int array_int32_8_to_double(const void *pValue, double *nValue);
extern int is_array_int32_8_long_conversion_allowed();
extern int array_int32_8_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_8(void *pValue);
extern int release_array_int32_8(void *pValue);
extern int copy_array_int32_8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_8_Utils;

/****************************************************************
 ** array_int32_888 
 ****************************************************************/
extern int array_int32_888_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_888_string(const char *str, char **endptr);
extern int string_to_array_int32_888(const char *str, void *pValue, char **endptr);
extern int is_array_int32_888_double_conversion_allowed();
extern int array_int32_888_to_double(const void *pValue, double *nValue);
extern int is_array_int32_888_long_conversion_allowed();
extern int array_int32_888_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_888(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_888_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_888(void *pValue);
extern int release_array_int32_888(void *pValue);
extern int copy_array_int32_888(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_888_Utils;

/****************************************************************
 ** array_int32_891 
 ****************************************************************/
extern int array_int32_891_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_891_string(const char *str, char **endptr);
extern int string_to_array_int32_891(const char *str, void *pValue, char **endptr);
extern int is_array_int32_891_double_conversion_allowed();
extern int array_int32_891_to_double(const void *pValue, double *nValue);
extern int is_array_int32_891_long_conversion_allowed();
extern int array_int32_891_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_891(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_891_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_891(void *pValue);
extern int release_array_int32_891(void *pValue);
extern int copy_array_int32_891(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_891_Utils;

/****************************************************************
 ** array_int32_894 
 ****************************************************************/
extern int array_int32_894_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_894_string(const char *str, char **endptr);
extern int string_to_array_int32_894(const char *str, void *pValue, char **endptr);
extern int is_array_int32_894_double_conversion_allowed();
extern int array_int32_894_to_double(const void *pValue, double *nValue);
extern int is_array_int32_894_long_conversion_allowed();
extern int array_int32_894_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_894(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_894_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_894(void *pValue);
extern int release_array_int32_894(void *pValue);
extern int copy_array_int32_894(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_894_Utils;

/****************************************************************
 ** array_int32_9 
 ****************************************************************/
extern int array_int32_9_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_9_string(const char *str, char **endptr);
extern int string_to_array_int32_9(const char *str, void *pValue, char **endptr);
extern int is_array_int32_9_double_conversion_allowed();
extern int array_int32_9_to_double(const void *pValue, double *nValue);
extern int is_array_int32_9_long_conversion_allowed();
extern int array_int32_9_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_9(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_9_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_9(void *pValue);
extern int release_array_int32_9(void *pValue);
extern int copy_array_int32_9(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_9_Utils;

/****************************************************************
 ** array_int32_95_33 
 ****************************************************************/
extern int array_int32_95_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_95_33_string(const char *str, char **endptr);
extern int string_to_array_int32_95_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_95_33_double_conversion_allowed();
extern int array_int32_95_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_95_33_long_conversion_allowed();
extern int array_int32_95_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_95_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_95_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_95_33(void *pValue);
extern int release_array_int32_95_33(void *pValue);
extern int copy_array_int32_95_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_95_33_Utils;

/****************************************************************
 ** array_int32_961 
 ****************************************************************/
extern int array_int32_961_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_961_string(const char *str, char **endptr);
extern int string_to_array_int32_961(const char *str, void *pValue, char **endptr);
extern int is_array_int32_961_double_conversion_allowed();
extern int array_int32_961_to_double(const void *pValue, double *nValue);
extern int is_array_int32_961_long_conversion_allowed();
extern int array_int32_961_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_961(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_961_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_961(void *pValue);
extern int release_array_int32_961(void *pValue);
extern int copy_array_int32_961(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_961_Utils;

/****************************************************************
 ** array_int32_964 
 ****************************************************************/
extern int array_int32_964_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_964_string(const char *str, char **endptr);
extern int string_to_array_int32_964(const char *str, void *pValue, char **endptr);
extern int is_array_int32_964_double_conversion_allowed();
extern int array_int32_964_to_double(const void *pValue, double *nValue);
extern int is_array_int32_964_long_conversion_allowed();
extern int array_int32_964_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_964(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_964_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_964(void *pValue);
extern int release_array_int32_964(void *pValue);
extern int copy_array_int32_964(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_964_Utils;

/****************************************************************
 ** array_int32_97 
 ****************************************************************/
extern int array_int32_97_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_97_string(const char *str, char **endptr);
extern int string_to_array_int32_97(const char *str, void *pValue, char **endptr);
extern int is_array_int32_97_double_conversion_allowed();
extern int array_int32_97_to_double(const void *pValue, double *nValue);
extern int is_array_int32_97_long_conversion_allowed();
extern int array_int32_97_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_97(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_97_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_97(void *pValue);
extern int release_array_int32_97(void *pValue);
extern int copy_array_int32_97(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_97_Utils;

/****************************************************************
 ** array_int32_975 
 ****************************************************************/
extern int array_int32_975_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_975_string(const char *str, char **endptr);
extern int string_to_array_int32_975(const char *str, void *pValue, char **endptr);
extern int is_array_int32_975_double_conversion_allowed();
extern int array_int32_975_to_double(const void *pValue, double *nValue);
extern int is_array_int32_975_long_conversion_allowed();
extern int array_int32_975_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_975(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_975_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_975(void *pValue);
extern int release_array_int32_975(void *pValue);
extern int copy_array_int32_975(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_975_Utils;

/****************************************************************
 ** array_int32_978 
 ****************************************************************/
extern int array_int32_978_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_978_string(const char *str, char **endptr);
extern int string_to_array_int32_978(const char *str, void *pValue, char **endptr);
extern int is_array_int32_978_double_conversion_allowed();
extern int array_int32_978_to_double(const void *pValue, double *nValue);
extern int is_array_int32_978_long_conversion_allowed();
extern int array_int32_978_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_978(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_978_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_978(void *pValue);
extern int release_array_int32_978(void *pValue);
extern int copy_array_int32_978(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_978_Utils;

/****************************************************************
 ** array_int32_987 
 ****************************************************************/
extern int array_int32_987_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_987_string(const char *str, char **endptr);
extern int string_to_array_int32_987(const char *str, void *pValue, char **endptr);
extern int is_array_int32_987_double_conversion_allowed();
extern int array_int32_987_to_double(const void *pValue, double *nValue);
extern int is_array_int32_987_long_conversion_allowed();
extern int array_int32_987_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_987(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_987_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_987(void *pValue);
extern int release_array_int32_987(void *pValue);
extern int copy_array_int32_987(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_987_Utils;

/****************************************************************
 ** array_int32_99 
 ****************************************************************/
extern int array_int32_99_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_99_string(const char *str, char **endptr);
extern int string_to_array_int32_99(const char *str, void *pValue, char **endptr);
extern int is_array_int32_99_double_conversion_allowed();
extern int array_int32_99_to_double(const void *pValue, double *nValue);
extern int is_array_int32_99_long_conversion_allowed();
extern int array_int32_99_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_99(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_99_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_99(void *pValue);
extern int release_array_int32_99(void *pValue);
extern int copy_array_int32_99(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_99_Utils;

/****************************************************************
 ** array_int32_990 
 ****************************************************************/
extern int array_int32_990_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_990_string(const char *str, char **endptr);
extern int string_to_array_int32_990(const char *str, void *pValue, char **endptr);
extern int is_array_int32_990_double_conversion_allowed();
extern int array_int32_990_to_double(const void *pValue, double *nValue);
extern int is_array_int32_990_long_conversion_allowed();
extern int array_int32_990_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_990(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_990_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_990(void *pValue);
extern int release_array_int32_990(void *pValue);
extern int copy_array_int32_990(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_990_Utils;

/****************************************************************
 ** array_int32_99_33 
 ****************************************************************/
extern int array_int32_99_33_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_array_int32_99_33_string(const char *str, char **endptr);
extern int string_to_array_int32_99_33(const char *str, void *pValue, char **endptr);
extern int is_array_int32_99_33_double_conversion_allowed();
extern int array_int32_99_33_to_double(const void *pValue, double *nValue);
extern int is_array_int32_99_33_long_conversion_allowed();
extern int array_int32_99_33_to_long(const void *pValue, long *nValue);
extern void compare_array_int32_99_33(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_array_int32_99_33_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_array_int32_99_33(void *pValue);
extern int release_array_int32_99_33(void *pValue);
extern int copy_array_int32_99_33(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_array_int32_99_33_Utils;

/****************************************************************
 ** ASafe_Data_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_Data_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafe_Data_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_Data_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_Data_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafe_Data_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafe_Data_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafe_Data_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafe_Data_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafe_Data_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafe_Data_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafe_Data_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafe_Data_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafe_Data_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafe_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafe_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafe_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafe_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafe_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafe_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafe_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafe_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafe_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafe_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafe_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafe_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafe_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafe_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeDistanceDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafeDistanceDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeDistanceDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeDistanceDefinition_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafeDistanceDefinition_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafeDistanceDefinition_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafeDistanceDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafeDistanceDefinition_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafeDistanceDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafeDistanceDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafeDistanceDefinition_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafeDistanceDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeRow_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeRow_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafeRow_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeRow_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeRow_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafeRow_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafeRow_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafeRow_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafeRow_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafeRow_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafeRow_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafeRow_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafeRow_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafeRow_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ASafeSpeedDefinition_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ASafeSpeedDefinition_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ASafeSpeedDefinition_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ASafeSpeedDefinition_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ASafeSpeedDefinition_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ASafeSpeedDefinition_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ASafeSpeedDefinition_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ASafeSpeedDefinition_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ASafeSpeedDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int release_ASafeSpeedDefinition_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ASafeSpeedDefinition_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ASafeSpeedDefinition_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** aTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_aTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_aTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_aTractionIdentity_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_aTractionIdentity_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int aTractionIdentity_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_aTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_aTractionIdentity_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_aTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_aTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_aTractionIdentity_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_aTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** av_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_av_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_Map_t_SDMConversionModelPkg_double_conversion_allowed();
extern int av_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_av_Map_t_SDMConversionModelPkg_long_conversion_allowed();
extern int av_Map_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_av_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_av_Map_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_av_Map_t_SDMConversionModelPkg(void *pValue);
extern int release_av_Map_t_SDMConversionModelPkg(void *pValue);
extern int copy_av_Map_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_av_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** av_MergedMap_t_SDMConversionModelPkg 
 ****************************************************************/
extern int av_MergedMap_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_av_MergedMap_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_av_MergedMap_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_av_MergedMap_t_SDMConversionModelPkg_double_conversion_allowed();
extern int av_MergedMap_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_av_MergedMap_t_SDMConversionModelPkg_long_conversion_allowed();
extern int av_MergedMap_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_av_MergedMap_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_av_MergedMap_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_av_MergedMap_t_SDMConversionModelPkg(void *pValue);
extern int release_av_MergedMap_t_SDMConversionModelPkg(void *pValue);
extern int copy_av_MergedMap_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_av_MergedMap_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** BCAccumulator_type_CalcBrakingCurves_Pkg 
 ****************************************************************/
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BCAccumulator_type_CalcBrakingCurves_Pkg_string(const char *str, char **endptr);
extern int string_to_BCAccumulator_type_CalcBrakingCurves_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCAccumulator_type_CalcBrakingCurves_Pkg_double_conversion_allowed();
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BCAccumulator_type_CalcBrakingCurves_Pkg_long_conversion_allowed();
extern int BCAccumulator_type_CalcBrakingCurves_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BCAccumulator_type_CalcBrakingCurves_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BCAccumulator_type_CalcBrakingCurves_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BCAccumulator_type_CalcBrakingCurves_Pkg(void *pValue);
extern int release_BCAccumulator_type_CalcBrakingCurves_Pkg(void *pValue);
extern int copy_BCAccumulator_type_CalcBrakingCurves_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BCAccumulator_type_CalcBrakingCurves_Pkg_Utils;

/****************************************************************
 ** BCD_DMI_Types_Pkg 
 ****************************************************************/
extern int BCD_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BCD_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_DMI_Types_Pkg_double_conversion_allowed();
extern int BCD_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BCD_DMI_Types_Pkg_long_conversion_allowed();
extern int BCD_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BCD_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BCD_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BCD_DMI_Types_Pkg(void *pValue);
extern int release_BCD_DMI_Types_Pkg(void *pValue);
extern int copy_BCD_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BCD_DMI_Types_Pkg_Utils;

/****************************************************************
 ** BCD_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int BCD_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BCD_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_BCD_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BCD_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int BCD_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BCD_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int BCD_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BCD_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BCD_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BCD_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_BCD_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_BCD_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BCD_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** bec_t_TargetLimits_Pkg 
 ****************************************************************/
extern int bec_t_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_bec_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_bec_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_bec_t_TargetLimits_Pkg_double_conversion_allowed();
extern int bec_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_bec_t_TargetLimits_Pkg_long_conversion_allowed();
extern int bec_t_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_bec_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_bec_t_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_bec_t_TargetLimits_Pkg(void *pValue);
extern int release_bec_t_TargetLimits_Pkg(void *pValue);
extern int copy_bec_t_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_bec_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_double_conversion_allowed();
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_long_conversion_allowed();
extern int BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int release_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int copy_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_counters_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg 
 ****************************************************************/
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_double_conversion_allowed();
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_long_conversion_allowed();
extern int BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int release_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pValue);
extern int copy_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_find_T_CalculateTrainPosition_Pkg_BG_utilities_Pkg_Utils;

/****************************************************************
 ** BG_Header_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Header_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_Header_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Header_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Header_T_BG_Types_Pkg_double_conversion_allowed();
extern int BG_Header_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_Header_T_BG_Types_Pkg_long_conversion_allowed();
extern int BG_Header_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_Header_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_Header_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_Header_T_BG_Types_Pkg(void *pValue);
extern int release_BG_Header_T_BG_Types_Pkg(void *pValue);
extern int copy_BG_Header_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_Header_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Message_T_BG_Types_Pkg 
 ****************************************************************/
extern int BG_Message_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_Message_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Message_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Message_T_BG_Types_Pkg_double_conversion_allowed();
extern int BG_Message_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_Message_T_BG_Types_Pkg_long_conversion_allowed();
extern int BG_Message_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_Message_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_Message_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_Message_T_BG_Types_Pkg(void *pValue);
extern int release_BG_Message_T_BG_Types_Pkg(void *pValue);
extern int copy_BG_Message_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_Message_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** BG_Orientation_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BG_Orientation_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_BG_Orientation_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BG_Orientation_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BG_Orientation_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int BG_Orientation_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BG_Orientation_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BG_Orientation_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BG_Orientation_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_BG_Orientation_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_BG_Orientation_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BG_Orientation_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** BGCollector_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_BGCollector_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_BGCollector_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_BGCollector_T_Receive_TrackSide_Msg_Pkg_double_conversion_allowed();
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_BGCollector_T_Receive_TrackSide_Msg_Pkg_long_conversion_allowed();
extern int BGCollector_T_Receive_TrackSide_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_BGCollector_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_BGCollector_T_Receive_TrackSide_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_BGCollector_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int release_BGCollector_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int copy_BGCollector_T_Receive_TrackSide_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_BGCollector_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** Brake_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_command_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_inhibition_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_inhibition_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_inhibition_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_inhibition_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_inhibition_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_inhibition_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_inhibition_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_inhibition_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_inhibition_command_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_inhibition_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_inhibition_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_inhibition_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_pressure_value_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_pressure_value_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_pressure_value_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_pressure_value_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_pressure_value_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_pressure_value_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_pressure_value_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_pressure_value_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_pressure_value_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_pressure_value_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_pressure_value_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_pressure_value_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Brake_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Brake_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Brake_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Brake_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Brake_status_T_TIU_Types_Pkg(void *pValue);
extern int release_Brake_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_Brake_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** cab_ID_T_TIU_Types_Pkg 
 ****************************************************************/
extern int cab_ID_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_cab_ID_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_cab_ID_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cab_ID_T_TIU_Types_Pkg_double_conversion_allowed();
extern int cab_ID_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_cab_ID_T_TIU_Types_Pkg_long_conversion_allowed();
extern int cab_ID_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_cab_ID_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_cab_ID_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_cab_ID_T_TIU_Types_Pkg(void *pValue);
extern int release_cab_ID_T_TIU_Types_Pkg(void *pValue);
extern int copy_cab_ID_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_cab_ID_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** centerOfBalisePosition_T_BG_Types_Pkg 
 ****************************************************************/
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_centerOfBalisePosition_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_centerOfBalisePosition_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_centerOfBalisePosition_T_BG_Types_Pkg_double_conversion_allowed();
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_centerOfBalisePosition_T_BG_Types_Pkg_long_conversion_allowed();
extern int centerOfBalisePosition_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_centerOfBalisePosition_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_centerOfBalisePosition_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_centerOfBalisePosition_T_BG_Types_Pkg(void *pValue);
extern int release_centerOfBalisePosition_T_BG_Types_Pkg(void *pValue);
extern int copy_centerOfBalisePosition_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_centerOfBalisePosition_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** Change_of_allowed_current_consumption_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Change_of_allowed_current_consumption_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(void *pValue);
extern int release_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(void *pValue);
extern int copy_Change_of_allowed_current_consumption_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Change_of_allowed_current_consumption_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Change_traction_system_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Change_traction_system_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Change_traction_system_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Change_traction_system_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Change_traction_system_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Change_traction_system_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Change_traction_system_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Change_traction_system_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Change_traction_system_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Change_traction_system_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Change_traction_system_T_TIU_Types_Pkg(void *pValue);
extern int release_Change_traction_system_T_TIU_Types_Pkg(void *pValue);
extern int copy_Change_traction_system_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Change_traction_system_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** cmdRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_cmdRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_cmdRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_cmdRadioUnit_T_API_RadioCommunication_Pkg_double_conversion_allowed();
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int is_cmdRadioUnit_T_API_RadioCommunication_Pkg_long_conversion_allowed();
extern int cmdRadioUnit_T_API_RadioCommunication_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_cmdRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_cmdRadioUnit_T_API_RadioCommunication_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_cmdRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int release_cmdRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int copy_cmdRadioUnit_T_API_RadioCommunication_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_cmdRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** coeff_BrakeBasic_t_SDMConversionModelPkg 
 ****************************************************************/
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_coeff_BrakeBasic_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_coeff_BrakeBasic_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_coeff_BrakeBasic_t_SDMConversionModelPkg_double_conversion_allowed();
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_coeff_BrakeBasic_t_SDMConversionModelPkg_long_conversion_allowed();
extern int coeff_BrakeBasic_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_coeff_BrakeBasic_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_coeff_BrakeBasic_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_coeff_BrakeBasic_t_SDMConversionModelPkg(void *pValue);
extern int release_coeff_BrakeBasic_t_SDMConversionModelPkg(void *pValue);
extern int copy_coeff_BrakeBasic_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_coeff_BrakeBasic_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** CompressedPacketData_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPacketData_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CompressedPacketData_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPacketData_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPacketData_T_Common_Types_Pkg_double_conversion_allowed();
extern int CompressedPacketData_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_CompressedPacketData_T_Common_Types_Pkg_long_conversion_allowed();
extern int CompressedPacketData_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_CompressedPacketData_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CompressedPacketData_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CompressedPacketData_T_Common_Types_Pkg(void *pValue);
extern int release_CompressedPacketData_T_Common_Types_Pkg(void *pValue);
extern int copy_CompressedPacketData_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CompressedPacketData_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** CompressedPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int CompressedPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CompressedPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_CompressedPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_CompressedPackets_T_Common_Types_Pkg_double_conversion_allowed();
extern int CompressedPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_CompressedPackets_T_Common_Types_Pkg_long_conversion_allowed();
extern int CompressedPackets_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_CompressedPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CompressedPackets_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CompressedPackets_T_Common_Types_Pkg(void *pValue);
extern int release_CompressedPackets_T_Common_Types_Pkg(void *pValue);
extern int copy_CompressedPackets_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CompressedPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** connection_ids_T_Handover_Pkg 
 ****************************************************************/
extern int connection_ids_T_Handover_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_connection_ids_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_connection_ids_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connection_ids_T_Handover_Pkg_double_conversion_allowed();
extern int connection_ids_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int is_connection_ids_T_Handover_Pkg_long_conversion_allowed();
extern int connection_ids_T_Handover_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_connection_ids_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_connection_ids_T_Handover_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_connection_ids_T_Handover_Pkg(void *pValue);
extern int release_connection_ids_T_Handover_Pkg(void *pValue);
extern int copy_connection_ids_T_Handover_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_connection_ids_T_Handover_Pkg_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_INT_T_DATA 
 ****************************************************************/
extern int connectionStatusRadioUnit_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_connectionStatusRadioUnit_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_INT_T_DATA_double_conversion_allowed();
extern int connectionStatusRadioUnit_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_connectionStatusRadioUnit_INT_T_DATA_long_conversion_allowed();
extern int connectionStatusRadioUnit_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_connectionStatusRadioUnit_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_connectionStatusRadioUnit_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_connectionStatusRadioUnit_INT_T_DATA(void *pValue);
extern int release_connectionStatusRadioUnit_INT_T_DATA(void *pValue);
extern int copy_connectionStatusRadioUnit_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_INT_T_DATA_Utils;

/****************************************************************
 ** connectionStatusRadioUnit_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_double_conversion_allowed();
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int is_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_long_conversion_allowed();
extern int connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int release_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(void *pValue);
extern int copy_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_connectionStatusRadioUnit_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** CurveCollection_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int CurveCollection_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_CurveCollection_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_CurveCollection_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_CurveCollection_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int CurveCollection_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_CurveCollection_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int CurveCollection_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_CurveCollection_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_CurveCollection_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_CurveCollection_T_CalcBrakingCurves_types(void *pValue);
extern int release_CurveCollection_T_CalcBrakingCurves_types(void *pValue);
extern int copy_CurveCollection_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_CurveCollection_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** D_CYCLOC 
 ****************************************************************/
extern int D_CYCLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_CYCLOC_string(const char *str, char **endptr);
extern int string_to_D_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_D_CYCLOC_double_conversion_allowed();
extern int D_CYCLOC_to_double(const void *pValue, double *nValue);
extern int is_D_CYCLOC_long_conversion_allowed();
extern int D_CYCLOC_to_long(const void *pValue, long *nValue);
extern void compare_D_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_CYCLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_CYCLOC(void *pValue);
extern int release_D_CYCLOC(void *pValue);
extern int copy_D_CYCLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_CYCLOC_Utils;

/****************************************************************
 ** D_DP 
 ****************************************************************/
extern int D_DP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_DP_string(const char *str, char **endptr);
extern int string_to_D_DP(const char *str, void *pValue, char **endptr);
extern int is_D_DP_double_conversion_allowed();
extern int D_DP_to_double(const void *pValue, double *nValue);
extern int is_D_DP_long_conversion_allowed();
extern int D_DP_to_long(const void *pValue, long *nValue);
extern void compare_D_DP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_DP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_DP(void *pValue);
extern int release_D_DP(void *pValue);
extern int copy_D_DP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_DP_Utils;

/****************************************************************
 ** D_EMERGENCYSTOP 
 ****************************************************************/
extern int D_EMERGENCYSTOP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_D_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_D_EMERGENCYSTOP_double_conversion_allowed();
extern int D_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int is_D_EMERGENCYSTOP_long_conversion_allowed();
extern int D_EMERGENCYSTOP_to_long(const void *pValue, long *nValue);
extern void compare_D_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_EMERGENCYSTOP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_EMERGENCYSTOP(void *pValue);
extern int release_D_EMERGENCYSTOP(void *pValue);
extern int copy_D_EMERGENCYSTOP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_EMERGENCYSTOP_Utils;

/****************************************************************
 ** D_ENDTIMERSTARTLOC 
 ****************************************************************/
extern int D_ENDTIMERSTARTLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_ENDTIMERSTARTLOC_string(const char *str, char **endptr);
extern int string_to_D_ENDTIMERSTARTLOC(const char *str, void *pValue, char **endptr);
extern int is_D_ENDTIMERSTARTLOC_double_conversion_allowed();
extern int D_ENDTIMERSTARTLOC_to_double(const void *pValue, double *nValue);
extern int is_D_ENDTIMERSTARTLOC_long_conversion_allowed();
extern int D_ENDTIMERSTARTLOC_to_long(const void *pValue, long *nValue);
extern void compare_D_ENDTIMERSTARTLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_ENDTIMERSTARTLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_ENDTIMERSTARTLOC(void *pValue);
extern int release_D_ENDTIMERSTARTLOC(void *pValue);
extern int copy_D_ENDTIMERSTARTLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_ENDTIMERSTARTLOC_Utils;

/****************************************************************
 ** D_GRADIENT 
 ****************************************************************/
extern int D_GRADIENT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_GRADIENT_string(const char *str, char **endptr);
extern int string_to_D_GRADIENT(const char *str, void *pValue, char **endptr);
extern int is_D_GRADIENT_double_conversion_allowed();
extern int D_GRADIENT_to_double(const void *pValue, double *nValue);
extern int is_D_GRADIENT_long_conversion_allowed();
extern int D_GRADIENT_to_long(const void *pValue, long *nValue);
extern void compare_D_GRADIENT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_GRADIENT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_GRADIENT(void *pValue);
extern int release_D_GRADIENT(void *pValue);
extern int copy_D_GRADIENT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_GRADIENT_Utils;

/****************************************************************
 ** D_LEVELTR 
 ****************************************************************/
extern int D_LEVELTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LEVELTR_string(const char *str, char **endptr);
extern int string_to_D_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_D_LEVELTR_double_conversion_allowed();
extern int D_LEVELTR_to_double(const void *pValue, double *nValue);
extern int is_D_LEVELTR_long_conversion_allowed();
extern int D_LEVELTR_to_long(const void *pValue, long *nValue);
extern void compare_D_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LEVELTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LEVELTR(void *pValue);
extern int release_D_LEVELTR(void *pValue);
extern int copy_D_LEVELTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LEVELTR_Utils;

/****************************************************************
 ** D_LINK 
 ****************************************************************/
extern int D_LINK_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LINK_string(const char *str, char **endptr);
extern int string_to_D_LINK(const char *str, void *pValue, char **endptr);
extern int is_D_LINK_double_conversion_allowed();
extern int D_LINK_to_double(const void *pValue, double *nValue);
extern int is_D_LINK_long_conversion_allowed();
extern int D_LINK_to_long(const void *pValue, long *nValue);
extern void compare_D_LINK(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LINK_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LINK(void *pValue);
extern int release_D_LINK(void *pValue);
extern int copy_D_LINK(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LINK_Utils;

/****************************************************************
 ** D_LOC 
 ****************************************************************/
extern int D_LOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LOC_string(const char *str, char **endptr);
extern int string_to_D_LOC(const char *str, void *pValue, char **endptr);
extern int is_D_LOC_double_conversion_allowed();
extern int D_LOC_to_double(const void *pValue, double *nValue);
extern int is_D_LOC_long_conversion_allowed();
extern int D_LOC_to_long(const void *pValue, long *nValue);
extern void compare_D_LOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LOC(void *pValue);
extern int release_D_LOC(void *pValue);
extern int copy_D_LOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LOC_Utils;

/****************************************************************
 ** D_LRBG 
 ****************************************************************/
extern int D_LRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_LRBG_string(const char *str, char **endptr);
extern int string_to_D_LRBG(const char *str, void *pValue, char **endptr);
extern int is_D_LRBG_double_conversion_allowed();
extern int D_LRBG_to_double(const void *pValue, double *nValue);
extern int is_D_LRBG_long_conversion_allowed();
extern int D_LRBG_to_long(const void *pValue, long *nValue);
extern void compare_D_LRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_LRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_LRBG(void *pValue);
extern int release_D_LRBG(void *pValue);
extern int copy_D_LRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_LRBG_Utils;

/****************************************************************
 ** D_MAMODE 
 ****************************************************************/
extern int D_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_MAMODE_string(const char *str, char **endptr);
extern int string_to_D_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_D_MAMODE_double_conversion_allowed();
extern int D_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_D_MAMODE_long_conversion_allowed();
extern int D_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_D_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_MAMODE(void *pValue);
extern int release_D_MAMODE(void *pValue);
extern int copy_D_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_MAMODE_Utils;

/****************************************************************
 ** D_NVOVTRP 
 ****************************************************************/
extern int D_NVOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_D_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVOVTRP_double_conversion_allowed();
extern int D_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int is_D_NVOVTRP_long_conversion_allowed();
extern int D_NVOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_D_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVOVTRP(void *pValue);
extern int release_D_NVOVTRP(void *pValue);
extern int copy_D_NVOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVOVTRP_Utils;

/****************************************************************
 ** D_NVPOTRP 
 ****************************************************************/
extern int D_NVPOTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVPOTRP_string(const char *str, char **endptr);
extern int string_to_D_NVPOTRP(const char *str, void *pValue, char **endptr);
extern int is_D_NVPOTRP_double_conversion_allowed();
extern int D_NVPOTRP_to_double(const void *pValue, double *nValue);
extern int is_D_NVPOTRP_long_conversion_allowed();
extern int D_NVPOTRP_to_long(const void *pValue, long *nValue);
extern void compare_D_NVPOTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVPOTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVPOTRP(void *pValue);
extern int release_D_NVPOTRP(void *pValue);
extern int copy_D_NVPOTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVPOTRP_Utils;

/****************************************************************
 ** D_NVROLL 
 ****************************************************************/
extern int D_NVROLL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVROLL_string(const char *str, char **endptr);
extern int string_to_D_NVROLL(const char *str, void *pValue, char **endptr);
extern int is_D_NVROLL_double_conversion_allowed();
extern int D_NVROLL_to_double(const void *pValue, double *nValue);
extern int is_D_NVROLL_long_conversion_allowed();
extern int D_NVROLL_to_long(const void *pValue, long *nValue);
extern void compare_D_NVROLL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVROLL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVROLL(void *pValue);
extern int release_D_NVROLL(void *pValue);
extern int copy_D_NVROLL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVROLL_Utils;

/****************************************************************
 ** D_NVSTFF 
 ****************************************************************/
extern int D_NVSTFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_NVSTFF_string(const char *str, char **endptr);
extern int string_to_D_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_D_NVSTFF_double_conversion_allowed();
extern int D_NVSTFF_to_double(const void *pValue, double *nValue);
extern int is_D_NVSTFF_long_conversion_allowed();
extern int D_NVSTFF_to_long(const void *pValue, long *nValue);
extern void compare_D_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_NVSTFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_NVSTFF(void *pValue);
extern int release_D_NVSTFF(void *pValue);
extern int copy_D_NVSTFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_NVSTFF_Utils;

/****************************************************************
 ** D_OL 
 ****************************************************************/
extern int D_OL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_OL_string(const char *str, char **endptr);
extern int string_to_D_OL(const char *str, void *pValue, char **endptr);
extern int is_D_OL_double_conversion_allowed();
extern int D_OL_to_double(const void *pValue, double *nValue);
extern int is_D_OL_long_conversion_allowed();
extern int D_OL_to_long(const void *pValue, long *nValue);
extern void compare_D_OL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_OL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_OL(void *pValue);
extern int release_D_OL(void *pValue);
extern int copy_D_OL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_OL_Utils;

/****************************************************************
 ** D_RBCTR 
 ****************************************************************/
extern int D_RBCTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_RBCTR_string(const char *str, char **endptr);
extern int string_to_D_RBCTR(const char *str, void *pValue, char **endptr);
extern int is_D_RBCTR_double_conversion_allowed();
extern int D_RBCTR_to_double(const void *pValue, double *nValue);
extern int is_D_RBCTR_long_conversion_allowed();
extern int D_RBCTR_to_long(const void *pValue, long *nValue);
extern void compare_D_RBCTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_RBCTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_RBCTR(void *pValue);
extern int release_D_RBCTR(void *pValue);
extern int copy_D_RBCTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_RBCTR_Utils;

/****************************************************************
 ** D_REF 
 ****************************************************************/
extern int D_REF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_REF_string(const char *str, char **endptr);
extern int string_to_D_REF(const char *str, void *pValue, char **endptr);
extern int is_D_REF_double_conversion_allowed();
extern int D_REF_to_double(const void *pValue, double *nValue);
extern int is_D_REF_long_conversion_allowed();
extern int D_REF_to_long(const void *pValue, long *nValue);
extern void compare_D_REF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_REF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_REF(void *pValue);
extern int release_D_REF(void *pValue);
extern int copy_D_REF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_REF_Utils;

/****************************************************************
 ** D_REVERSE 
 ****************************************************************/
extern int D_REVERSE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_REVERSE_string(const char *str, char **endptr);
extern int string_to_D_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_REVERSE_double_conversion_allowed();
extern int D_REVERSE_to_double(const void *pValue, double *nValue);
extern int is_D_REVERSE_long_conversion_allowed();
extern int D_REVERSE_to_long(const void *pValue, long *nValue);
extern void compare_D_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_REVERSE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_REVERSE(void *pValue);
extern int release_D_REVERSE(void *pValue);
extern int copy_D_REVERSE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_REVERSE_Utils;

/****************************************************************
 ** D_SECTIONTIMERSTOPLOC 
 ****************************************************************/
extern int D_SECTIONTIMERSTOPLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_SECTIONTIMERSTOPLOC_string(const char *str, char **endptr);
extern int string_to_D_SECTIONTIMERSTOPLOC(const char *str, void *pValue, char **endptr);
extern int is_D_SECTIONTIMERSTOPLOC_double_conversion_allowed();
extern int D_SECTIONTIMERSTOPLOC_to_double(const void *pValue, double *nValue);
extern int is_D_SECTIONTIMERSTOPLOC_long_conversion_allowed();
extern int D_SECTIONTIMERSTOPLOC_to_long(const void *pValue, long *nValue);
extern void compare_D_SECTIONTIMERSTOPLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_SECTIONTIMERSTOPLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_SECTIONTIMERSTOPLOC(void *pValue);
extern int release_D_SECTIONTIMERSTOPLOC(void *pValue);
extern int copy_D_SECTIONTIMERSTOPLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_SECTIONTIMERSTOPLOC_Utils;

/****************************************************************
 ** D_SR 
 ****************************************************************/
extern int D_SR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_SR_string(const char *str, char **endptr);
extern int string_to_D_SR(const char *str, void *pValue, char **endptr);
extern int is_D_SR_double_conversion_allowed();
extern int D_SR_to_double(const void *pValue, double *nValue);
extern int is_D_SR_long_conversion_allowed();
extern int D_SR_to_long(const void *pValue, long *nValue);
extern void compare_D_SR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_SR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_SR(void *pValue);
extern int release_D_SR(void *pValue);
extern int copy_D_SR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_SR_Utils;

/****************************************************************
 ** D_STARTOL 
 ****************************************************************/
extern int D_STARTOL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_STARTOL_string(const char *str, char **endptr);
extern int string_to_D_STARTOL(const char *str, void *pValue, char **endptr);
extern int is_D_STARTOL_double_conversion_allowed();
extern int D_STARTOL_to_double(const void *pValue, double *nValue);
extern int is_D_STARTOL_long_conversion_allowed();
extern int D_STARTOL_to_long(const void *pValue, long *nValue);
extern void compare_D_STARTOL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_STARTOL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_STARTOL(void *pValue);
extern int release_D_STARTOL(void *pValue);
extern int copy_D_STARTOL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_STARTOL_Utils;

/****************************************************************
 ** D_STARTREVERSE 
 ****************************************************************/
extern int D_STARTREVERSE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_STARTREVERSE_string(const char *str, char **endptr);
extern int string_to_D_STARTREVERSE(const char *str, void *pValue, char **endptr);
extern int is_D_STARTREVERSE_double_conversion_allowed();
extern int D_STARTREVERSE_to_double(const void *pValue, double *nValue);
extern int is_D_STARTREVERSE_long_conversion_allowed();
extern int D_STARTREVERSE_to_long(const void *pValue, long *nValue);
extern void compare_D_STARTREVERSE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_STARTREVERSE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_STARTREVERSE(void *pValue);
extern int release_D_STARTREVERSE(void *pValue);
extern int copy_D_STARTREVERSE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_STARTREVERSE_Utils;

/****************************************************************
 ** D_STATIC 
 ****************************************************************/
extern int D_STATIC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_STATIC_string(const char *str, char **endptr);
extern int string_to_D_STATIC(const char *str, void *pValue, char **endptr);
extern int is_D_STATIC_double_conversion_allowed();
extern int D_STATIC_to_double(const void *pValue, double *nValue);
extern int is_D_STATIC_long_conversion_allowed();
extern int D_STATIC_to_long(const void *pValue, long *nValue);
extern void compare_D_STATIC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_STATIC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_STATIC(void *pValue);
extern int release_D_STATIC(void *pValue);
extern int copy_D_STATIC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_STATIC_Utils;

/****************************************************************
 ** D_test_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_current_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_current_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_current_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_current_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_current_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_current_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_current_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_distance_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_distance_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_distance_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_distance_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_distance_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_distance_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_distance_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_distance_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_distance_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_distance_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_distance_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_distance_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_distance_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_distance_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackcond_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_trackcond_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_trackcond_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_trackcond_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_trackcond_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_trackinit_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_trackinit_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_trackinit_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_trackinit_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_trackinit_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_trackinit_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_trackinit_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_trackinit_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_trackinit_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_trackinit_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_trackinit_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_trackinit_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_trackinit_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_trackinit_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_test_traction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int D_test_traction_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_test_traction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_D_test_traction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_D_test_traction_T_TIU_Types_Pkg_double_conversion_allowed();
extern int D_test_traction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_D_test_traction_T_TIU_Types_Pkg_long_conversion_allowed();
extern int D_test_traction_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_D_test_traction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_test_traction_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_test_traction_T_TIU_Types_Pkg(void *pValue);
extern int release_D_test_traction_T_TIU_Types_Pkg(void *pValue);
extern int copy_D_test_traction_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_test_traction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** D_TRACKCOND 
 ****************************************************************/
extern int D_TRACKCOND_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_D_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_D_TRACKCOND_double_conversion_allowed();
extern int D_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int is_D_TRACKCOND_long_conversion_allowed();
extern int D_TRACKCOND_to_long(const void *pValue, long *nValue);
extern void compare_D_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_TRACKCOND_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_TRACKCOND(void *pValue);
extern int release_D_TRACKCOND(void *pValue);
extern int copy_D_TRACKCOND(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_TRACKCOND_Utils;

/****************************************************************
 ** D_TSR 
 ****************************************************************/
extern int D_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_TSR_string(const char *str, char **endptr);
extern int string_to_D_TSR(const char *str, void *pValue, char **endptr);
extern int is_D_TSR_double_conversion_allowed();
extern int D_TSR_to_double(const void *pValue, double *nValue);
extern int is_D_TSR_long_conversion_allowed();
extern int D_TSR_to_long(const void *pValue, long *nValue);
extern void compare_D_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_TSR(void *pValue);
extern int release_D_TSR(void *pValue);
extern int copy_D_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_TSR_Utils;

/****************************************************************
 ** D_VALIDNV 
 ****************************************************************/
extern int D_VALIDNV_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_D_VALIDNV_string(const char *str, char **endptr);
extern int string_to_D_VALIDNV(const char *str, void *pValue, char **endptr);
extern int is_D_VALIDNV_double_conversion_allowed();
extern int D_VALIDNV_to_double(const void *pValue, double *nValue);
extern int is_D_VALIDNV_long_conversion_allowed();
extern int D_VALIDNV_to_long(const void *pValue, long *nValue);
extern void compare_D_VALIDNV(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_D_VALIDNV_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_D_VALIDNV(void *pValue);
extern int release_D_VALIDNV(void *pValue);
extern int copy_D_VALIDNV(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_D_VALIDNV_Utils;

/****************************************************************
 ** dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg 
 ****************************************************************/
extern int dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_string(const char *str, char **endptr);
extern int string_to_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_double_conversion_allowed();
extern int dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_to_double(const void *pValue, double *nValue);
extern int is_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_long_conversion_allowed();
extern int dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(void *pValue);
extern int release_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(void *pValue);
extern int copy_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_dataCollectionForLevelTransition_T_EVC_MEM_Support_Pkg_Utils;

/****************************************************************
 ** DataForDMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForDMI_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DataForDMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForDMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForDMI_t_TrackAtlasTypes_double_conversion_allowed();
extern int DataForDMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DataForDMI_t_TrackAtlasTypes_long_conversion_allowed();
extern int DataForDMI_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DataForDMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DataForDMI_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DataForDMI_t_TrackAtlasTypes(void *pValue);
extern int release_DataForDMI_t_TrackAtlasTypes(void *pValue);
extern int copy_DataForDMI_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DataForDMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForModeAndLevel_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DataForModeAndLevel_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForModeAndLevel_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForModeAndLevel_t_TrackAtlasTypes_double_conversion_allowed();
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DataForModeAndLevel_t_TrackAtlasTypes_long_conversion_allowed();
extern int DataForModeAndLevel_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DataForModeAndLevel_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DataForModeAndLevel_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DataForModeAndLevel_t_TrackAtlasTypes(void *pValue);
extern int release_DataForModeAndLevel_t_TrackAtlasTypes(void *pValue);
extern int copy_DataForModeAndLevel_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DataForModeAndLevel_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** DataForSupervision_nextGen_t_TrackAtlasTypes 
 ****************************************************************/
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DataForSupervision_nextGen_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DataForSupervision_nextGen_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DataForSupervision_nextGen_t_TrackAtlasTypes_double_conversion_allowed();
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DataForSupervision_nextGen_t_TrackAtlasTypes_long_conversion_allowed();
extern int DataForSupervision_nextGen_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DataForSupervision_nextGen_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DataForSupervision_nextGen_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DataForSupervision_nextGen_t_TrackAtlasTypes(void *pValue);
extern int release_DataForSupervision_nextGen_t_TrackAtlasTypes(void *pValue);
extern int copy_DataForSupervision_nextGen_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DataForSupervision_nextGen_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Diff_T_Packet_Types_Pkg 
 ****************************************************************/
extern int Diff_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Diff_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Diff_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Diff_T_Packet_Types_Pkg_double_conversion_allowed();
extern int Diff_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Diff_T_Packet_Types_Pkg_long_conversion_allowed();
extern int Diff_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Diff_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Diff_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Diff_T_Packet_Types_Pkg(void *pValue);
extern int release_Diff_T_Packet_Types_Pkg(void *pValue);
extern int copy_Diff_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Diff_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** DiffArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int DiffArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DiffArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DiffArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DiffArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int DiffArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DiffArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int DiffArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DiffArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DiffArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DiffArray_T_Packet_Types_Pkg(void *pValue);
extern int release_DiffArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_DiffArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DiffArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Adhesion_Factor_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_airtightSystem_INT_T_DATA 
 ****************************************************************/
extern int DMI_airtightSystem_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_airtightSystem_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_INT_T_DATA_double_conversion_allowed();
extern int DMI_airtightSystem_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_airtightSystem_INT_T_DATA_long_conversion_allowed();
extern int DMI_airtightSystem_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_airtightSystem_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_airtightSystem_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_airtightSystem_INT_T_DATA(void *pValue);
extern int release_DMI_airtightSystem_INT_T_DATA(void *pValue);
extern int copy_DMI_airtightSystem_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_airtightSystem_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_airtightSystem_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_airtightSystem_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_airtightSystem_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_airtightSystem_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_airtightSystem_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_airtightSystem_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_airtightSystem_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_airtightSystem_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_airtightSystem_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_airtightSystem_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_airtightSystem_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_airtightSystem_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Available_Menu_INT_T_DATA 
 ****************************************************************/
extern int DMI_Available_Menu_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Available_Menu_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_INT_T_DATA_double_conversion_allowed();
extern int DMI_Available_Menu_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Available_Menu_INT_T_DATA_long_conversion_allowed();
extern int DMI_Available_Menu_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Available_Menu_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Available_Menu_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Available_Menu_INT_T_DATA(void *pValue);
extern int release_DMI_Available_Menu_INT_T_DATA(void *pValue);
extern int copy_DMI_Available_Menu_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Available_Menu_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Available_Menu_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Available_Menu_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Available_Menu_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Available_Menu_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Available_Menu_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Available_Menu_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Available_Menu_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Available_Menu_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Available_Menu_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Available_Menu_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Available_Menu_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Available_Menu_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_brakeModel_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_brakeModel_id_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_brakeModel_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_INT_T_DATA_double_conversion_allowed();
extern int DMI_brakeModel_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_brakeModel_id_INT_T_DATA_long_conversion_allowed();
extern int DMI_brakeModel_id_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_brakeModel_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_brakeModel_id_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_brakeModel_id_INT_T_DATA(void *pValue);
extern int release_DMI_brakeModel_id_INT_T_DATA(void *pValue);
extern int copy_DMI_brakeModel_id_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_brakeModel_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_brakeModel_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_brakeModel_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_brakeModel_id_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_brakeModel_id_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_brakeModel_id_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_brakeModel_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_brakeModel_id_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_brakeModel_id_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_brakeModel_id_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_brakeModel_id_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_brakeModel_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Cabin_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Cabin_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Cabin_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Cabin_Identifier_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Cabin_Identifier_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Cabin_Identifier_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Cabin_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Cabin_Identifier_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Cabin_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Cabin_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Cabin_Identifier_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Cabin_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_context_TXT_MSG_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_context_TXT_MSG_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_context_TXT_MSG_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_context_TXT_MSG_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_context_TXT_MSG_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_context_TXT_MSG_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_context_TXT_MSG_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_context_TXT_MSG_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_context_TXT_MSG_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_context_TXT_MSG_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_context_TXT_MSG_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_context_TXT_MSG_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Display_Control_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Display_Control_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Display_Control_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Display_Control_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Display_Control_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Display_Control_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Display_Control_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Display_Control_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Display_Control_int_array_T_DATA(void *pValue);
extern int release_DMI_Display_Control_int_array_T_DATA(void *pValue);
extern int copy_DMI_Display_Control_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Display_Control_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Display_Control_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_DMI_Identifier_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_DMI_Identifier_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DMI_Identifier_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DMI_Identifier_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_DMI_Identifier_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_DMI_Identifier_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_DMI_Identifier_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_DMI_Identifier_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_DMI_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_DMI_Identifier_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_DMI_Identifier_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_DMI_Identifier_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Driver_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Identifier_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Driver_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Identifier_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Driver_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Driver_Identifier_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Driver_Identifier_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Driver_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Driver_Identifier_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Driver_Identifier_int_array_T_DATA(void *pValue);
extern int release_DMI_Driver_Identifier_int_array_T_DATA(void *pValue);
extern int copy_DMI_Driver_Identifier_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Driver_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Driver_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Driver_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Driver_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Driver_Request_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Driver_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Driver_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Driver_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Driver_Request_int_array_T_DATA(void *pValue);
extern int release_DMI_Driver_Request_int_array_T_DATA(void *pValue);
extern int copy_DMI_Driver_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Driver_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Driver_Request_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_DriverAck_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_DriverAck_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverAck_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverAck_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_DriverAck_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_DriverAck_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_DriverAck_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_DriverAck_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_DriverAck_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_DriverAck_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_DriverAck_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_DriverAck_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_DriverRequest_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_DriverRequest_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_DriverRequest_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_DriverRequest_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_DriverRequest_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_DriverRequest_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_DriverRequest_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_DriverRequest_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_DriverRequest_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_DriverRequest_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_DriverRequest_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_DriverRequest_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Dynamic_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Dynamic_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Dynamic_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Dynamic_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Dynamic_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Dynamic_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Dynamic_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Dynamic_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Dynamic_int_array_T_DATA(void *pValue);
extern int release_DMI_Dynamic_int_array_T_DATA(void *pValue);
extern int copy_DMI_Dynamic_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Dynamic_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Dynamic_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Entry_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Entry_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Entry_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Entry_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Entry_Request_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Entry_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Entry_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Entry_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Entry_Request_int_array_T_DATA(void *pValue);
extern int release_DMI_Entry_Request_int_array_T_DATA(void *pValue);
extern int copy_DMI_Entry_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Entry_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Entry_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Coded_Train_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Level_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_EVC_Level_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Level_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Level_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_EVC_Level_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_EVC_Level_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Level_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_Radio_Net_Data_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_EVC_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_EVC_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_EVC_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_EVC_status_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_EVC_status_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_EVC_status_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_EVC_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_EVC_status_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_EVC_status_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_EVC_status_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_EVC_status_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_EVC_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfile_int_arrayT 
 ****************************************************************/
extern int DMI_gradientProfile_int_arrayT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfile_int_arrayT_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_int_arrayT(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_int_arrayT_double_conversion_allowed();
extern int DMI_gradientProfile_int_arrayT_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfile_int_arrayT_long_conversion_allowed();
extern int DMI_gradientProfile_int_arrayT_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfile_int_arrayT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfile_int_arrayT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfile_int_arrayT(void *pValue);
extern int release_DMI_gradientProfile_int_arrayT(void *pValue);
extern int copy_DMI_gradientProfile_int_arrayT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfile_int_arrayT_Utils;

/****************************************************************
 ** DMI_gradientProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfile_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfile_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_gradientProfile_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfile_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfile_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_gradientProfile_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_gradientProfile_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileArray_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfileArray_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_gradientProfileArray_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfileArray_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_gradientProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_gradientProfileArray_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_gradientProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_gradientProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_gradientProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_gradientProfileElement_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_gradientProfileElement_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_gradientProfileElement_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_gradientProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_gradientProfileElement_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_gradientProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_gradientProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_gradientProfileElement_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_gradientProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Icon_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icon_Ack_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icon_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Icon_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icon_Ack_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Icon_Ack_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icon_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icon_Ack_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icon_Ack_int_array_T_DATA(void *pValue);
extern int release_DMI_Icon_Ack_int_array_T_DATA(void *pValue);
extern int copy_DMI_Icon_Ack_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icon_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Icons_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Icons_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icons_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Icons_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icons_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Icons_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icons_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icons_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icons_int_array_T_DATA(void *pValue);
extern int release_DMI_Icons_int_array_T_DATA(void *pValue);
extern int copy_DMI_Icons_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icons_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Icons_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Identifier_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Identifier_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Identifier_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Identifier_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Identifier_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Identifier_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Identifier_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Identifier_int_array_T_DATA(void *pValue);
extern int release_DMI_Identifier_int_array_T_DATA(void *pValue);
extern int copy_DMI_Identifier_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Identifier_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Identifier_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Identifier_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_level_array_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_array_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_level_array_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_array_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_array_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_level_array_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_level_array_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_level_array_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_level_array_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_level_array_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_level_array_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_level_array_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_level_array_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_level_array_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Level_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Level_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Level_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Level_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Level_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Level_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Level_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Level_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Level_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_Level_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_Level_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Level_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Level_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Level_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_level_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_level_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_level_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_level_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_level_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_level_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_level_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_level_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_level_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_level_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_level_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_level_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_level_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_level_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_LevelList_int_array_T_DATA 
 ****************************************************************/
extern int DMI_LevelList_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_LevelList_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_int_array_T_DATA_double_conversion_allowed();
extern int DMI_LevelList_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_LevelList_int_array_T_DATA_long_conversion_allowed();
extern int DMI_LevelList_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_LevelList_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_LevelList_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_LevelList_int_array_T_DATA(void *pValue);
extern int release_DMI_LevelList_int_array_T_DATA(void *pValue);
extern int copy_DMI_LevelList_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_LevelList_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_LevelList_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_LevelList_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_LevelList_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_LevelList_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_LevelList_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_LevelList_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_LevelList_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_LevelList_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_LevelList_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_LevelList_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_LevelList_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_LevelList_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_LevelList_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_LevelList_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_INT_T_DATA 
 ****************************************************************/
extern int DMI_List_Entry_Request_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_List_Entry_Request_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_INT_T_DATA_double_conversion_allowed();
extern int DMI_List_Entry_Request_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_List_Entry_Request_INT_T_DATA_long_conversion_allowed();
extern int DMI_List_Entry_Request_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_List_Entry_Request_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_List_Entry_Request_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_List_Entry_Request_INT_T_DATA(void *pValue);
extern int release_DMI_List_Entry_Request_INT_T_DATA(void *pValue);
extern int copy_DMI_List_Entry_Request_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_List_Entry_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_List_Entry_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_List_Entry_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_List_Entry_Request_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_List_Entry_Request_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_List_Entry_Request_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_List_Entry_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_List_Entry_Request_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_List_Entry_Request_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_List_Entry_Request_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_List_Entry_Request_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_List_Entry_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_loadingGauge_INT_T_DATA 
 ****************************************************************/
extern int DMI_loadingGauge_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_loadingGauge_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_INT_T_DATA_double_conversion_allowed();
extern int DMI_loadingGauge_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_loadingGauge_INT_T_DATA_long_conversion_allowed();
extern int DMI_loadingGauge_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_loadingGauge_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_loadingGauge_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_loadingGauge_INT_T_DATA(void *pValue);
extern int release_DMI_loadingGauge_INT_T_DATA(void *pValue);
extern int copy_DMI_loadingGauge_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_loadingGauge_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_loadingGauge_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_loadingGauge_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_loadingGauge_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_loadingGauge_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_loadingGauge_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_loadingGauge_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_loadingGauge_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_loadingGauge_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_loadingGauge_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_loadingGauge_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_loadingGauge_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_loadingGauge_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_m_icon_flashing_freq_INT_T_DATA 
 ****************************************************************/
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_m_icon_flashing_freq_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_m_icon_flashing_freq_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_m_icon_flashing_freq_INT_T_DATA_double_conversion_allowed();
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_m_icon_flashing_freq_INT_T_DATA_long_conversion_allowed();
extern int DMI_m_icon_flashing_freq_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_m_icon_flashing_freq_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_m_icon_flashing_freq_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_m_icon_flashing_freq_INT_T_DATA(void *pValue);
extern int release_DMI_m_icon_flashing_freq_INT_T_DATA(void *pValue);
extern int copy_DMI_m_icon_flashing_freq_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_m_icon_flashing_freq_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_Menu_Request_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Menu_Request_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Menu_Request_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Menu_Request_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Menu_Request_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Menu_Request_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Menu_Request_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Menu_Request_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Menu_Request_int_array_T_DATA(void *pValue);
extern int release_DMI_Menu_Request_int_array_T_DATA(void *pValue);
extern int copy_DMI_Menu_Request_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Menu_Request_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Menu_Request_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_Q_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Q_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Q_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Q_TEXT_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Q_TEXT_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Q_TEXT_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Q_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Q_TEXT_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Q_TEXT_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Q_TEXT_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Q_TEXT_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Q_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Radio_Net_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Radio_Net_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Radio_Net_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Radio_Net_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Radio_Net_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_Radio_Net_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_Radio_Net_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Radio_Net_Data_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Request_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_Request_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Request_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Request_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Request_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_Request_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Request_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_Request_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Request_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Request_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Request_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_Request_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_Request_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Request_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfile_int_array_T_DATA 
 ****************************************************************/
extern int DMI_speedProfile_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_speedProfile_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_int_array_T_DATA_double_conversion_allowed();
extern int DMI_speedProfile_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_speedProfile_int_array_T_DATA_long_conversion_allowed();
extern int DMI_speedProfile_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_speedProfile_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_speedProfile_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_speedProfile_int_array_T_DATA(void *pValue);
extern int release_DMI_speedProfile_int_array_T_DATA(void *pValue);
extern int copy_DMI_speedProfile_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_speedProfile_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_speedProfile_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_speedProfile_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfile_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfile_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_speedProfile_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_speedProfile_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_speedProfile_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_speedProfile_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_speedProfile_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_speedProfile_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_speedProfile_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_speedProfile_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_SpeedProfileArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_SpeedProfileArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_SpeedProfileArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_SpeedProfileArray_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_SpeedProfileArray_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_SpeedProfileArray_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_SpeedProfileArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_SpeedProfileArray_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_SpeedProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_SpeedProfileArray_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_SpeedProfileArray_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_SpeedProfileArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_speedProfileElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_speedProfileElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_speedProfileElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_speedProfileElement_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_speedProfileElement_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_speedProfileElement_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_speedProfileElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_speedProfileElement_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_speedProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_speedProfileElement_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_speedProfileElement_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_speedProfileElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Status_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Status_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Status_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Status_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Status_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Status_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Status_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Status_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Status_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Status_int_array_T_DATA(void *pValue);
extern int release_DMI_Status_int_array_T_DATA(void *pValue);
extern int copy_DMI_Status_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Status_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Status_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_StatusSet_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_StatusSet_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_StatusSet_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_StatusSet_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_StatusSet_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_StatusSet_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_StatusSet_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_StatusSet_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_StatusSet_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_StatusSet_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_StatusSet_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_StatusSet_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_System_Version_int_array_T_DATA 
 ****************************************************************/
extern int DMI_System_Version_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_System_Version_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_int_array_T_DATA_double_conversion_allowed();
extern int DMI_System_Version_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_System_Version_int_array_T_DATA_long_conversion_allowed();
extern int DMI_System_Version_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_System_Version_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_System_Version_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_System_Version_int_array_T_DATA(void *pValue);
extern int release_DMI_System_Version_int_array_T_DATA(void *pValue);
extern int copy_DMI_System_Version_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_System_Version_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_System_Version_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_TEXT_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TEXT_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TEXT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TEXT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TEXT_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TEXT_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TEXT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TEXT_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TEXT_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TEXT_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TEXT_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TEXT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TEXT_INT_Array_T_DATA 
 ****************************************************************/
extern int DMI_TEXT_INT_Array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TEXT_INT_Array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_TEXT_INT_Array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_TEXT_INT_Array_T_DATA_double_conversion_allowed();
extern int DMI_TEXT_INT_Array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_TEXT_INT_Array_T_DATA_long_conversion_allowed();
extern int DMI_TEXT_INT_Array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TEXT_INT_Array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TEXT_INT_Array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TEXT_INT_Array_T_DATA(void *pValue);
extern int release_DMI_TEXT_INT_Array_T_DATA(void *pValue);
extern int copy_DMI_TEXT_INT_Array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TEXT_INT_Array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_Ack_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Text_Message_Ack_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_Ack_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_Ack_int_array_T_DATA(void *pValue);
extern int release_DMI_Text_Message_Ack_int_array_T_DATA(void *pValue);
extern int copy_DMI_Text_Message_Ack_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Text_Message_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Text_Message_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Text_Message_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Text_Message_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_int_array_T_DATA(void *pValue);
extern int release_DMI_Text_Message_int_array_T_DATA(void *pValue);
extern int copy_DMI_Text_Message_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg 
 ****************************************************************/
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_double_conversion_allowed();
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_long_conversion_allowed();
extern int DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int release_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(void *pValue);
extern int copy_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Text_Message_T_DMI_Messages_EVC_to_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_TextMessage_ID_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TextMessage_ID_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TextMessage_ID_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TextMessage_ID_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TextMessage_ID_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TextMessage_ID_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TextMessage_ID_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TextMessage_ID_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TextMessage_ID_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TextMessage_ID_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TextMessage_ID_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TextMessage_ID_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_to_EVC_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_int_T_API_DMI_Pkg_double_conversion_allowed();
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_to_EVC_Message_int_T_API_DMI_Pkg_long_conversion_allowed();
extern int DMI_to_EVC_Message_int_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_to_EVC_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_to_EVC_Message_int_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_to_EVC_Message_int_T_API_DMI_Pkg(void *pValue);
extern int release_DMI_to_EVC_Message_int_T_API_DMI_Pkg(void *pValue);
extern int copy_DMI_to_EVC_Message_int_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_to_EVC_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_to_EVC_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_to_EVC_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_to_EVC_Message_T_API_DMI_Pkg_double_conversion_allowed();
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_to_EVC_Message_T_API_DMI_Pkg_long_conversion_allowed();
extern int DMI_to_EVC_Message_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_to_EVC_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_to_EVC_Message_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_to_EVC_Message_T_API_DMI_Pkg(void *pValue);
extern int release_DMI_to_EVC_Message_T_API_DMI_Pkg(void *pValue);
extern int copy_DMI_to_EVC_Message_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_to_EVC_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** DMI_To_Modes_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_To_Modes_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_To_Modes_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_To_Modes_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_To_Modes_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_To_Modes_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_To_Modes_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_To_Modes_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_To_Modes_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_To_Modes_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_To_Modes_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_To_Modes_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Track_Description_int_array_T 
 ****************************************************************/
extern int DMI_Track_Description_int_array_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Track_Description_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_Track_Description_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_Track_Description_int_array_T_double_conversion_allowed();
extern int DMI_Track_Description_int_array_T_to_double(const void *pValue, double *nValue);
extern int is_DMI_Track_Description_int_array_T_long_conversion_allowed();
extern int DMI_Track_Description_int_array_T_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Track_Description_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Track_Description_int_array_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Track_Description_int_array_T(void *pValue);
extern int release_DMI_Track_Description_int_array_T(void *pValue);
extern int copy_DMI_Track_Description_int_array_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Track_Description_int_array_T_Utils;

/****************************************************************
 ** DMI_trackCondition_int_array_T 
 ****************************************************************/
extern int DMI_trackCondition_int_array_T_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackCondition_int_array_T_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_int_array_T(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_int_array_T_double_conversion_allowed();
extern int DMI_trackCondition_int_array_T_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackCondition_int_array_T_long_conversion_allowed();
extern int DMI_trackCondition_int_array_T_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackCondition_int_array_T(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackCondition_int_array_T_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackCondition_int_array_T(void *pValue);
extern int release_DMI_trackCondition_int_array_T(void *pValue);
extern int copy_DMI_trackCondition_int_array_T(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackCondition_int_array_T_Utils;

/****************************************************************
 ** DMI_trackCondition_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackCondition_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackCondition_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackCondition_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackCondition_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_trackCondition_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackCondition_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackCondition_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackCondition_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_trackCondition_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_trackCondition_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackCondition_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionArray_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackConditionArray_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionArray_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionArray_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackConditionArray_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_trackConditionArray_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackConditionArray_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackConditionArray_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackConditionArray_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_trackConditionArray_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_trackConditionArray_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackConditionArray_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_trackConditionElement_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_trackConditionElement_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_trackConditionElement_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_trackConditionElement_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_trackConditionElement_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_trackConditionElement_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_trackConditionElement_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_trackConditionElement_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_trackConditionElement_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_trackConditionElement_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_trackConditionElement_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_trackConditionElement_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_Ack_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_Ack_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Train_Data_Ack_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_Ack_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_Ack_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_Ack_int_array_T_DATA(void *pValue);
extern int release_DMI_Train_Data_Ack_int_array_T_DATA(void *pValue);
extern int copy_DMI_Train_Data_Ack_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_double_conversion_allowed();
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_long_conversion_allowed();
extern int DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int release_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pValue);
extern int copy_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_Ack_T_DMI_Messages_DMI_to_EVC_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Data_int_array_T_DATA 
 ****************************************************************/
extern int DMI_Train_Data_int_array_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_int_array_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_int_array_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_int_array_T_DATA_double_conversion_allowed();
extern int DMI_Train_Data_int_array_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_int_array_T_DATA_long_conversion_allowed();
extern int DMI_Train_Data_int_array_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_int_array_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_int_array_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_int_array_T_DATA(void *pValue);
extern int release_DMI_Train_Data_int_array_T_DATA(void *pValue);
extern int copy_DMI_Train_Data_int_array_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_int_array_T_DATA_Utils;

/****************************************************************
 ** DMI_Train_Data_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Data_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_train_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_id_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_INT_T_DATA_double_conversion_allowed();
extern int DMI_train_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_id_INT_T_DATA_long_conversion_allowed();
extern int DMI_train_id_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_id_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_id_INT_T_DATA(void *pValue);
extern int release_DMI_train_id_INT_T_DATA(void *pValue);
extern int copy_DMI_train_id_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_train_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_id_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_train_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_id_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_train_id_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_id_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_id_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_train_id_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_train_id_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_train_length_INT_T_DATA 
 ****************************************************************/
extern int DMI_train_length_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_length_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_INT_T_DATA_double_conversion_allowed();
extern int DMI_train_length_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_length_INT_T_DATA_long_conversion_allowed();
extern int DMI_train_length_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_length_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_length_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_length_INT_T_DATA(void *pValue);
extern int release_DMI_train_length_INT_T_DATA(void *pValue);
extern int copy_DMI_train_length_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_length_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_train_length_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_train_length_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_train_length_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_train_length_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_train_length_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_train_length_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_train_length_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_train_length_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_train_length_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_train_length_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_train_length_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_train_length_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_train_length_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_train_length_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_Train_Running_Number_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSG_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TXT_MSG_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSG_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSG_status_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TXT_MSG_status_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TXT_MSG_status_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TXT_MSG_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TXT_MSG_status_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TXT_MSG_status_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TXT_MSG_status_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TXT_MSG_status_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TXT_MSG_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_TXT_MSGList_status_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_TXT_MSGList_status_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_TXT_MSGList_status_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_TXT_MSGList_status_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** DMI_vMax_id_INT_T_DATA 
 ****************************************************************/
extern int DMI_vMax_id_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_vMax_id_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_INT_T_DATA_double_conversion_allowed();
extern int DMI_vMax_id_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DMI_vMax_id_INT_T_DATA_long_conversion_allowed();
extern int DMI_vMax_id_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DMI_vMax_id_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_vMax_id_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_vMax_id_INT_T_DATA(void *pValue);
extern int release_DMI_vMax_id_INT_T_DATA(void *pValue);
extern int copy_DMI_vMax_id_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_vMax_id_INT_T_DATA_Utils;

/****************************************************************
 ** DMI_vMax_id_T_DMI_Types_Pkg 
 ****************************************************************/
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DMI_vMax_id_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_DMI_vMax_id_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_DMI_vMax_id_T_DMI_Types_Pkg_double_conversion_allowed();
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_DMI_vMax_id_T_DMI_Types_Pkg_long_conversion_allowed();
extern int DMI_vMax_id_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_DMI_vMax_id_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DMI_vMax_id_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DMI_vMax_id_T_DMI_Types_Pkg(void *pValue);
extern int release_DMI_vMax_id_T_DMI_Types_Pkg(void *pValue);
extern int copy_DMI_vMax_id_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DMI_vMax_id_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** dmiOutputs_T_manage_DMI_Output_Pkg 
 ****************************************************************/
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_dmiOutputs_T_manage_DMI_Output_Pkg_string(const char *str, char **endptr);
extern int string_to_dmiOutputs_T_manage_DMI_Output_Pkg(const char *str, void *pValue, char **endptr);
extern int is_dmiOutputs_T_manage_DMI_Output_Pkg_double_conversion_allowed();
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_double(const void *pValue, double *nValue);
extern int is_dmiOutputs_T_manage_DMI_Output_Pkg_long_conversion_allowed();
extern int dmiOutputs_T_manage_DMI_Output_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_dmiOutputs_T_manage_DMI_Output_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_dmiOutputs_T_manage_DMI_Output_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_dmiOutputs_T_manage_DMI_Output_Pkg(void *pValue);
extern int release_dmiOutputs_T_manage_DMI_Output_Pkg(void *pValue);
extern int copy_dmiOutputs_T_manage_DMI_Output_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_dmiOutputs_T_manage_DMI_Output_Pkg_Utils;

/****************************************************************
 ** DP_or_OL_t_TrackAtlasTypes 
 ****************************************************************/
extern int DP_or_OL_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DP_or_OL_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_DP_or_OL_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_DP_or_OL_t_TrackAtlasTypes_double_conversion_allowed();
extern int DP_or_OL_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_DP_or_OL_t_TrackAtlasTypes_long_conversion_allowed();
extern int DP_or_OL_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_DP_or_OL_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DP_or_OL_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DP_or_OL_t_TrackAtlasTypes(void *pValue);
extern int release_DP_or_OL_t_TrackAtlasTypes(void *pValue);
extern int copy_DP_or_OL_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DP_or_OL_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Driver2MAR_T_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_MA_Request_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Driver2MAR_T_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_MA_Request_double_conversion_allowed();
extern int Driver2MAR_T_MA_Request_to_double(const void *pValue, double *nValue);
extern int is_Driver2MAR_T_MA_Request_long_conversion_allowed();
extern int Driver2MAR_T_MA_Request_to_long(const void *pValue, long *nValue);
extern void compare_Driver2MAR_T_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Driver2MAR_T_MA_Request_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Driver2MAR_T_MA_Request(void *pValue);
extern int release_Driver2MAR_T_MA_Request(void *pValue);
extern int copy_Driver2MAR_T_MA_Request(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Driver2MAR_T_MA_Request_Utils;

/****************************************************************
 ** Driver2MAR_T_TA_MA_Request 
 ****************************************************************/
extern int Driver2MAR_T_TA_MA_Request_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Driver2MAR_T_TA_MA_Request_string(const char *str, char **endptr);
extern int string_to_Driver2MAR_T_TA_MA_Request(const char *str, void *pValue, char **endptr);
extern int is_Driver2MAR_T_TA_MA_Request_double_conversion_allowed();
extern int Driver2MAR_T_TA_MA_Request_to_double(const void *pValue, double *nValue);
extern int is_Driver2MAR_T_TA_MA_Request_long_conversion_allowed();
extern int Driver2MAR_T_TA_MA_Request_to_long(const void *pValue, long *nValue);
extern void compare_Driver2MAR_T_TA_MA_Request(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Driver2MAR_T_TA_MA_Request_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Driver2MAR_T_TA_MA_Request(void *pValue);
extern int release_Driver2MAR_T_TA_MA_Request(void *pValue);
extern int copy_Driver2MAR_T_TA_MA_Request(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Driver2MAR_T_TA_MA_Request_Utils;

/****************************************************************
 ** DriverIdentifier_INT_T_DATA 
 ****************************************************************/
extern int DriverIdentifier_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_DriverIdentifier_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_DriverIdentifier_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_DriverIdentifier_INT_T_DATA_double_conversion_allowed();
extern int DriverIdentifier_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_DriverIdentifier_INT_T_DATA_long_conversion_allowed();
extern int DriverIdentifier_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_DriverIdentifier_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_DriverIdentifier_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_DriverIdentifier_INT_T_DATA(void *pValue);
extern int release_DriverIdentifier_INT_T_DATA(void *pValue);
extern int copy_DriverIdentifier_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_DriverIdentifier_INT_T_DATA_Utils;

/****************************************************************
 ** driverIdentifier_T_DMI_Messages_Bothways_Pkg 
 ****************************************************************/
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_driverIdentifier_T_DMI_Messages_Bothways_Pkg_string(const char *str, char **endptr);
extern int string_to_driverIdentifier_T_DMI_Messages_Bothways_Pkg(const char *str, void *pValue, char **endptr);
extern int is_driverIdentifier_T_DMI_Messages_Bothways_Pkg_double_conversion_allowed();
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_double(const void *pValue, double *nValue);
extern int is_driverIdentifier_T_DMI_Messages_Bothways_Pkg_long_conversion_allowed();
extern int driverIdentifier_T_DMI_Messages_Bothways_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_driverIdentifier_T_DMI_Messages_Bothways_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_driverIdentifier_T_DMI_Messages_Bothways_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_driverIdentifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int release_driverIdentifier_T_DMI_Messages_Bothways_Pkg(void *pValue);
extern int copy_driverIdentifier_T_DMI_Messages_Bothways_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_driverIdentifier_T_DMI_Messages_Bothways_Pkg_Utils;

/****************************************************************
 ** EB_command_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int EB_command_T_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EB_command_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_EB_command_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EB_command_T_SDM_Commands_Pkg_double_conversion_allowed();
extern int EB_command_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_EB_command_T_SDM_Commands_Pkg_long_conversion_allowed();
extern int EB_command_T_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_EB_command_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EB_command_T_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EB_command_T_SDM_Commands_Pkg(void *pValue);
extern int release_EB_command_T_SDM_Commands_Pkg(void *pValue);
extern int copy_EB_command_T_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EB_command_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** Endtimer_t_TrackAtlasTypes 
 ****************************************************************/
extern int Endtimer_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Endtimer_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Endtimer_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Endtimer_t_TrackAtlasTypes_double_conversion_allowed();
extern int Endtimer_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_Endtimer_t_TrackAtlasTypes_long_conversion_allowed();
extern int Endtimer_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_Endtimer_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Endtimer_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Endtimer_t_TrackAtlasTypes(void *pValue);
extern int release_Endtimer_t_TrackAtlasTypes(void *pValue);
extern int copy_Endtimer_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Endtimer_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** EOA_real_T_TargetManagement_types 
 ****************************************************************/
extern int EOA_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EOA_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_EOA_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_EOA_real_T_TargetManagement_types_double_conversion_allowed();
extern int EOA_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_EOA_real_T_TargetManagement_types_long_conversion_allowed();
extern int EOA_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_EOA_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EOA_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EOA_real_T_TargetManagement_types(void *pValue);
extern int release_EOA_real_T_TargetManagement_types(void *pValue);
extern int copy_EOA_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EOA_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** ErrorMessage_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ErrorMessage_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ErrorMessage_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ErrorMessage_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ErrorMessage_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ErrorMessage_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ErrorMessage_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ErrorMessage_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ErrorMessage_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ErrorMessage_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ErrorMessage_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ErrorMessage_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_int_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EVC_to_DMI_Message_int_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_int_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_int_T_API_DMI_Pkg_double_conversion_allowed();
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_EVC_to_DMI_Message_int_T_API_DMI_Pkg_long_conversion_allowed();
extern int EVC_to_DMI_Message_int_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_EVC_to_DMI_Message_int_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EVC_to_DMI_Message_int_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EVC_to_DMI_Message_int_T_API_DMI_Pkg(void *pValue);
extern int release_EVC_to_DMI_Message_int_T_API_DMI_Pkg(void *pValue);
extern int copy_EVC_to_DMI_Message_int_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_int_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** EVC_to_DMI_Message_T_API_DMI_Pkg 
 ****************************************************************/
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_EVC_to_DMI_Message_T_API_DMI_Pkg_string(const char *str, char **endptr);
extern int string_to_EVC_to_DMI_Message_T_API_DMI_Pkg(const char *str, void *pValue, char **endptr);
extern int is_EVC_to_DMI_Message_T_API_DMI_Pkg_double_conversion_allowed();
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_double(const void *pValue, double *nValue);
extern int is_EVC_to_DMI_Message_T_API_DMI_Pkg_long_conversion_allowed();
extern int EVC_to_DMI_Message_T_API_DMI_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_EVC_to_DMI_Message_T_API_DMI_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_EVC_to_DMI_Message_T_API_DMI_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_EVC_to_DMI_Message_T_API_DMI_Pkg(void *pValue);
extern int release_EVC_to_DMI_Message_T_API_DMI_Pkg(void *pValue);
extern int copy_EVC_to_DMI_Message_T_API_DMI_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_EVC_to_DMI_Message_T_API_DMI_Pkg_Utils;

/****************************************************************
 ** extractTargetsMRSPACC_TargetManagement_pkg 
 ****************************************************************/
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_extractTargetsMRSPACC_TargetManagement_pkg_string(const char *str, char **endptr);
extern int string_to_extractTargetsMRSPACC_TargetManagement_pkg(const char *str, void *pValue, char **endptr);
extern int is_extractTargetsMRSPACC_TargetManagement_pkg_double_conversion_allowed();
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_double(const void *pValue, double *nValue);
extern int is_extractTargetsMRSPACC_TargetManagement_pkg_long_conversion_allowed();
extern int extractTargetsMRSPACC_TargetManagement_pkg_to_long(const void *pValue, long *nValue);
extern void compare_extractTargetsMRSPACC_TargetManagement_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_extractTargetsMRSPACC_TargetManagement_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_extractTargetsMRSPACC_TargetManagement_pkg(void *pValue);
extern int release_extractTargetsMRSPACC_TargetManagement_pkg(void *pValue);
extern int copy_extractTargetsMRSPACC_TargetManagement_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_extractTargetsMRSPACC_TargetManagement_pkg_Utils;

/****************************************************************
 ** filterRelatedEvents_T_Common_Types_Pkg 
 ****************************************************************/
extern int filterRelatedEvents_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_filterRelatedEvents_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_filterRelatedEvents_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_filterRelatedEvents_T_Common_Types_Pkg_double_conversion_allowed();
extern int filterRelatedEvents_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_filterRelatedEvents_T_Common_Types_Pkg_long_conversion_allowed();
extern int filterRelatedEvents_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_filterRelatedEvents_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_filterRelatedEvents_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_filterRelatedEvents_T_Common_Types_Pkg(void *pValue);
extern int release_filterRelatedEvents_T_Common_Types_Pkg(void *pValue);
extern int copy_filterRelatedEvents_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_filterRelatedEvents_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** FromTIU_t_TrackAtlasTypes 
 ****************************************************************/
extern int FromTIU_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_FromTIU_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_FromTIU_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_FromTIU_t_TrackAtlasTypes_double_conversion_allowed();
extern int FromTIU_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_FromTIU_t_TrackAtlasTypes_long_conversion_allowed();
extern int FromTIU_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_FromTIU_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_FromTIU_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_FromTIU_t_TrackAtlasTypes(void *pValue);
extern int release_FromTIU_t_TrackAtlasTypes(void *pValue);
extern int copy_FromTIU_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_FromTIU_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** G_A 
 ****************************************************************/
extern int G_A_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_G_A_string(const char *str, char **endptr);
extern int string_to_G_A(const char *str, void *pValue, char **endptr);
extern int is_G_A_double_conversion_allowed();
extern int G_A_to_double(const void *pValue, double *nValue);
extern int is_G_A_long_conversion_allowed();
extern int G_A_to_long(const void *pValue, long *nValue);
extern void compare_G_A(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_G_A_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_G_A(void *pValue);
extern int release_G_A(void *pValue);
extern int copy_G_A(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_G_A_Utils;

/****************************************************************
 ** G_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_G_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_G_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_G_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_G_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int G_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_G_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_G_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_G_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_G_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_G_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_G_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** Gradient_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Gradient_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_real_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_Gradient_real_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int Gradient_real_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_Gradient_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Gradient_real_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Gradient_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_Gradient_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_Gradient_real_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Gradient_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** Gradient_section_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Gradient_section_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_Gradient_section_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_real_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_Gradient_section_real_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int Gradient_section_real_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_Gradient_section_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Gradient_section_real_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Gradient_section_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_Gradient_section_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_Gradient_section_real_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Gradient_section_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** Gradient_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int Gradient_section_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Gradient_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_Gradient_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_Gradient_section_t_TrackAtlasTypes_double_conversion_allowed();
extern int Gradient_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_Gradient_section_t_TrackAtlasTypes_long_conversion_allowed();
extern int Gradient_section_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_Gradient_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Gradient_section_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Gradient_section_t_TrackAtlasTypes(void *pValue);
extern int release_Gradient_section_t_TrackAtlasTypes(void *pValue);
extern int copy_Gradient_section_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Gradient_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_for_DMI_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_for_DMI_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_for_DMI_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_for_DMI_t_TrackAtlasTypes_double_conversion_allowed();
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_for_DMI_t_TrackAtlasTypes_long_conversion_allowed();
extern int GradientProfile_for_DMI_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_for_DMI_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_for_DMI_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_for_DMI_t_TrackAtlasTypes(void *pValue);
extern int release_GradientProfile_for_DMI_t_TrackAtlasTypes(void *pValue);
extern int copy_GradientProfile_for_DMI_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_for_DMI_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** GradientProfile_real_compensated_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_real_compensated_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_real_t_SDM_GradientAcceleration_types 
 ****************************************************************/
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_real_t_SDM_GradientAcceleration_types_string(const char *str, char **endptr);
extern int string_to_GradientProfile_real_t_SDM_GradientAcceleration_types(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_real_t_SDM_GradientAcceleration_types_double_conversion_allowed();
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_real_t_SDM_GradientAcceleration_types_long_conversion_allowed();
extern int GradientProfile_real_t_SDM_GradientAcceleration_types_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_real_t_SDM_GradientAcceleration_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_real_t_SDM_GradientAcceleration_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int release_GradientProfile_real_t_SDM_GradientAcceleration_types(void *pValue);
extern int copy_GradientProfile_real_t_SDM_GradientAcceleration_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_real_t_SDM_GradientAcceleration_types_Utils;

/****************************************************************
 ** GradientProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int GradientProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_GradientProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_GradientProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_GradientProfile_t_TrackAtlasTypes_double_conversion_allowed();
extern int GradientProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_GradientProfile_t_TrackAtlasTypes_long_conversion_allowed();
extern int GradientProfile_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_GradientProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_GradientProfile_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_GradientProfile_t_TrackAtlasTypes(void *pValue);
extern int release_GradientProfile_t_TrackAtlasTypes(void *pValue);
extern int copy_GradientProfile_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_GradientProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** Icon_control_flag_INT_T_DATA 
 ****************************************************************/
extern int Icon_control_flag_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_control_flag_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_INT_T_DATA_double_conversion_allowed();
extern int Icon_control_flag_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_Icon_control_flag_INT_T_DATA_long_conversion_allowed();
extern int Icon_control_flag_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_Icon_control_flag_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_control_flag_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_control_flag_INT_T_DATA(void *pValue);
extern int release_Icon_control_flag_INT_T_DATA(void *pValue);
extern int copy_Icon_control_flag_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_control_flag_INT_T_DATA_Utils;

/****************************************************************
 ** Icon_control_flag_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_control_flag_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_control_flag_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_control_flag_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_control_flag_T_DMI_Types_Pkg_double_conversion_allowed();
extern int Icon_control_flag_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Icon_control_flag_T_DMI_Types_Pkg_long_conversion_allowed();
extern int Icon_control_flag_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Icon_control_flag_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_control_flag_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_control_flag_T_DMI_Types_Pkg(void *pValue);
extern int release_Icon_control_flag_T_DMI_Types_Pkg(void *pValue);
extern int copy_Icon_control_flag_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_control_flag_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** Icon_group_INT_T_DATA 
 ****************************************************************/
extern int Icon_group_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_group_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_Icon_group_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_INT_T_DATA_double_conversion_allowed();
extern int Icon_group_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_Icon_group_INT_T_DATA_long_conversion_allowed();
extern int Icon_group_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_Icon_group_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_group_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_group_INT_T_DATA(void *pValue);
extern int release_Icon_group_INT_T_DATA(void *pValue);
extern int copy_Icon_group_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_group_INT_T_DATA_Utils;

/****************************************************************
 ** Icon_group_T_DMI_Types_Pkg 
 ****************************************************************/
extern int Icon_group_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Icon_group_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Icon_group_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Icon_group_T_DMI_Types_Pkg_double_conversion_allowed();
extern int Icon_group_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Icon_group_T_DMI_Types_Pkg_long_conversion_allowed();
extern int Icon_group_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Icon_group_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Icon_group_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Icon_group_T_DMI_Types_Pkg(void *pValue);
extern int release_Icon_group_T_DMI_Types_Pkg(void *pValue);
extern int copy_Icon_group_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Icon_group_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** infoFromLinking_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_infoFromLinking_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_infoFromLinking_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_infoFromLinking_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_infoFromLinking_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int infoFromLinking_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_infoFromLinking_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_infoFromLinking_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_infoFromLinking_T_TrainPosition_Types_Pck(void *pValue);
extern int release_infoFromLinking_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_infoFromLinking_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_infoFromLinking_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** Isolation_Status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Isolation_Status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Isolation_Status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Isolation_Status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Isolation_Status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Isolation_Status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Isolation_Status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Isolation_Status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Isolation_Status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Isolation_Status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Isolation_Status_T_TIU_Types_Pkg(void *pValue);
extern int release_Isolation_Status_T_TIU_Types_Pkg(void *pValue);
extern int copy_Isolation_Status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Isolation_Status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_IterPacket58_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58_T_Packet_Types_Pkg_double_conversion_allowed();
extern int IterPacket58_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_IterPacket58_T_Packet_Types_Pkg_long_conversion_allowed();
extern int IterPacket58_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_IterPacket58_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_IterPacket58_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_IterPacket58_T_Packet_Types_Pkg(void *pValue);
extern int release_IterPacket58_T_Packet_Types_Pkg(void *pValue);
extern int copy_IterPacket58_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_IterPacket58_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** IterPacket58List_T_Packet_Types_Pkg 
 ****************************************************************/
extern int IterPacket58List_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_IterPacket58List_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_IterPacket58List_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_IterPacket58List_T_Packet_Types_Pkg_double_conversion_allowed();
extern int IterPacket58List_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_IterPacket58List_T_Packet_Types_Pkg_long_conversion_allowed();
extern int IterPacket58List_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_IterPacket58List_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_IterPacket58List_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_IterPacket58List_T_Packet_Types_Pkg(void *pValue);
extern int release_IterPacket58List_T_Packet_Types_Pkg(void *pValue);
extern int copy_IterPacket58List_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_IterPacket58List_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** kcg_bool 
 ****************************************************************/
extern int kcg_bool_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_bool_string(const char *str, char **endptr);
extern int string_to_kcg_bool(const char *str, void *pValue, char **endptr);
extern int is_kcg_bool_double_conversion_allowed();
extern int kcg_bool_to_double(const void *pValue, double *nValue);
extern int is_kcg_bool_long_conversion_allowed();
extern int kcg_bool_to_long(const void *pValue, long *nValue);
extern void compare_kcg_bool(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_bool_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_bool(void *pValue);
extern int release_kcg_bool(void *pValue);
extern int copy_kcg_bool(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_bool_Utils;

/****************************************************************
 ** kcg_char 
 ****************************************************************/
extern int kcg_char_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_char_string(const char *str, char **endptr);
extern int string_to_kcg_char(const char *str, void *pValue, char **endptr);
extern int is_kcg_char_double_conversion_allowed();
extern int kcg_char_to_double(const void *pValue, double *nValue);
extern int is_kcg_char_long_conversion_allowed();
extern int kcg_char_to_long(const void *pValue, long *nValue);
extern void compare_kcg_char(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_char_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_char(void *pValue);
extern int release_kcg_char(void *pValue);
extern int copy_kcg_char(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_char_Utils;

/****************************************************************
 ** kcg_float32 
 ****************************************************************/
extern int kcg_float32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_float32_string(const char *str, char **endptr);
extern int string_to_kcg_float32(const char *str, void *pValue, char **endptr);
extern int is_kcg_float32_double_conversion_allowed();
extern int kcg_float32_to_double(const void *pValue, double *nValue);
extern int is_kcg_float32_long_conversion_allowed();
extern int kcg_float32_to_long(const void *pValue, long *nValue);
extern void compare_kcg_float32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_float32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_float32(void *pValue);
extern int release_kcg_float32(void *pValue);
extern int copy_kcg_float32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_float32_Utils;

/****************************************************************
 ** kcg_float64 
 ****************************************************************/
extern int kcg_float64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_float64_string(const char *str, char **endptr);
extern int string_to_kcg_float64(const char *str, void *pValue, char **endptr);
extern int is_kcg_float64_double_conversion_allowed();
extern int kcg_float64_to_double(const void *pValue, double *nValue);
extern int is_kcg_float64_long_conversion_allowed();
extern int kcg_float64_to_long(const void *pValue, long *nValue);
extern void compare_kcg_float64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_float64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_float64(void *pValue);
extern int release_kcg_float64(void *pValue);
extern int copy_kcg_float64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_float64_Utils;

/****************************************************************
 ** kcg_int16 
 ****************************************************************/
extern int kcg_int16_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int16_string(const char *str, char **endptr);
extern int string_to_kcg_int16(const char *str, void *pValue, char **endptr);
extern int is_kcg_int16_double_conversion_allowed();
extern int kcg_int16_to_double(const void *pValue, double *nValue);
extern int is_kcg_int16_long_conversion_allowed();
extern int kcg_int16_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int16(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int16_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int16(void *pValue);
extern int release_kcg_int16(void *pValue);
extern int copy_kcg_int16(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int16_Utils;

/****************************************************************
 ** kcg_int32 
 ****************************************************************/
extern int kcg_int32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int32_string(const char *str, char **endptr);
extern int string_to_kcg_int32(const char *str, void *pValue, char **endptr);
extern int is_kcg_int32_double_conversion_allowed();
extern int kcg_int32_to_double(const void *pValue, double *nValue);
extern int is_kcg_int32_long_conversion_allowed();
extern int kcg_int32_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int32(void *pValue);
extern int release_kcg_int32(void *pValue);
extern int copy_kcg_int32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int32_Utils;

/****************************************************************
 ** kcg_int64 
 ****************************************************************/
extern int kcg_int64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int64_string(const char *str, char **endptr);
extern int string_to_kcg_int64(const char *str, void *pValue, char **endptr);
extern int is_kcg_int64_double_conversion_allowed();
extern int kcg_int64_to_double(const void *pValue, double *nValue);
extern int is_kcg_int64_long_conversion_allowed();
extern int kcg_int64_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int64(void *pValue);
extern int release_kcg_int64(void *pValue);
extern int copy_kcg_int64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int64_Utils;

/****************************************************************
 ** kcg_int8 
 ****************************************************************/
extern int kcg_int8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_int8_string(const char *str, char **endptr);
extern int string_to_kcg_int8(const char *str, void *pValue, char **endptr);
extern int is_kcg_int8_double_conversion_allowed();
extern int kcg_int8_to_double(const void *pValue, double *nValue);
extern int is_kcg_int8_long_conversion_allowed();
extern int kcg_int8_to_long(const void *pValue, long *nValue);
extern void compare_kcg_int8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_int8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_int8(void *pValue);
extern int release_kcg_int8(void *pValue);
extern int copy_kcg_int8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_int8_Utils;

/****************************************************************
 ** kcg_size 
 ****************************************************************/
extern int kcg_size_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_size_string(const char *str, char **endptr);
extern int string_to_kcg_size(const char *str, void *pValue, char **endptr);
extern int is_kcg_size_double_conversion_allowed();
extern int kcg_size_to_double(const void *pValue, double *nValue);
extern int is_kcg_size_long_conversion_allowed();
extern int kcg_size_to_long(const void *pValue, long *nValue);
extern void compare_kcg_size(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_size_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_size(void *pValue);
extern int release_kcg_size(void *pValue);
extern int copy_kcg_size(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_size_Utils;

/****************************************************************
 ** kcg_uint16 
 ****************************************************************/
extern int kcg_uint16_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint16_string(const char *str, char **endptr);
extern int string_to_kcg_uint16(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint16_double_conversion_allowed();
extern int kcg_uint16_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint16_long_conversion_allowed();
extern int kcg_uint16_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint16(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint16_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint16(void *pValue);
extern int release_kcg_uint16(void *pValue);
extern int copy_kcg_uint16(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint16_Utils;

/****************************************************************
 ** kcg_uint32 
 ****************************************************************/
extern int kcg_uint32_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint32_string(const char *str, char **endptr);
extern int string_to_kcg_uint32(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint32_double_conversion_allowed();
extern int kcg_uint32_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint32_long_conversion_allowed();
extern int kcg_uint32_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint32(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint32_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint32(void *pValue);
extern int release_kcg_uint32(void *pValue);
extern int copy_kcg_uint32(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint32_Utils;

/****************************************************************
 ** kcg_uint64 
 ****************************************************************/
extern int kcg_uint64_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint64_string(const char *str, char **endptr);
extern int string_to_kcg_uint64(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint64_double_conversion_allowed();
extern int kcg_uint64_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint64_long_conversion_allowed();
extern int kcg_uint64_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint64(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint64_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint64(void *pValue);
extern int release_kcg_uint64(void *pValue);
extern int copy_kcg_uint64(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint64_Utils;

/****************************************************************
 ** kcg_uint8 
 ****************************************************************/
extern int kcg_uint8_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_kcg_uint8_string(const char *str, char **endptr);
extern int string_to_kcg_uint8(const char *str, void *pValue, char **endptr);
extern int is_kcg_uint8_double_conversion_allowed();
extern int kcg_uint8_to_double(const void *pValue, double *nValue);
extern int is_kcg_uint8_long_conversion_allowed();
extern int kcg_uint8_to_long(const void *pValue, long *nValue);
extern void compare_kcg_uint8(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_kcg_uint8_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_kcg_uint8(void *pValue);
extern int release_kcg_uint8(void *pValue);
extern int copy_kcg_uint8(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_kcg_uint8_Utils;

/****************************************************************
 ** L_ACKLEVELTR 
 ****************************************************************/
extern int L_ACKLEVELTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_ACKLEVELTR_string(const char *str, char **endptr);
extern int string_to_L_ACKLEVELTR(const char *str, void *pValue, char **endptr);
extern int is_L_ACKLEVELTR_double_conversion_allowed();
extern int L_ACKLEVELTR_to_double(const void *pValue, double *nValue);
extern int is_L_ACKLEVELTR_long_conversion_allowed();
extern int L_ACKLEVELTR_to_long(const void *pValue, long *nValue);
extern void compare_L_ACKLEVELTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_ACKLEVELTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_ACKLEVELTR(void *pValue);
extern int release_L_ACKLEVELTR(void *pValue);
extern int copy_L_ACKLEVELTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_ACKLEVELTR_Utils;

/****************************************************************
 ** L_ACKMAMODE 
 ****************************************************************/
extern int L_ACKMAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_ACKMAMODE_string(const char *str, char **endptr);
extern int string_to_L_ACKMAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_ACKMAMODE_double_conversion_allowed();
extern int L_ACKMAMODE_to_double(const void *pValue, double *nValue);
extern int is_L_ACKMAMODE_long_conversion_allowed();
extern int L_ACKMAMODE_to_long(const void *pValue, long *nValue);
extern void compare_L_ACKMAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_ACKMAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_ACKMAMODE(void *pValue);
extern int release_L_ACKMAMODE(void *pValue);
extern int copy_L_ACKMAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_ACKMAMODE_Utils;

/****************************************************************
 ** L_DOUBTOVER 
 ****************************************************************/
extern int L_DOUBTOVER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_DOUBTOVER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTOVER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTOVER_double_conversion_allowed();
extern int L_DOUBTOVER_to_double(const void *pValue, double *nValue);
extern int is_L_DOUBTOVER_long_conversion_allowed();
extern int L_DOUBTOVER_to_long(const void *pValue, long *nValue);
extern void compare_L_DOUBTOVER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_DOUBTOVER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_DOUBTOVER(void *pValue);
extern int release_L_DOUBTOVER(void *pValue);
extern int copy_L_DOUBTOVER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_DOUBTOVER_Utils;

/****************************************************************
 ** L_DOUBTUNDER 
 ****************************************************************/
extern int L_DOUBTUNDER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_DOUBTUNDER_string(const char *str, char **endptr);
extern int string_to_L_DOUBTUNDER(const char *str, void *pValue, char **endptr);
extern int is_L_DOUBTUNDER_double_conversion_allowed();
extern int L_DOUBTUNDER_to_double(const void *pValue, double *nValue);
extern int is_L_DOUBTUNDER_long_conversion_allowed();
extern int L_DOUBTUNDER_to_long(const void *pValue, long *nValue);
extern void compare_L_DOUBTUNDER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_DOUBTUNDER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_DOUBTUNDER(void *pValue);
extern int release_L_DOUBTUNDER(void *pValue);
extern int copy_L_DOUBTUNDER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_DOUBTUNDER_Utils;

/****************************************************************
 ** L_ENDSECTION 
 ****************************************************************/
extern int L_ENDSECTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_ENDSECTION_string(const char *str, char **endptr);
extern int string_to_L_ENDSECTION(const char *str, void *pValue, char **endptr);
extern int is_L_ENDSECTION_double_conversion_allowed();
extern int L_ENDSECTION_to_double(const void *pValue, double *nValue);
extern int is_L_ENDSECTION_long_conversion_allowed();
extern int L_ENDSECTION_to_long(const void *pValue, long *nValue);
extern void compare_L_ENDSECTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_ENDSECTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_ENDSECTION(void *pValue);
extern int release_L_ENDSECTION(void *pValue);
extern int copy_L_ENDSECTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_ENDSECTION_Utils;

/****************************************************************
 ** L_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int L_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int L_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_L_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int L_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_L_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_L_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_L_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** L_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_L_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_L_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int L_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_L_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_L_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_L_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** L_MAMODE 
 ****************************************************************/
extern int L_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_MAMODE_string(const char *str, char **endptr);
extern int string_to_L_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_L_MAMODE_double_conversion_allowed();
extern int L_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_L_MAMODE_long_conversion_allowed();
extern int L_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_L_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_MAMODE(void *pValue);
extern int release_L_MAMODE(void *pValue);
extern int copy_L_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_MAMODE_Utils;

/****************************************************************
 ** L_MESSAGE 
 ****************************************************************/
extern int L_MESSAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_MESSAGE_string(const char *str, char **endptr);
extern int string_to_L_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_L_MESSAGE_double_conversion_allowed();
extern int L_MESSAGE_to_double(const void *pValue, double *nValue);
extern int is_L_MESSAGE_long_conversion_allowed();
extern int L_MESSAGE_to_long(const void *pValue, long *nValue);
extern void compare_L_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_MESSAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_MESSAGE(void *pValue);
extern int release_L_MESSAGE(void *pValue);
extern int copy_L_MESSAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_MESSAGE_Utils;

/****************************************************************
 ** L_NVKRINT 
 ****************************************************************/
extern int L_NVKRINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_NVKRINT_string(const char *str, char **endptr);
extern int string_to_L_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_L_NVKRINT_double_conversion_allowed();
extern int L_NVKRINT_to_double(const void *pValue, double *nValue);
extern int is_L_NVKRINT_long_conversion_allowed();
extern int L_NVKRINT_to_long(const void *pValue, long *nValue);
extern void compare_L_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_NVKRINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_NVKRINT(void *pValue);
extern int release_L_NVKRINT(void *pValue);
extern int copy_L_NVKRINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_NVKRINT_Utils;

/****************************************************************
 ** L_PACKET 
 ****************************************************************/
extern int L_PACKET_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_PACKET_string(const char *str, char **endptr);
extern int string_to_L_PACKET(const char *str, void *pValue, char **endptr);
extern int is_L_PACKET_double_conversion_allowed();
extern int L_PACKET_to_double(const void *pValue, double *nValue);
extern int is_L_PACKET_long_conversion_allowed();
extern int L_PACKET_to_long(const void *pValue, long *nValue);
extern void compare_L_PACKET(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_PACKET_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_PACKET(void *pValue);
extern int release_L_PACKET(void *pValue);
extern int copy_L_PACKET(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_PACKET_Utils;

/****************************************************************
 ** L_REVERSEAREA 
 ****************************************************************/
extern int L_REVERSEAREA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_REVERSEAREA_string(const char *str, char **endptr);
extern int string_to_L_REVERSEAREA(const char *str, void *pValue, char **endptr);
extern int is_L_REVERSEAREA_double_conversion_allowed();
extern int L_REVERSEAREA_to_double(const void *pValue, double *nValue);
extern int is_L_REVERSEAREA_long_conversion_allowed();
extern int L_REVERSEAREA_to_long(const void *pValue, long *nValue);
extern void compare_L_REVERSEAREA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_REVERSEAREA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_REVERSEAREA(void *pValue);
extern int release_L_REVERSEAREA(void *pValue);
extern int copy_L_REVERSEAREA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_REVERSEAREA_Utils;

/****************************************************************
 ** L_SECTION 
 ****************************************************************/
extern int L_SECTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_SECTION_string(const char *str, char **endptr);
extern int string_to_L_SECTION(const char *str, void *pValue, char **endptr);
extern int is_L_SECTION_double_conversion_allowed();
extern int L_SECTION_to_double(const void *pValue, double *nValue);
extern int is_L_SECTION_long_conversion_allowed();
extern int L_SECTION_to_long(const void *pValue, long *nValue);
extern void compare_L_SECTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_SECTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_SECTION(void *pValue);
extern int release_L_SECTION(void *pValue);
extern int copy_L_SECTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_SECTION_Utils;

/****************************************************************
 ** L_test_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int L_test_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_test_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_L_test_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_L_test_trackcond_T_TIU_Types_Pkg_double_conversion_allowed();
extern int L_test_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_L_test_trackcond_T_TIU_Types_Pkg_long_conversion_allowed();
extern int L_test_trackcond_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_L_test_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_test_trackcond_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int release_L_test_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int copy_L_test_trackcond_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_test_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** L_TEXT 
 ****************************************************************/
extern int L_TEXT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TEXT_string(const char *str, char **endptr);
extern int string_to_L_TEXT(const char *str, void *pValue, char **endptr);
extern int is_L_TEXT_double_conversion_allowed();
extern int L_TEXT_to_double(const void *pValue, double *nValue);
extern int is_L_TEXT_long_conversion_allowed();
extern int L_TEXT_to_long(const void *pValue, long *nValue);
extern void compare_L_TEXT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TEXT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TEXT(void *pValue);
extern int release_L_TEXT(void *pValue);
extern int copy_L_TEXT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TEXT_Utils;

/****************************************************************
 ** L_TRAIN 
 ****************************************************************/
extern int L_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TRAIN_string(const char *str, char **endptr);
extern int string_to_L_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_L_TRAIN_double_conversion_allowed();
extern int L_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_L_TRAIN_long_conversion_allowed();
extern int L_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_L_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TRAIN(void *pValue);
extern int release_L_TRAIN(void *pValue);
extern int copy_L_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TRAIN_Utils;

/****************************************************************
 ** L_TRAININT 
 ****************************************************************/
extern int L_TRAININT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TRAININT_string(const char *str, char **endptr);
extern int string_to_L_TRAININT(const char *str, void *pValue, char **endptr);
extern int is_L_TRAININT_double_conversion_allowed();
extern int L_TRAININT_to_double(const void *pValue, double *nValue);
extern int is_L_TRAININT_long_conversion_allowed();
extern int L_TRAININT_to_long(const void *pValue, long *nValue);
extern void compare_L_TRAININT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TRAININT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TRAININT(void *pValue);
extern int release_L_TRAININT(void *pValue);
extern int copy_L_TRAININT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TRAININT_Utils;

/****************************************************************
 ** L_TSR 
 ****************************************************************/
extern int L_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_L_TSR_string(const char *str, char **endptr);
extern int string_to_L_TSR(const char *str, void *pValue, char **endptr);
extern int is_L_TSR_double_conversion_allowed();
extern int L_TSR_to_double(const void *pValue, double *nValue);
extern int is_L_TSR_long_conversion_allowed();
extern int L_TSR_to_long(const void *pValue, long *nValue);
extern void compare_L_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_L_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_L_TSR(void *pValue);
extern int release_L_TSR(void *pValue);
extern int copy_L_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_L_TSR_Utils;

/****************************************************************
 ** LevelDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LevelDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableActionKind_DataDictionary_Pkg_double_conversion_allowed();
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LevelDecisionTableActionKind_DataDictionary_Pkg_long_conversion_allowed();
extern int LevelDecisionTableActionKind_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LevelDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LevelDecisionTableActionKind_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LevelDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int release_LevelDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int copy_LevelDecisionTableActionKind_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LevelDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** LevelDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int LevelDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LevelDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_LevelDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LevelDecisionTableType_DataDictionary_Pkg_double_conversion_allowed();
extern int LevelDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LevelDecisionTableType_DataDictionary_Pkg_long_conversion_allowed();
extern int LevelDecisionTableType_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LevelDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LevelDecisionTableType_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LevelDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int release_LevelDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int copy_LevelDecisionTableType_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LevelDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_double_conversion_allowed();
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int is_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_long_conversion_allowed();
extern int linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int release_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int copy_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_linkedBG_index_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** LinkedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LinkedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBG_T_BG_Types_Pkg_double_conversion_allowed();
extern int LinkedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LinkedBG_T_BG_Types_Pkg_long_conversion_allowed();
extern int LinkedBG_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LinkedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LinkedBG_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LinkedBG_T_BG_Types_Pkg(void *pValue);
extern int release_LinkedBG_T_BG_Types_Pkg(void *pValue);
extern int copy_LinkedBG_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LinkedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int release_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_linkedBGs_asPositionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_double_conversion_allowed();
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int is_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_long_conversion_allowed();
extern int linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int release_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int copy_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_linkedBGs_indices_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** LinkedBGs_T_BG_Types_Pkg 
 ****************************************************************/
extern int LinkedBGs_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LinkedBGs_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_LinkedBGs_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LinkedBGs_T_BG_Types_Pkg_double_conversion_allowed();
extern int LinkedBGs_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LinkedBGs_T_BG_Types_Pkg_long_conversion_allowed();
extern int LinkedBGs_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LinkedBGs_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LinkedBGs_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LinkedBGs_T_BG_Types_Pkg(void *pValue);
extern int release_LinkedBGs_T_BG_Types_Pkg(void *pValue);
extern int copy_LinkedBGs_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LinkedBGs_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** LKrIntLookUp_t_SDMConversionModelPkg 
 ****************************************************************/
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LKrIntLookUp_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_LKrIntLookUp_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_LKrIntLookUp_t_SDMConversionModelPkg_double_conversion_allowed();
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_LKrIntLookUp_t_SDMConversionModelPkg_long_conversion_allowed();
extern int LKrIntLookUp_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_LKrIntLookUp_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LKrIntLookUp_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LKrIntLookUp_t_SDMConversionModelPkg(void *pValue);
extern int release_LKrIntLookUp_t_SDMConversionModelPkg(void *pValue);
extern int copy_LKrIntLookUp_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LKrIntLookUp_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** Location_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Location_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Location_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Location_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Location_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int Location_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Location_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int Location_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Location_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Location_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Location_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_Location_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_Location_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Location_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** LocationBasedEvents_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LocationBasedEvents_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_LocationBasedEvents_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocationBasedEvents_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LocationBasedEvents_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int LocationBasedEvents_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LocationBasedEvents_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LocationBasedEvents_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LocationBasedEvents_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_LocationBasedEvents_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_LocationBasedEvents_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LocationBasedEvents_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** LocWithInAcc_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_LocWithInAcc_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_LocWithInAcc_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_LocWithInAcc_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_LocWithInAcc_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int LocWithInAcc_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_LocWithInAcc_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_LocWithInAcc_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_LocWithInAcc_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_LocWithInAcc_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_LocWithInAcc_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_LocWithInAcc_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m32_RBC_RIU_SystemVersion_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m38_initiationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m39_AckOfTerminationOfACommunicationSession_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** M_129_T_TM_radio_messages 
 ****************************************************************/
extern int M_129_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_129_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_129_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_129_T_TM_radio_messages_double_conversion_allowed();
extern int M_129_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_129_T_TM_radio_messages_long_conversion_allowed();
extern int M_129_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_129_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_129_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_129_T_TM_radio_messages(void *pValue);
extern int release_M_129_T_TM_radio_messages(void *pValue);
extern int copy_M_129_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_129_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_132_T_TM_radio_messages 
 ****************************************************************/
extern int M_132_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_132_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_132_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_132_T_TM_radio_messages_double_conversion_allowed();
extern int M_132_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_132_T_TM_radio_messages_long_conversion_allowed();
extern int M_132_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_132_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_132_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_132_T_TM_radio_messages(void *pValue);
extern int release_M_132_T_TM_radio_messages(void *pValue);
extern int copy_M_132_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_132_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_136_T_TM_radio_messages 
 ****************************************************************/
extern int M_136_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_136_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_136_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_136_T_TM_radio_messages_double_conversion_allowed();
extern int M_136_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_136_T_TM_radio_messages_long_conversion_allowed();
extern int M_136_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_136_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_136_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_136_T_TM_radio_messages(void *pValue);
extern int release_M_136_T_TM_radio_messages(void *pValue);
extern int copy_M_136_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_136_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_146_T_TM_radio_messages 
 ****************************************************************/
extern int M_146_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_146_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_146_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_146_T_TM_radio_messages_double_conversion_allowed();
extern int M_146_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_146_T_TM_radio_messages_long_conversion_allowed();
extern int M_146_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_146_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_146_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_146_T_TM_radio_messages(void *pValue);
extern int release_M_146_T_TM_radio_messages(void *pValue);
extern int copy_M_146_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_146_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_147_T_TM_radio_messages 
 ****************************************************************/
extern int M_147_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_147_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_147_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_147_T_TM_radio_messages_double_conversion_allowed();
extern int M_147_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_147_T_TM_radio_messages_long_conversion_allowed();
extern int M_147_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_147_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_147_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_147_T_TM_radio_messages(void *pValue);
extern int release_M_147_T_TM_radio_messages(void *pValue);
extern int copy_M_147_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_147_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_154_T_TM_radio_messages 
 ****************************************************************/
extern int M_154_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_154_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_154_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_154_T_TM_radio_messages_double_conversion_allowed();
extern int M_154_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_154_T_TM_radio_messages_long_conversion_allowed();
extern int M_154_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_154_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_154_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_154_T_TM_radio_messages(void *pValue);
extern int release_M_154_T_TM_radio_messages(void *pValue);
extern int copy_M_154_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_154_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_155_T_TM_radio_messages 
 ****************************************************************/
extern int M_155_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_155_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_155_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_155_T_TM_radio_messages_double_conversion_allowed();
extern int M_155_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_155_T_TM_radio_messages_long_conversion_allowed();
extern int M_155_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_155_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_155_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_155_T_TM_radio_messages(void *pValue);
extern int release_M_155_T_TM_radio_messages(void *pValue);
extern int copy_M_155_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_155_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_156_T_TM_radio_messages 
 ****************************************************************/
extern int M_156_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_156_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_156_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_156_T_TM_radio_messages_double_conversion_allowed();
extern int M_156_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_156_T_TM_radio_messages_long_conversion_allowed();
extern int M_156_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_156_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_156_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_156_T_TM_radio_messages(void *pValue);
extern int release_M_156_T_TM_radio_messages(void *pValue);
extern int copy_M_156_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_156_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_159_T_TM_radio_messages 
 ****************************************************************/
extern int M_159_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_159_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_159_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_159_T_TM_radio_messages_double_conversion_allowed();
extern int M_159_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_159_T_TM_radio_messages_long_conversion_allowed();
extern int M_159_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_159_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_159_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_159_T_TM_radio_messages(void *pValue);
extern int release_M_159_T_TM_radio_messages(void *pValue);
extern int copy_M_159_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_159_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_ACK 
 ****************************************************************/
extern int M_ACK_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_ACK_string(const char *str, char **endptr);
extern int string_to_M_ACK(const char *str, void *pValue, char **endptr);
extern int is_M_ACK_double_conversion_allowed();
extern int M_ACK_to_double(const void *pValue, double *nValue);
extern int is_M_ACK_long_conversion_allowed();
extern int M_ACK_to_long(const void *pValue, long *nValue);
extern void compare_M_ACK(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_ACK_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_ACK(void *pValue);
extern int release_M_ACK(void *pValue);
extern int copy_M_ACK(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_ACK_Utils;

/****************************************************************
 ** M_ADHESION 
 ****************************************************************/
extern int M_ADHESION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_ADHESION_string(const char *str, char **endptr);
extern int string_to_M_ADHESION(const char *str, void *pValue, char **endptr);
extern int is_M_ADHESION_double_conversion_allowed();
extern int M_ADHESION_to_double(const void *pValue, double *nValue);
extern int is_M_ADHESION_long_conversion_allowed();
extern int M_ADHESION_to_long(const void *pValue, long *nValue);
extern void compare_M_ADHESION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_ADHESION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_ADHESION(void *pValue);
extern int release_M_ADHESION(void *pValue);
extern int copy_M_ADHESION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_ADHESION_Utils;

/****************************************************************
 ** M_AIRTIGHT 
 ****************************************************************/
extern int M_AIRTIGHT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_AIRTIGHT_string(const char *str, char **endptr);
extern int string_to_M_AIRTIGHT(const char *str, void *pValue, char **endptr);
extern int is_M_AIRTIGHT_double_conversion_allowed();
extern int M_AIRTIGHT_to_double(const void *pValue, double *nValue);
extern int is_M_AIRTIGHT_long_conversion_allowed();
extern int M_AIRTIGHT_to_long(const void *pValue, long *nValue);
extern void compare_M_AIRTIGHT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_AIRTIGHT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_AIRTIGHT(void *pValue);
extern int release_M_AIRTIGHT(void *pValue);
extern int copy_M_AIRTIGHT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_AIRTIGHT_Utils;

/****************************************************************
 ** M_airtightness_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_airtightness_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_airtightness_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_airtightness_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_airtightness_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_airtightness_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_airtightness_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_airtightness_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_airtightness_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_airtightness_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_airtightness_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_airtightness_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_airtightness_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_airtightness_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_AXLELOADCAT 
 ****************************************************************/
extern int M_AXLELOADCAT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_AXLELOADCAT_string(const char *str, char **endptr);
extern int string_to_M_AXLELOADCAT(const char *str, void *pValue, char **endptr);
extern int is_M_AXLELOADCAT_double_conversion_allowed();
extern int M_AXLELOADCAT_to_double(const void *pValue, double *nValue);
extern int is_M_AXLELOADCAT_long_conversion_allowed();
extern int M_AXLELOADCAT_to_long(const void *pValue, long *nValue);
extern void compare_M_AXLELOADCAT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_AXLELOADCAT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_AXLELOADCAT(void *pValue);
extern int release_M_AXLELOADCAT(void *pValue);
extern int copy_M_AXLELOADCAT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_AXLELOADCAT_Utils;

/****************************************************************
 ** M_brake_inhibit_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_brake_inhibit_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_inhibit_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_inhibit_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_brake_inhibit_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_brake_inhibit_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_brake_inhibit_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_brake_inhibit_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_brake_inhibit_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_brake_inhibit_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_brake_inhibit_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_brake_inhibit_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_signal_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_brake_signal_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_signal_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_signal_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_brake_signal_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_brake_signal_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_brake_signal_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_brake_signal_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_brake_signal_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_brake_signal_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_brake_signal_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_brake_signal_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_brake_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_brake_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_brake_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_brake_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_brake_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_brake_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_brake_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_brake_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_brake_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_brake_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_brake_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_brake_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_brake_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_brake_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_BRAKEPERCT_DMI_Types_Pkg 
 ****************************************************************/
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_BRAKEPERCT_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_BRAKEPERCT_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_BRAKEPERCT_DMI_Types_Pkg_double_conversion_allowed();
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_BRAKEPERCT_DMI_Types_Pkg_long_conversion_allowed();
extern int M_BRAKEPERCT_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_BRAKEPERCT_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_BRAKEPERCT_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_BRAKEPERCT_DMI_Types_Pkg(void *pValue);
extern int release_M_BRAKEPERCT_DMI_Types_Pkg(void *pValue);
extern int copy_M_BRAKEPERCT_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_BRAKEPERCT_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_cab_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_cab_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_cab_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_cab_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_cab_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_cab_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_cab_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_cab_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_cab_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_cab_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_cab_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_cab_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_current_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_current_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_current_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_current_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_current_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_current_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_current_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_current_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_current_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_current_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_current_T_TIU_Types_Pkg(void *pValue);
extern int release_M_current_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_current_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_current_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_directioncontroller_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_directioncontroller_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_directioncontroller_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_directioncontroller_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_directioncontroller_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_directioncontroller_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_directioncontroller_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_directioncontroller_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_directioncontroller_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_directioncontroller_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_directioncontroller_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_directioncontroller_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_DUP 
 ****************************************************************/
extern int M_DUP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_DUP_string(const char *str, char **endptr);
extern int string_to_M_DUP(const char *str, void *pValue, char **endptr);
extern int is_M_DUP_double_conversion_allowed();
extern int M_DUP_to_double(const void *pValue, double *nValue);
extern int is_M_DUP_long_conversion_allowed();
extern int M_DUP_to_long(const void *pValue, long *nValue);
extern void compare_M_DUP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_DUP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_DUP(void *pValue);
extern int release_M_DUP(void *pValue);
extern int copy_M_DUP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_DUP_Utils;

/****************************************************************
 ** M_eddy_current_brake_inhibition_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(void *pValue);
extern int release_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_eddy_current_brake_inhibition_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_ERROR 
 ****************************************************************/
extern int M_ERROR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_ERROR_string(const char *str, char **endptr);
extern int string_to_M_ERROR(const char *str, void *pValue, char **endptr);
extern int is_M_ERROR_double_conversion_allowed();
extern int M_ERROR_to_double(const void *pValue, double *nValue);
extern int is_M_ERROR_long_conversion_allowed();
extern int M_ERROR_to_long(const void *pValue, long *nValue);
extern void compare_M_ERROR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_ERROR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_ERROR(void *pValue);
extern int release_M_ERROR(void *pValue);
extern int copy_M_ERROR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_ERROR_Utils;

/****************************************************************
 ** M_Isolation_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_Isolation_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_Isolation_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_Isolation_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_Isolation_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_Isolation_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_Isolation_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_Isolation_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_Isolation_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_Isolation_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_Isolation_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_Isolation_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_Isolation_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_Isolation_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** m_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int m_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_m_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_m_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_m_KvSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int m_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_m_KvSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int m_KvSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_m_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_m_KvSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_m_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_m_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_m_KvSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_m_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** M_LEVEL 
 ****************************************************************/
extern int M_LEVEL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LEVEL_string(const char *str, char **endptr);
extern int string_to_M_LEVEL(const char *str, void *pValue, char **endptr);
extern int is_M_LEVEL_double_conversion_allowed();
extern int M_LEVEL_to_double(const void *pValue, double *nValue);
extern int is_M_LEVEL_long_conversion_allowed();
extern int M_LEVEL_to_long(const void *pValue, long *nValue);
extern void compare_M_LEVEL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LEVEL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LEVEL(void *pValue);
extern int release_M_LEVEL(void *pValue);
extern int copy_M_LEVEL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LEVEL_Utils;

/****************************************************************
 ** M_LEVELTR 
 ****************************************************************/
extern int M_LEVELTR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LEVELTR_string(const char *str, char **endptr);
extern int string_to_M_LEVELTR(const char *str, void *pValue, char **endptr);
extern int is_M_LEVELTR_double_conversion_allowed();
extern int M_LEVELTR_to_double(const void *pValue, double *nValue);
extern int is_M_LEVELTR_long_conversion_allowed();
extern int M_LEVELTR_to_long(const void *pValue, long *nValue);
extern void compare_M_LEVELTR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LEVELTR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LEVELTR(void *pValue);
extern int release_M_LEVELTR(void *pValue);
extern int copy_M_LEVELTR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LEVELTR_Utils;

/****************************************************************
 ** M_LOADINGGAUGE 
 ****************************************************************/
extern int M_LOADINGGAUGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LOADINGGAUGE_string(const char *str, char **endptr);
extern int string_to_M_LOADINGGAUGE(const char *str, void *pValue, char **endptr);
extern int is_M_LOADINGGAUGE_double_conversion_allowed();
extern int M_LOADINGGAUGE_to_double(const void *pValue, double *nValue);
extern int is_M_LOADINGGAUGE_long_conversion_allowed();
extern int M_LOADINGGAUGE_to_long(const void *pValue, long *nValue);
extern void compare_M_LOADINGGAUGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LOADINGGAUGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LOADINGGAUGE(void *pValue);
extern int release_M_LOADINGGAUGE(void *pValue);
extern int copy_M_LOADINGGAUGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LOADINGGAUGE_Utils;

/****************************************************************
 ** M_LOC 
 ****************************************************************/
extern int M_LOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_LOC_string(const char *str, char **endptr);
extern int string_to_M_LOC(const char *str, void *pValue, char **endptr);
extern int is_M_LOC_double_conversion_allowed();
extern int M_LOC_to_double(const void *pValue, double *nValue);
extern int is_M_LOC_long_conversion_allowed();
extern int M_LOC_to_long(const void *pValue, long *nValue);
extern void compare_M_LOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_LOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_LOC(void *pValue);
extern int release_M_LOC(void *pValue);
extern int copy_M_LOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_LOC_Utils;

/****************************************************************
 ** M_mainpowerswitch_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_mainpowerswitch_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_mainpowerswitch_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_mainpowerswitch_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_mainpowerswitch_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_mainpowerswitch_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_mainpowerswitch_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_mainpowerswitch_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_mainpowerswitch_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_mainpowerswitch_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_mainpowerswitch_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_mainpowerswitch_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_MAMODE 
 ****************************************************************/
extern int M_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_MAMODE_string(const char *str, char **endptr);
extern int string_to_M_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_M_MAMODE_double_conversion_allowed();
extern int M_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_M_MAMODE_long_conversion_allowed();
extern int M_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_M_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_MAMODE(void *pValue);
extern int release_M_MAMODE(void *pValue);
extern int copy_M_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_MAMODE_Utils;

/****************************************************************
 ** M_MCOUNT 
 ****************************************************************/
extern int M_MCOUNT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_MCOUNT_string(const char *str, char **endptr);
extern int string_to_M_MCOUNT(const char *str, void *pValue, char **endptr);
extern int is_M_MCOUNT_double_conversion_allowed();
extern int M_MCOUNT_to_double(const void *pValue, double *nValue);
extern int is_M_MCOUNT_long_conversion_allowed();
extern int M_MCOUNT_to_long(const void *pValue, long *nValue);
extern void compare_M_MCOUNT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_MCOUNT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_MCOUNT(void *pValue);
extern int release_M_MCOUNT(void *pValue);
extern int copy_M_MCOUNT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_MCOUNT_Utils;

/****************************************************************
 ** M_MODE 
 ****************************************************************/
extern int M_MODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_MODE_string(const char *str, char **endptr);
extern int string_to_M_MODE(const char *str, void *pValue, char **endptr);
extern int is_M_MODE_double_conversion_allowed();
extern int M_MODE_to_double(const void *pValue, double *nValue);
extern int is_M_MODE_long_conversion_allowed();
extern int M_MODE_to_long(const void *pValue, long *nValue);
extern void compare_M_MODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_MODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_MODE(void *pValue);
extern int release_M_MODE(void *pValue);
extern int copy_M_MODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_MODE_Utils;

/****************************************************************
 ** M_nonleading_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_nonleading_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_nonleading_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_nonleading_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_nonleading_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_nonleading_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_nonleading_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_nonleading_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_nonleading_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_nonleading_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_nonleading_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_nonleading_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_NVAVADH 
 ****************************************************************/
extern int M_NVAVADH_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVAVADH_string(const char *str, char **endptr);
extern int string_to_M_NVAVADH(const char *str, void *pValue, char **endptr);
extern int is_M_NVAVADH_double_conversion_allowed();
extern int M_NVAVADH_to_double(const void *pValue, double *nValue);
extern int is_M_NVAVADH_long_conversion_allowed();
extern int M_NVAVADH_to_long(const void *pValue, long *nValue);
extern void compare_M_NVAVADH(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVAVADH_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVAVADH(void *pValue);
extern int release_M_NVAVADH(void *pValue);
extern int copy_M_NVAVADH(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVAVADH_Utils;

/****************************************************************
 ** M_NVCONTACT 
 ****************************************************************/
extern int M_NVCONTACT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_M_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_M_NVCONTACT_double_conversion_allowed();
extern int M_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int is_M_NVCONTACT_long_conversion_allowed();
extern int M_NVCONTACT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVCONTACT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVCONTACT(void *pValue);
extern int release_M_NVCONTACT(void *pValue);
extern int copy_M_NVCONTACT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVCONTACT_Utils;

/****************************************************************
 ** M_NVDERUN 
 ****************************************************************/
extern int M_NVDERUN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVDERUN_string(const char *str, char **endptr);
extern int string_to_M_NVDERUN(const char *str, void *pValue, char **endptr);
extern int is_M_NVDERUN_double_conversion_allowed();
extern int M_NVDERUN_to_double(const void *pValue, double *nValue);
extern int is_M_NVDERUN_long_conversion_allowed();
extern int M_NVDERUN_to_long(const void *pValue, long *nValue);
extern void compare_M_NVDERUN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVDERUN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVDERUN(void *pValue);
extern int release_M_NVDERUN(void *pValue);
extern int copy_M_NVDERUN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVDERUN_Utils;

/****************************************************************
 ** M_NVEBCL 
 ****************************************************************/
extern int M_NVEBCL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVEBCL_string(const char *str, char **endptr);
extern int string_to_M_NVEBCL(const char *str, void *pValue, char **endptr);
extern int is_M_NVEBCL_double_conversion_allowed();
extern int M_NVEBCL_to_double(const void *pValue, double *nValue);
extern int is_M_NVEBCL_long_conversion_allowed();
extern int M_NVEBCL_to_long(const void *pValue, long *nValue);
extern void compare_M_NVEBCL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVEBCL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVEBCL(void *pValue);
extern int release_M_NVEBCL(void *pValue);
extern int copy_M_NVEBCL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVEBCL_Utils;

/****************************************************************
 ** M_NVKRINT 
 ****************************************************************/
extern int M_NVKRINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVKRINT_string(const char *str, char **endptr);
extern int string_to_M_NVKRINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKRINT_double_conversion_allowed();
extern int M_NVKRINT_to_double(const void *pValue, double *nValue);
extern int is_M_NVKRINT_long_conversion_allowed();
extern int M_NVKRINT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVKRINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVKRINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVKRINT(void *pValue);
extern int release_M_NVKRINT(void *pValue);
extern int copy_M_NVKRINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVKRINT_Utils;

/****************************************************************
 ** M_NVKTINT 
 ****************************************************************/
extern int M_NVKTINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVKTINT_string(const char *str, char **endptr);
extern int string_to_M_NVKTINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKTINT_double_conversion_allowed();
extern int M_NVKTINT_to_double(const void *pValue, double *nValue);
extern int is_M_NVKTINT_long_conversion_allowed();
extern int M_NVKTINT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVKTINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVKTINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVKTINT(void *pValue);
extern int release_M_NVKTINT(void *pValue);
extern int copy_M_NVKTINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVKTINT_Utils;

/****************************************************************
 ** M_NVKVINT 
 ****************************************************************/
extern int M_NVKVINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_NVKVINT_string(const char *str, char **endptr);
extern int string_to_M_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_M_NVKVINT_double_conversion_allowed();
extern int M_NVKVINT_to_double(const void *pValue, double *nValue);
extern int is_M_NVKVINT_long_conversion_allowed();
extern int M_NVKVINT_to_long(const void *pValue, long *nValue);
extern void compare_M_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_NVKVINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_NVKVINT(void *pValue);
extern int release_M_NVKVINT(void *pValue);
extern int copy_M_NVKVINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_NVKVINT_Utils;

/****************************************************************
 ** M_pantograph_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_pantograph_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_pantograph_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_pantograph_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_pantograph_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_pantograph_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_pantograph_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_pantograph_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_pantograph_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_pantograph_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_pantograph_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_pantograph_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_pantograph_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_pantograph_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_passiveshunting_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_passiveshunting_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_passiveshunting_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_passiveshunting_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_passiveshunting_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_passiveshunting_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_passiveshunting_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_passiveshunting_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_passiveshunting_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_passiveshunting_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_passiveshunting_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_passiveshunting_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_POSITION 
 ****************************************************************/
extern int M_POSITION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_POSITION_string(const char *str, char **endptr);
extern int string_to_M_POSITION(const char *str, void *pValue, char **endptr);
extern int is_M_POSITION_double_conversion_allowed();
extern int M_POSITION_to_double(const void *pValue, double *nValue);
extern int is_M_POSITION_long_conversion_allowed();
extern int M_POSITION_to_long(const void *pValue, long *nValue);
extern void compare_M_POSITION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_POSITION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_POSITION(void *pValue);
extern int release_M_POSITION(void *pValue);
extern int copy_M_POSITION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_POSITION_Utils;

/****************************************************************
 ** M_sleeping_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_sleeping_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_sleeping_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_sleeping_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_sleeping_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_sleeping_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_sleeping_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_sleeping_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_sleeping_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_sleeping_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_sleeping_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_sleeping_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SUPERVISION_STATUS_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_DMI_Types_Pkg_double_conversion_allowed();
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_SUPERVISION_STATUS_DMI_Types_Pkg_long_conversion_allowed();
extern int M_SUPERVISION_STATUS_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_SUPERVISION_STATUS_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SUPERVISION_STATUS_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SUPERVISION_STATUS_DMI_Types_Pkg(void *pValue);
extern int release_M_SUPERVISION_STATUS_DMI_Types_Pkg(void *pValue);
extern int copy_M_SUPERVISION_STATUS_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_SUPERVISION_STATUS_INT_T_DATA 
 ****************************************************************/
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SUPERVISION_STATUS_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SUPERVISION_STATUS_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SUPERVISION_STATUS_INT_T_DATA_double_conversion_allowed();
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_M_SUPERVISION_STATUS_INT_T_DATA_long_conversion_allowed();
extern int M_SUPERVISION_STATUS_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_M_SUPERVISION_STATUS_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SUPERVISION_STATUS_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SUPERVISION_STATUS_INT_T_DATA(void *pValue);
extern int release_M_SUPERVISION_STATUS_INT_T_DATA(void *pValue);
extern int copy_M_SUPERVISION_STATUS_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SUPERVISION_STATUS_INT_T_DATA_Utils;

/****************************************************************
 ** M_SupervisionDisplay_INT_T_DATA 
 ****************************************************************/
extern int M_SupervisionDisplay_INT_T_DATA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SupervisionDisplay_INT_T_DATA_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_INT_T_DATA(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_INT_T_DATA_double_conversion_allowed();
extern int M_SupervisionDisplay_INT_T_DATA_to_double(const void *pValue, double *nValue);
extern int is_M_SupervisionDisplay_INT_T_DATA_long_conversion_allowed();
extern int M_SupervisionDisplay_INT_T_DATA_to_long(const void *pValue, long *nValue);
extern void compare_M_SupervisionDisplay_INT_T_DATA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SupervisionDisplay_INT_T_DATA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SupervisionDisplay_INT_T_DATA(void *pValue);
extern int release_M_SupervisionDisplay_INT_T_DATA(void *pValue);
extern int copy_M_SupervisionDisplay_INT_T_DATA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_INT_T_DATA_Utils;

/****************************************************************
 ** M_SupervisionDisplay_T_DMI_Types_Pkg 
 ****************************************************************/
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_SupervisionDisplay_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_SupervisionDisplay_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_SupervisionDisplay_T_DMI_Types_Pkg_double_conversion_allowed();
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_SupervisionDisplay_T_DMI_Types_Pkg_long_conversion_allowed();
extern int M_SupervisionDisplay_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_SupervisionDisplay_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_SupervisionDisplay_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_SupervisionDisplay_T_DMI_Types_Pkg(void *pValue);
extern int release_M_SupervisionDisplay_T_DMI_Types_Pkg(void *pValue);
extern int copy_M_SupervisionDisplay_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_SupervisionDisplay_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** M_TRACKCOND 
 ****************************************************************/
extern int M_TRACKCOND_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TRACKCOND_string(const char *str, char **endptr);
extern int string_to_M_TRACKCOND(const char *str, void *pValue, char **endptr);
extern int is_M_TRACKCOND_double_conversion_allowed();
extern int M_TRACKCOND_to_double(const void *pValue, double *nValue);
extern int is_M_TRACKCOND_long_conversion_allowed();
extern int M_TRACKCOND_to_long(const void *pValue, long *nValue);
extern void compare_M_TRACKCOND(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TRACKCOND_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TRACKCOND(void *pValue);
extern int release_M_TRACKCOND(void *pValue);
extern int copy_M_TRACKCOND(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TRACKCOND_Utils;

/****************************************************************
 ** M_trackcond_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trackcond_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_trackcond_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trackcond_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trackcond_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_trackcond_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_trackcond_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_trackcond_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_trackcond_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_trackcond_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int release_M_trackcond_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_trackcond_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_trackcond_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_traction_cutoff_command_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_traction_cutoff_command_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_cutoff_command_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_cutoff_command_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_traction_cutoff_command_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_traction_cutoff_command_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_traction_cutoff_command_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_traction_cutoff_command_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_traction_cutoff_command_T_TIU_Types_Pkg(void *pValue);
extern int release_M_traction_cutoff_command_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_traction_cutoff_command_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_traction_cutoff_command_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_traction_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_traction_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_traction_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_traction_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_traction_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_traction_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_traction_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_traction_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_traction_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_traction_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_traction_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_traction_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_train_data_entry_type_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_train_data_entry_type_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_train_data_entry_type_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_train_data_entry_type_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_train_data_entry_type_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_train_data_entry_type_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_train_data_entry_type_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_train_data_entry_type_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_train_data_entry_type_T_TIU_Types_Pkg(void *pValue);
extern int release_M_train_data_entry_type_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_train_data_entry_type_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_train_data_entry_type_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_trainintegrity_signal_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_trainintegrity_signal_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_trainintegrity_signal_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_trainintegrity_signal_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_trainintegrity_signal_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_trainintegrity_signal_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_trainintegrity_signal_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_trainintegrity_signal_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_trainintegrity_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int release_M_trainintegrity_signal_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_trainintegrity_signal_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_trainintegrity_signal_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_TrainTrack_compressed_packets_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrack_compressed_packets_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_compressed_packets_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_compressed_packets_T_TM_radio_messages_double_conversion_allowed();
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrack_compressed_packets_T_TM_radio_messages_long_conversion_allowed();
extern int M_TrainTrack_compressed_packets_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrack_compressed_packets_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrack_compressed_packets_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrack_compressed_packets_T_TM_radio_messages(void *pValue);
extern int release_M_TrainTrack_compressed_packets_T_TM_radio_messages(void *pValue);
extern int copy_M_TrainTrack_compressed_packets_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrack_compressed_packets_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_Message_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_Message_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrack_Message_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_Message_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_Message_T_TM_radio_messages_double_conversion_allowed();
extern int M_TrainTrack_Message_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrack_Message_T_TM_radio_messages_long_conversion_allowed();
extern int M_TrainTrack_Message_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrack_Message_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrack_Message_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrack_Message_T_TM_radio_messages(void *pValue);
extern int release_M_TrainTrack_Message_T_TM_radio_messages(void *pValue);
extern int copy_M_TrainTrack_Message_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrack_Message_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrack_MessageHd_T_TM_radio_messages 
 ****************************************************************/
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrack_MessageHd_T_TM_radio_messages_string(const char *str, char **endptr);
extern int string_to_M_TrainTrack_MessageHd_T_TM_radio_messages(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrack_MessageHd_T_TM_radio_messages_double_conversion_allowed();
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrack_MessageHd_T_TM_radio_messages_long_conversion_allowed();
extern int M_TrainTrack_MessageHd_T_TM_radio_messages_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrack_MessageHd_T_TM_radio_messages(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrack_MessageHd_T_TM_radio_messages_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrack_MessageHd_T_TM_radio_messages(void *pValue);
extern int release_M_TrainTrack_MessageHd_T_TM_radio_messages(void *pValue);
extern int copy_M_TrainTrack_MessageHd_T_TM_radio_messages(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrack_MessageHd_T_TM_radio_messages_Utils;

/****************************************************************
 ** M_TrainTrackMessage_buffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrackMessage_buffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessage_buffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessage_buffer_t_TM_lib_internal_double_conversion_allowed();
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrackMessage_buffer_t_TM_lib_internal_long_conversion_allowed();
extern int M_TrainTrackMessage_buffer_t_TM_lib_internal_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrackMessage_buffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrackMessage_buffer_t_TM_lib_internal_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrackMessage_buffer_t_TM_lib_internal(void *pValue);
extern int release_M_TrainTrackMessage_buffer_t_TM_lib_internal(void *pValue);
extern int copy_M_TrainTrackMessage_buffer_t_TM_lib_internal(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrackMessage_buffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** M_TrainTrackMessageBus_t_TM_TrainTrack_Bus 
 ****************************************************************/
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_double_conversion_allowed();
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_long_conversion_allowed();
extern int M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(void *pValue);
extern int release_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(void *pValue);
extern int copy_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrackMessageBus_t_TM_TrainTrack_Bus_Utils;

/****************************************************************
 ** M_TrainTrackRadioOutputBuffer_t_TM_lib_internal 
 ****************************************************************/
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_string(const char *str, char **endptr);
extern int string_to_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(const char *str, void *pValue, char **endptr);
extern int is_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_double_conversion_allowed();
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_double(const void *pValue, double *nValue);
extern int is_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_long_conversion_allowed();
extern int M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_to_long(const void *pValue, long *nValue);
extern void compare_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(void *pValue);
extern int release_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(void *pValue);
extern int copy_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_TrainTrackRadioOutputBuffer_t_TM_lib_internal_Utils;

/****************************************************************
 ** M_VERSION 
 ****************************************************************/
extern int M_VERSION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_VERSION_string(const char *str, char **endptr);
extern int string_to_M_VERSION(const char *str, void *pValue, char **endptr);
extern int is_M_VERSION_double_conversion_allowed();
extern int M_VERSION_to_double(const void *pValue, double *nValue);
extern int is_M_VERSION_long_conversion_allowed();
extern int M_VERSION_to_long(const void *pValue, long *nValue);
extern void compare_M_VERSION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_VERSION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_VERSION(void *pValue);
extern int release_M_VERSION(void *pValue);
extern int copy_M_VERSION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_VERSION_Utils;

/****************************************************************
 ** M_VOLTAGE 
 ****************************************************************/
extern int M_VOLTAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_VOLTAGE_string(const char *str, char **endptr);
extern int string_to_M_VOLTAGE(const char *str, void *pValue, char **endptr);
extern int is_M_VOLTAGE_double_conversion_allowed();
extern int M_VOLTAGE_to_double(const void *pValue, double *nValue);
extern int is_M_VOLTAGE_long_conversion_allowed();
extern int M_VOLTAGE_to_long(const void *pValue, long *nValue);
extern void compare_M_VOLTAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_VOLTAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_VOLTAGE(void *pValue);
extern int release_M_VOLTAGE(void *pValue);
extern int copy_M_VOLTAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_VOLTAGE_Utils;

/****************************************************************
 ** M_voltage_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_voltage_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_voltage_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_voltage_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_voltage_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_voltage_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_voltage_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_voltage_T_TIU_Types_Pkg(void *pValue);
extern int release_M_voltage_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_voltage_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_voltage_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** M_voltage_types_T_TIU_Types_Pkg 
 ****************************************************************/
extern int M_voltage_types_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_M_voltage_types_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_M_voltage_types_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_M_voltage_types_T_TIU_Types_Pkg_double_conversion_allowed();
extern int M_voltage_types_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_M_voltage_types_T_TIU_Types_Pkg_long_conversion_allowed();
extern int M_voltage_types_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_M_voltage_types_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_M_voltage_types_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_M_voltage_types_T_TIU_Types_Pkg(void *pValue);
extern int release_M_voltage_types_T_TIU_Types_Pkg(void *pValue);
extern int copy_M_voltage_types_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_M_voltage_types_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** MA_Level_t_TrackAtlasTypes 
 ****************************************************************/
extern int MA_Level_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MA_Level_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MA_Level_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MA_Level_t_TrackAtlasTypes_double_conversion_allowed();
extern int MA_Level_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MA_Level_t_TrackAtlasTypes_long_conversion_allowed();
extern int MA_Level_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MA_Level_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MA_Level_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MA_Level_t_TrackAtlasTypes(void *pValue);
extern int release_MA_Level_t_TrackAtlasTypes(void *pValue);
extern int copy_MA_Level_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MA_Level_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MA_section_real_T_TargetManagement_types 
 ****************************************************************/
extern int MA_section_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MA_section_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MA_section_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MA_section_real_T_TargetManagement_types_double_conversion_allowed();
extern int MA_section_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_MA_section_real_T_TargetManagement_types_long_conversion_allowed();
extern int MA_section_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_MA_section_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MA_section_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MA_section_real_T_TargetManagement_types(void *pValue);
extern int release_MA_section_real_T_TargetManagement_types(void *pValue);
extern int copy_MA_section_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MA_section_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** Message_EVC_to_Train_Interface_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(void *pValue);
extern int release_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(void *pValue);
extern int copy_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Message_EVC_to_Train_Interface_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Message_Train_Interface_to_EVC_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(void *pValue);
extern int release_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(void *pValue);
extern int copy_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Message_Train_Interface_to_EVC_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Metadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int Metadata_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Metadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Metadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Metadata_T_Common_Types_Pkg_double_conversion_allowed();
extern int Metadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Metadata_T_Common_Types_Pkg_long_conversion_allowed();
extern int Metadata_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Metadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Metadata_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Metadata_T_Common_Types_Pkg(void *pValue);
extern int release_Metadata_T_Common_Types_Pkg(void *pValue);
extern int copy_Metadata_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Metadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MetadataElement_T_Common_Types_Pkg 
 ****************************************************************/
extern int MetadataElement_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MetadataElement_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MetadataElement_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MetadataElement_T_Common_Types_Pkg_double_conversion_allowed();
extern int MetadataElement_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MetadataElement_T_Common_Types_Pkg_long_conversion_allowed();
extern int MetadataElement_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MetadataElement_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MetadataElement_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MetadataElement_T_Common_Types_Pkg(void *pValue);
extern int release_MetadataElement_T_Common_Types_Pkg(void *pValue);
extern int copy_MetadataElement_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MetadataElement_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** MetadataTruthtable_T1_CheckEuroradioMessage 
 ****************************************************************/
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MetadataTruthtable_T1_CheckEuroradioMessage_string(const char *str, char **endptr);
extern int string_to_MetadataTruthtable_T1_CheckEuroradioMessage(const char *str, void *pValue, char **endptr);
extern int is_MetadataTruthtable_T1_CheckEuroradioMessage_double_conversion_allowed();
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_double(const void *pValue, double *nValue);
extern int is_MetadataTruthtable_T1_CheckEuroradioMessage_long_conversion_allowed();
extern int MetadataTruthtable_T1_CheckEuroradioMessage_to_long(const void *pValue, long *nValue);
extern void compare_MetadataTruthtable_T1_CheckEuroradioMessage(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MetadataTruthtable_T1_CheckEuroradioMessage_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MetadataTruthtable_T1_CheckEuroradioMessage(void *pValue);
extern int release_MetadataTruthtable_T1_CheckEuroradioMessage(void *pValue);
extern int copy_MetadataTruthtable_T1_CheckEuroradioMessage(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MetadataTruthtable_T1_CheckEuroradioMessage_Utils;

/****************************************************************
 ** mobileConnectionCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnectionCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionCmd_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnectionCmd_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnectionCmd_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnectionCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnectionCmd_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnectionCmd_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnectionCmd_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnectionCmd_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnectionCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnectionContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionContext_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnectionContext_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnectionContext_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnectionContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnectionContext_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnectionContext_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnectionContext_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnectionContext_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnectionContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnectionStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnectionStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnectionStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnectionStatus_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnectionStatus_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnectionStatus_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnectionStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnectionStatus_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnectionStatus_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnectionStatus_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnectionStatus_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnectionStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileConnetionAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileConnetionAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileConnetionAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileConnetionAction_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileConnetionAction_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileConnetionAction_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileConnetionAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileConnetionAction_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileConnetionAction_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileConnetionAction_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileConnetionAction_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileConnetionAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileHealthStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileHealthStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileHealthStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileHealthStatus_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileHealthStatus_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileHealthStatus_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileHealthStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileHealthStatus_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileHealthStatus_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileHealthStatus_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileHealthStatus_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileHealthStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileHWConnectionStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileHWConnectionStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWConnectionStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWConnectionStatus_Type_MoRC_Pck_double_conversion_allowed();
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_mobileHWConnectionStatus_Type_MoRC_Pck_long_conversion_allowed();
extern int mobileHWConnectionStatus_Type_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_mobileHWConnectionStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileHWConnectionStatus_Type_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileHWConnectionStatus_Type_MoRC_Pck(void *pValue);
extern int release_mobileHWConnectionStatus_Type_MoRC_Pck(void *pValue);
extern int copy_mobileHWConnectionStatus_Type_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileHWConnectionStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileHWStatus_Type_MoRC_Pck 
 ****************************************************************/
extern int mobileHWStatus_Type_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileHWStatus_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_mobileHWStatus_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_mobileHWStatus_Type_MoRC_Pck_double_conversion_allowed();
extern int mobileHWStatus_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_mobileHWStatus_Type_MoRC_Pck_long_conversion_allowed();
extern int mobileHWStatus_Type_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_mobileHWStatus_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileHWStatus_Type_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileHWStatus_Type_MoRC_Pck(void *pValue);
extern int release_mobileHWStatus_Type_MoRC_Pck(void *pValue);
extern int copy_mobileHWStatus_Type_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileHWStatus_Type_MoRC_Pck_Utils;

/****************************************************************
 ** mobileRegistrationAction_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationAction_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationAction_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationAction_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationAction_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationAction_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationAction_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationAction_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationAction_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationAction_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationAction_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationAction_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationCmd_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationCmd_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationCmd_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationCmd_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationCmd_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationCmd_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationCmd_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationCmd_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationCmd_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationCmd_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationCmd_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationCmd_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationContext_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationContext_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationContext_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationContext_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationContext_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationContext_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationContext_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationContext_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationContext_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationContext_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationContext_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationContext_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** mobileRegistrationStatus_T_RCM_Types_Pkg 
 ****************************************************************/
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mobileRegistrationStatus_T_RCM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_mobileRegistrationStatus_T_RCM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_mobileRegistrationStatus_T_RCM_Types_Pkg_double_conversion_allowed();
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_mobileRegistrationStatus_T_RCM_Types_Pkg_long_conversion_allowed();
extern int mobileRegistrationStatus_T_RCM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_mobileRegistrationStatus_T_RCM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mobileRegistrationStatus_T_RCM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mobileRegistrationStatus_T_RCM_Types_Pkg(void *pValue);
extern int release_mobileRegistrationStatus_T_RCM_Types_Pkg(void *pValue);
extern int copy_mobileRegistrationStatus_T_RCM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mobileRegistrationStatus_T_RCM_Types_Pkg_Utils;

/****************************************************************
 ** Mode_control_and_train_status_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Mode_control_and_train_status_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Mode_control_and_train_status_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Mode_control_and_train_status_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Mode_control_and_train_status_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Mode_control_and_train_status_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Mode_control_and_train_status_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Mode_control_and_train_status_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Mode_control_and_train_status_T_TIU_Types_Pkg(void *pValue);
extern int release_Mode_control_and_train_status_T_TIU_Types_Pkg(void *pValue);
extern int copy_Mode_control_and_train_status_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Mode_control_and_train_status_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableActionKind_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ModeDecisionTableActionKind_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableActionKind_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableActionKind_DataDictionary_Pkg_double_conversion_allowed();
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ModeDecisionTableActionKind_DataDictionary_Pkg_long_conversion_allowed();
extern int ModeDecisionTableActionKind_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ModeDecisionTableActionKind_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ModeDecisionTableActionKind_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ModeDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int release_ModeDecisionTableActionKind_DataDictionary_Pkg(void *pValue);
extern int copy_ModeDecisionTableActionKind_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ModeDecisionTableActionKind_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeDecisionTableType_DataDictionary_Pkg 
 ****************************************************************/
extern int ModeDecisionTableType_DataDictionary_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ModeDecisionTableType_DataDictionary_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeDecisionTableType_DataDictionary_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeDecisionTableType_DataDictionary_Pkg_double_conversion_allowed();
extern int ModeDecisionTableType_DataDictionary_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ModeDecisionTableType_DataDictionary_Pkg_long_conversion_allowed();
extern int ModeDecisionTableType_DataDictionary_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ModeDecisionTableType_DataDictionary_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ModeDecisionTableType_DataDictionary_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ModeDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int release_ModeDecisionTableType_DataDictionary_Pkg(void *pValue);
extern int copy_ModeDecisionTableType_DataDictionary_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ModeDecisionTableType_DataDictionary_Pkg_Utils;

/****************************************************************
 ** ModeLevel2PositionReport_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ModeLevel2PositionReport_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** morc_configData_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morc_configData_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_morc_configData_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morc_configData_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morc_configData_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int morc_configData_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_morc_configData_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int morc_configData_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_morc_configData_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_morc_configData_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_morc_configData_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_morc_configData_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_morc_configData_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_morc_configData_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** morcStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int morcStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_morcStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_morcStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_morcStatus_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int morcStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_morcStatus_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int morcStatus_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_morcStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_morcStatus_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_morcStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_morcStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_morcStatus_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_morcStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** MovementAuthority_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthority_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MovementAuthority_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthority_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthority_t_TrackAtlasTypes_double_conversion_allowed();
extern int MovementAuthority_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MovementAuthority_t_TrackAtlasTypes_long_conversion_allowed();
extern int MovementAuthority_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MovementAuthority_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MovementAuthority_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MovementAuthority_t_TrackAtlasTypes(void *pValue);
extern int release_MovementAuthority_t_TrackAtlasTypes(void *pValue);
extern int copy_MovementAuthority_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MovementAuthority_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** movementAuthorityForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_movementAuthorityForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_movementAuthorityForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_movementAuthorityForDMI_T_DMI_Types_Pkg_double_conversion_allowed();
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_movementAuthorityForDMI_T_DMI_Types_Pkg_long_conversion_allowed();
extern int movementAuthorityForDMI_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_movementAuthorityForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_movementAuthorityForDMI_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_movementAuthorityForDMI_T_DMI_Types_Pkg(void *pValue);
extern int release_movementAuthorityForDMI_T_DMI_Types_Pkg(void *pValue);
extern int copy_movementAuthorityForDMI_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_movementAuthorityForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** MovementAuthoritySectionlist_t_TrackAtlasTypes 
 ****************************************************************/
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MovementAuthoritySectionlist_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MovementAuthoritySectionlist_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MovementAuthoritySectionlist_t_TrackAtlasTypes_double_conversion_allowed();
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MovementAuthoritySectionlist_t_TrackAtlasTypes_long_conversion_allowed();
extern int MovementAuthoritySectionlist_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MovementAuthoritySectionlist_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MovementAuthoritySectionlist_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MovementAuthoritySectionlist_t_TrackAtlasTypes(void *pValue);
extern int release_MovementAuthoritySectionlist_t_TrackAtlasTypes(void *pValue);
extern int copy_MovementAuthoritySectionlist_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MovementAuthoritySectionlist_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MRSP_internal_section_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_section_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_internal_section_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_section_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_section_T_TargetManagement_types_double_conversion_allowed();
extern int MRSP_internal_section_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_MRSP_internal_section_T_TargetManagement_types_long_conversion_allowed();
extern int MRSP_internal_section_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_internal_section_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_internal_section_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_internal_section_T_TargetManagement_types(void *pValue);
extern int release_MRSP_internal_section_T_TargetManagement_types(void *pValue);
extern int copy_MRSP_internal_section_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_internal_section_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_internal_T_TargetManagement_types 
 ****************************************************************/
extern int MRSP_internal_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_internal_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_MRSP_internal_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_MRSP_internal_T_TargetManagement_types_double_conversion_allowed();
extern int MRSP_internal_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_MRSP_internal_T_TargetManagement_types_long_conversion_allowed();
extern int MRSP_internal_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_internal_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_internal_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_internal_T_TargetManagement_types(void *pValue);
extern int release_MRSP_internal_T_TargetManagement_types(void *pValue);
extern int copy_MRSP_internal_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_internal_T_TargetManagement_types_Utils;

/****************************************************************
 ** MRSP_Profile_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_Profile_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_Profile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_Profile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_Profile_t_TrackAtlasTypes_double_conversion_allowed();
extern int MRSP_Profile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MRSP_Profile_t_TrackAtlasTypes_long_conversion_allowed();
extern int MRSP_Profile_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_Profile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_Profile_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_Profile_t_TrackAtlasTypes(void *pValue);
extern int release_MRSP_Profile_t_TrackAtlasTypes(void *pValue);
extern int copy_MRSP_Profile_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_Profile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MRSP_reduction_acc_TA_Export 
 ****************************************************************/
extern int MRSP_reduction_acc_TA_Export_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_reduction_acc_TA_Export_string(const char *str, char **endptr);
extern int string_to_MRSP_reduction_acc_TA_Export(const char *str, void *pValue, char **endptr);
extern int is_MRSP_reduction_acc_TA_Export_double_conversion_allowed();
extern int MRSP_reduction_acc_TA_Export_to_double(const void *pValue, double *nValue);
extern int is_MRSP_reduction_acc_TA_Export_long_conversion_allowed();
extern int MRSP_reduction_acc_TA_Export_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_reduction_acc_TA_Export(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_reduction_acc_TA_Export_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_reduction_acc_TA_Export(void *pValue);
extern int release_MRSP_reduction_acc_TA_Export(void *pValue);
extern int copy_MRSP_reduction_acc_TA_Export(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_reduction_acc_TA_Export_Utils;

/****************************************************************
 ** MRSP_section_t_TrackAtlasTypes 
 ****************************************************************/
extern int MRSP_section_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MRSP_section_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_MRSP_section_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_MRSP_section_t_TrackAtlasTypes_double_conversion_allowed();
extern int MRSP_section_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_MRSP_section_t_TrackAtlasTypes_long_conversion_allowed();
extern int MRSP_section_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_MRSP_section_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MRSP_section_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MRSP_section_t_TrackAtlasTypes(void *pValue);
extern int release_MRSP_section_t_TrackAtlasTypes(void *pValue);
extern int copy_MRSP_section_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MRSP_section_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** MSG_Errors_T_Common_Types_Pkg 
 ****************************************************************/
extern int MSG_Errors_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MSG_Errors_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MSG_Errors_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MSG_Errors_T_Common_Types_Pkg_double_conversion_allowed();
extern int MSG_Errors_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MSG_Errors_T_Common_Types_Pkg_long_conversion_allowed();
extern int MSG_Errors_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MSG_Errors_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MSG_Errors_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MSG_Errors_T_Common_Types_Pkg(void *pValue);
extern int release_MSG_Errors_T_Common_Types_Pkg(void *pValue);
extern int copy_MSG_Errors_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MSG_Errors_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** msgFromTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_msgFromTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgFromTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgFromTrack_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_msgFromTrack_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int msgFromTrack_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_msgFromTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_msgFromTrack_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_msgFromTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_msgFromTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_msgFromTrack_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_msgFromTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** MsgSource_T_Common_Types_Pkg 
 ****************************************************************/
extern int MsgSource_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MsgSource_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_MsgSource_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MsgSource_T_Common_Types_Pkg_double_conversion_allowed();
extern int MsgSource_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MsgSource_T_Common_Types_Pkg_long_conversion_allowed();
extern int MsgSource_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MsgSource_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MsgSource_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MsgSource_T_Common_Types_Pkg(void *pValue);
extern int release_MsgSource_T_Common_Types_Pkg(void *pValue);
extern int copy_MsgSource_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MsgSource_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** msgToTrack_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_msgToTrack_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrack_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrack_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_msgToTrack_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int msgToTrack_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_msgToTrack_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_msgToTrack_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_msgToTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_msgToTrack_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_msgToTrack_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_msgToTrack_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** msgToTrackTriggers_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int msgToTrackTriggers_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_msgToTrackTriggers_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_msgToTrackTriggers_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** mv_Map_t_SDMConversionModelPkg 
 ****************************************************************/
extern int mv_Map_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_mv_Map_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_mv_Map_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_mv_Map_t_SDMConversionModelPkg_double_conversion_allowed();
extern int mv_Map_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_mv_Map_t_SDMConversionModelPkg_long_conversion_allowed();
extern int mv_Map_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_mv_Map_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_mv_Map_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_mv_Map_t_SDMConversionModelPkg(void *pValue);
extern int release_mv_Map_t_SDMConversionModelPkg(void *pValue);
extern int copy_mv_Map_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_mv_Map_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** MyArray_SDM_Commands_Pkg 
 ****************************************************************/
extern int MyArray_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_MyArray_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_MyArray_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_MyArray_SDM_Commands_Pkg_double_conversion_allowed();
extern int MyArray_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_MyArray_SDM_Commands_Pkg_long_conversion_allowed();
extern int MyArray_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_MyArray_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_MyArray_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_MyArray_SDM_Commands_Pkg(void *pValue);
extern int release_MyArray_SDM_Commands_Pkg(void *pValue);
extern int copy_MyArray_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_MyArray_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** N_AXLE 
 ****************************************************************/
extern int N_AXLE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_AXLE_string(const char *str, char **endptr);
extern int string_to_N_AXLE(const char *str, void *pValue, char **endptr);
extern int is_N_AXLE_double_conversion_allowed();
extern int N_AXLE_to_double(const void *pValue, double *nValue);
extern int is_N_AXLE_long_conversion_allowed();
extern int N_AXLE_to_long(const void *pValue, long *nValue);
extern void compare_N_AXLE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_AXLE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_AXLE(void *pValue);
extern int release_N_AXLE(void *pValue);
extern int copy_N_AXLE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_AXLE_Utils;

/****************************************************************
 ** N_ITER 
 ****************************************************************/
extern int N_ITER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_ITER_string(const char *str, char **endptr);
extern int string_to_N_ITER(const char *str, void *pValue, char **endptr);
extern int is_N_ITER_double_conversion_allowed();
extern int N_ITER_to_double(const void *pValue, double *nValue);
extern int is_N_ITER_long_conversion_allowed();
extern int N_ITER_to_long(const void *pValue, long *nValue);
extern void compare_N_ITER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_ITER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_ITER(void *pValue);
extern int release_N_ITER(void *pValue);
extern int copy_N_ITER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_ITER_Utils;

/****************************************************************
 ** N_PIG 
 ****************************************************************/
extern int N_PIG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_PIG_string(const char *str, char **endptr);
extern int string_to_N_PIG(const char *str, void *pValue, char **endptr);
extern int is_N_PIG_double_conversion_allowed();
extern int N_PIG_to_double(const void *pValue, double *nValue);
extern int is_N_PIG_long_conversion_allowed();
extern int N_PIG_to_long(const void *pValue, long *nValue);
extern void compare_N_PIG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_PIG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_PIG(void *pValue);
extern int release_N_PIG(void *pValue);
extern int copy_N_PIG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_PIG_Utils;

/****************************************************************
 ** N_TOTAL 
 ****************************************************************/
extern int N_TOTAL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_N_TOTAL_string(const char *str, char **endptr);
extern int string_to_N_TOTAL(const char *str, void *pValue, char **endptr);
extern int is_N_TOTAL_double_conversion_allowed();
extern int N_TOTAL_to_double(const void *pValue, double *nValue);
extern int is_N_TOTAL_long_conversion_allowed();
extern int N_TOTAL_to_long(const void *pValue, long *nValue);
extern void compare_N_TOTAL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_N_TOTAL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_N_TOTAL(void *pValue);
extern int release_N_TOTAL(void *pValue);
extern int copy_N_TOTAL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_N_TOTAL_Utils;

/****************************************************************
 ** nationValuesForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nationValuesForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nationValuesForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nationValuesForDMI_T_DMI_Types_Pkg_double_conversion_allowed();
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nationValuesForDMI_T_DMI_Types_Pkg_long_conversion_allowed();
extern int nationValuesForDMI_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nationValuesForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nationValuesForDMI_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nationValuesForDMI_T_DMI_Types_Pkg(void *pValue);
extern int release_nationValuesForDMI_T_DMI_Types_Pkg(void *pValue);
extern int copy_nationValuesForDMI_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nationValuesForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** NC_CDDIFF 
 ****************************************************************/
extern int NC_CDDIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_CDDIFF_string(const char *str, char **endptr);
extern int string_to_NC_CDDIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_CDDIFF_double_conversion_allowed();
extern int NC_CDDIFF_to_double(const void *pValue, double *nValue);
extern int is_NC_CDDIFF_long_conversion_allowed();
extern int NC_CDDIFF_to_long(const void *pValue, long *nValue);
extern void compare_NC_CDDIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_CDDIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_CDDIFF(void *pValue);
extern int release_NC_CDDIFF(void *pValue);
extern int copy_NC_CDDIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_CDDIFF_Utils;

/****************************************************************
 ** NC_CDTRAIN 
 ****************************************************************/
extern int NC_CDTRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_CDTRAIN_string(const char *str, char **endptr);
extern int string_to_NC_CDTRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_CDTRAIN_double_conversion_allowed();
extern int NC_CDTRAIN_to_double(const void *pValue, double *nValue);
extern int is_NC_CDTRAIN_long_conversion_allowed();
extern int NC_CDTRAIN_to_long(const void *pValue, long *nValue);
extern void compare_NC_CDTRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_CDTRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_CDTRAIN(void *pValue);
extern int release_NC_CDTRAIN(void *pValue);
extern int copy_NC_CDTRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_CDTRAIN_Utils;

/****************************************************************
 ** NC_DIFF 
 ****************************************************************/
extern int NC_DIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_DIFF_string(const char *str, char **endptr);
extern int string_to_NC_DIFF(const char *str, void *pValue, char **endptr);
extern int is_NC_DIFF_double_conversion_allowed();
extern int NC_DIFF_to_double(const void *pValue, double *nValue);
extern int is_NC_DIFF_long_conversion_allowed();
extern int NC_DIFF_to_long(const void *pValue, long *nValue);
extern void compare_NC_DIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_DIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_DIFF(void *pValue);
extern int release_NC_DIFF(void *pValue);
extern int copy_NC_DIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_DIFF_Utils;

/****************************************************************
 ** NC_TRAIN 
 ****************************************************************/
extern int NC_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NC_TRAIN_string(const char *str, char **endptr);
extern int string_to_NC_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_NC_TRAIN_double_conversion_allowed();
extern int NC_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_NC_TRAIN_long_conversion_allowed();
extern int NC_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_NC_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NC_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NC_TRAIN(void *pValue);
extern int release_NC_TRAIN(void *pValue);
extern int copy_NC_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NC_TRAIN_Utils;

/****************************************************************
 ** NID_BG 
 ****************************************************************/
extern int NID_BG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_BG_string(const char *str, char **endptr);
extern int string_to_NID_BG(const char *str, void *pValue, char **endptr);
extern int is_NID_BG_double_conversion_allowed();
extern int NID_BG_to_double(const void *pValue, double *nValue);
extern int is_NID_BG_long_conversion_allowed();
extern int NID_BG_to_long(const void *pValue, long *nValue);
extern void compare_NID_BG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_BG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_BG(void *pValue);
extern int release_NID_BG(void *pValue);
extern int copy_NID_BG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_BG_Utils;

/****************************************************************
 ** NID_C 
 ****************************************************************/
extern int NID_C_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_C_string(const char *str, char **endptr);
extern int string_to_NID_C(const char *str, void *pValue, char **endptr);
extern int is_NID_C_double_conversion_allowed();
extern int NID_C_to_double(const void *pValue, double *nValue);
extern int is_NID_C_long_conversion_allowed();
extern int NID_C_to_long(const void *pValue, long *nValue);
extern void compare_NID_C(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_C_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_C(void *pValue);
extern int release_NID_C(void *pValue);
extern int copy_NID_C(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_C_Utils;

/****************************************************************
 ** NID_CTRACTION 
 ****************************************************************/
extern int NID_CTRACTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_CTRACTION_string(const char *str, char **endptr);
extern int string_to_NID_CTRACTION(const char *str, void *pValue, char **endptr);
extern int is_NID_CTRACTION_double_conversion_allowed();
extern int NID_CTRACTION_to_double(const void *pValue, double *nValue);
extern int is_NID_CTRACTION_long_conversion_allowed();
extern int NID_CTRACTION_to_long(const void *pValue, long *nValue);
extern void compare_NID_CTRACTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_CTRACTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_CTRACTION(void *pValue);
extern int release_NID_CTRACTION(void *pValue);
extern int copy_NID_CTRACTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_CTRACTION_Utils;

/****************************************************************
 ** NID_ctraction_T_TIU_Types_Pkg 
 ****************************************************************/
extern int NID_ctraction_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_ctraction_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ctraction_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ctraction_T_TIU_Types_Pkg_double_conversion_allowed();
extern int NID_ctraction_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_NID_ctraction_T_TIU_Types_Pkg_long_conversion_allowed();
extern int NID_ctraction_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_NID_ctraction_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_ctraction_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_ctraction_T_TIU_Types_Pkg(void *pValue);
extern int release_NID_ctraction_T_TIU_Types_Pkg(void *pValue);
extern int copy_NID_ctraction_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_ctraction_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** NID_EM 
 ****************************************************************/
extern int NID_EM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_string(const char *str, char **endptr);
extern int string_to_NID_EM(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_double_conversion_allowed();
extern int NID_EM_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_long_conversion_allowed();
extern int NID_EM_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM(void *pValue);
extern int release_NID_EM(void *pValue);
extern int copy_NID_EM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_Utils;

/****************************************************************
 ** NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_double_conversion_allowed();
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_long_conversion_allowed();
extern int NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int release_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int copy_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_STORE_Acc_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_double_conversion_allowed();
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_long_conversion_allowed();
extern int NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int release_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int copy_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_Store_Item_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store 
 ****************************************************************/
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_string(const char *str, char **endptr);
extern int string_to_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(const char *str, void *pValue, char **endptr);
extern int is_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_double_conversion_allowed();
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_double(const void *pValue, double *nValue);
extern int is_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_long_conversion_allowed();
extern int NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_to_long(const void *pValue, long *nValue);
extern void compare_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int release_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(void *pValue);
extern int copy_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_EM_Store_T_TA_EmergencyStop_NID_EM_Store_Utils;

/****************************************************************
 ** NID_ENGINE 
 ****************************************************************/
extern int NID_ENGINE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_ENGINE_string(const char *str, char **endptr);
extern int string_to_NID_ENGINE(const char *str, void *pValue, char **endptr);
extern int is_NID_ENGINE_double_conversion_allowed();
extern int NID_ENGINE_to_double(const void *pValue, double *nValue);
extern int is_NID_ENGINE_long_conversion_allowed();
extern int NID_ENGINE_to_long(const void *pValue, long *nValue);
extern void compare_NID_ENGINE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_ENGINE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_ENGINE(void *pValue);
extern int release_NID_ENGINE(void *pValue);
extern int copy_NID_ENGINE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_ENGINE_Utils;

/****************************************************************
 ** NID_ERRORBG_BG_Types_Pkg 
 ****************************************************************/
extern int NID_ERRORBG_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_ERRORBG_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_ERRORBG_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_ERRORBG_BG_Types_Pkg_double_conversion_allowed();
extern int NID_ERRORBG_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_NID_ERRORBG_BG_Types_Pkg_long_conversion_allowed();
extern int NID_ERRORBG_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_NID_ERRORBG_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_ERRORBG_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_ERRORBG_BG_Types_Pkg(void *pValue);
extern int release_NID_ERRORBG_BG_Types_Pkg(void *pValue);
extern int copy_NID_ERRORBG_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_ERRORBG_BG_Types_Pkg_Utils;

/****************************************************************
 ** NID_LRBG 
 ****************************************************************/
extern int NID_LRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_LRBG_string(const char *str, char **endptr);
extern int string_to_NID_LRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LRBG_double_conversion_allowed();
extern int NID_LRBG_to_double(const void *pValue, double *nValue);
extern int is_NID_LRBG_long_conversion_allowed();
extern int NID_LRBG_to_long(const void *pValue, long *nValue);
extern void compare_NID_LRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_LRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_LRBG(void *pValue);
extern int release_NID_LRBG(void *pValue);
extern int copy_NID_LRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_LRBG_Utils;

/****************************************************************
 ** NID_LTRBG 
 ****************************************************************/
extern int NID_LTRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_LTRBG_string(const char *str, char **endptr);
extern int string_to_NID_LTRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_LTRBG_double_conversion_allowed();
extern int NID_LTRBG_to_double(const void *pValue, double *nValue);
extern int is_NID_LTRBG_long_conversion_allowed();
extern int NID_LTRBG_to_long(const void *pValue, long *nValue);
extern void compare_NID_LTRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_LTRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_LTRBG(void *pValue);
extern int release_NID_LTRBG(void *pValue);
extern int copy_NID_LTRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_LTRBG_Utils;

/****************************************************************
 ** NID_MESSAGE 
 ****************************************************************/
extern int NID_MESSAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_MESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_MESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_MESSAGE_double_conversion_allowed();
extern int NID_MESSAGE_to_double(const void *pValue, double *nValue);
extern int is_NID_MESSAGE_long_conversion_allowed();
extern int NID_MESSAGE_to_long(const void *pValue, long *nValue);
extern void compare_NID_MESSAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_MESSAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_MESSAGE(void *pValue);
extern int release_NID_MESSAGE(void *pValue);
extern int copy_NID_MESSAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_MESSAGE_Utils;

/****************************************************************
 ** NID_MN 
 ****************************************************************/
extern int NID_MN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_MN_string(const char *str, char **endptr);
extern int string_to_NID_MN(const char *str, void *pValue, char **endptr);
extern int is_NID_MN_double_conversion_allowed();
extern int NID_MN_to_double(const void *pValue, double *nValue);
extern int is_NID_MN_long_conversion_allowed();
extern int NID_MN_to_long(const void *pValue, long *nValue);
extern void compare_NID_MN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_MN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_MN(void *pValue);
extern int release_NID_MN(void *pValue);
extern int copy_NID_MN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_MN_Utils;

/****************************************************************
 ** NID_NTC 
 ****************************************************************/
extern int NID_NTC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_NTC_string(const char *str, char **endptr);
extern int string_to_NID_NTC(const char *str, void *pValue, char **endptr);
extern int is_NID_NTC_double_conversion_allowed();
extern int NID_NTC_to_double(const void *pValue, double *nValue);
extern int is_NID_NTC_long_conversion_allowed();
extern int NID_NTC_to_long(const void *pValue, long *nValue);
extern void compare_NID_NTC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_NTC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_NTC(void *pValue);
extern int release_NID_NTC(void *pValue);
extern int copy_NID_NTC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_NTC_Utils;

/****************************************************************
 ** NID_OPERATIONAL 
 ****************************************************************/
extern int NID_OPERATIONAL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_OPERATIONAL_string(const char *str, char **endptr);
extern int string_to_NID_OPERATIONAL(const char *str, void *pValue, char **endptr);
extern int is_NID_OPERATIONAL_double_conversion_allowed();
extern int NID_OPERATIONAL_to_double(const void *pValue, double *nValue);
extern int is_NID_OPERATIONAL_long_conversion_allowed();
extern int NID_OPERATIONAL_to_long(const void *pValue, long *nValue);
extern void compare_NID_OPERATIONAL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_OPERATIONAL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_OPERATIONAL(void *pValue);
extern int release_NID_OPERATIONAL(void *pValue);
extern int copy_NID_OPERATIONAL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_OPERATIONAL_Utils;

/****************************************************************
 ** NID_PACKET 
 ****************************************************************/
extern int NID_PACKET_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_PACKET_string(const char *str, char **endptr);
extern int string_to_NID_PACKET(const char *str, void *pValue, char **endptr);
extern int is_NID_PACKET_double_conversion_allowed();
extern int NID_PACKET_to_double(const void *pValue, double *nValue);
extern int is_NID_PACKET_long_conversion_allowed();
extern int NID_PACKET_to_long(const void *pValue, long *nValue);
extern void compare_NID_PACKET(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_PACKET_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_PACKET(void *pValue);
extern int release_NID_PACKET(void *pValue);
extern int copy_NID_PACKET(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_PACKET_Utils;

/****************************************************************
 ** nid_packet_meta_TM 
 ****************************************************************/
extern int nid_packet_meta_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nid_packet_meta_TM_string(const char *str, char **endptr);
extern int string_to_nid_packet_meta_TM(const char *str, void *pValue, char **endptr);
extern int is_nid_packet_meta_TM_double_conversion_allowed();
extern int nid_packet_meta_TM_to_double(const void *pValue, double *nValue);
extern int is_nid_packet_meta_TM_long_conversion_allowed();
extern int nid_packet_meta_TM_to_long(const void *pValue, long *nValue);
extern void compare_nid_packet_meta_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nid_packet_meta_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nid_packet_meta_TM(void *pValue);
extern int release_nid_packet_meta_TM(void *pValue);
extern int copy_nid_packet_meta_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nid_packet_meta_TM_Utils;

/****************************************************************
 ** NID_PRVLRBG 
 ****************************************************************/
extern int NID_PRVLRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_PRVLRBG_string(const char *str, char **endptr);
extern int string_to_NID_PRVLRBG(const char *str, void *pValue, char **endptr);
extern int is_NID_PRVLRBG_double_conversion_allowed();
extern int NID_PRVLRBG_to_double(const void *pValue, double *nValue);
extern int is_NID_PRVLRBG_long_conversion_allowed();
extern int NID_PRVLRBG_to_long(const void *pValue, long *nValue);
extern void compare_NID_PRVLRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_PRVLRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_PRVLRBG(void *pValue);
extern int release_NID_PRVLRBG(void *pValue);
extern int copy_NID_PRVLRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_PRVLRBG_Utils;

/****************************************************************
 ** NID_RADIO 
 ****************************************************************/
extern int NID_RADIO_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_RADIO_string(const char *str, char **endptr);
extern int string_to_NID_RADIO(const char *str, void *pValue, char **endptr);
extern int is_NID_RADIO_double_conversion_allowed();
extern int NID_RADIO_to_double(const void *pValue, double *nValue);
extern int is_NID_RADIO_long_conversion_allowed();
extern int NID_RADIO_to_long(const void *pValue, long *nValue);
extern void compare_NID_RADIO(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_RADIO_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_RADIO(void *pValue);
extern int release_NID_RADIO(void *pValue);
extern int copy_NID_RADIO(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_RADIO_Utils;

/****************************************************************
 ** NID_RBC 
 ****************************************************************/
extern int NID_RBC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_RBC_string(const char *str, char **endptr);
extern int string_to_NID_RBC(const char *str, void *pValue, char **endptr);
extern int is_NID_RBC_double_conversion_allowed();
extern int NID_RBC_to_double(const void *pValue, double *nValue);
extern int is_NID_RBC_long_conversion_allowed();
extern int NID_RBC_to_long(const void *pValue, long *nValue);
extern void compare_NID_RBC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_RBC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_RBC(void *pValue);
extern int release_NID_RBC(void *pValue);
extern int copy_NID_RBC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_RBC_Utils;

/****************************************************************
 ** NID_STM_DMI_Types_Pkg 
 ****************************************************************/
extern int NID_STM_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_STM_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_NID_STM_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_NID_STM_DMI_Types_Pkg_double_conversion_allowed();
extern int NID_STM_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_NID_STM_DMI_Types_Pkg_long_conversion_allowed();
extern int NID_STM_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_NID_STM_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_STM_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_STM_DMI_Types_Pkg(void *pValue);
extern int release_NID_STM_DMI_Types_Pkg(void *pValue);
extern int copy_NID_STM_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_STM_DMI_Types_Pkg_Utils;

/****************************************************************
 ** NID_TEXTMESSAGE 
 ****************************************************************/
extern int NID_TEXTMESSAGE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_TEXTMESSAGE_string(const char *str, char **endptr);
extern int string_to_NID_TEXTMESSAGE(const char *str, void *pValue, char **endptr);
extern int is_NID_TEXTMESSAGE_double_conversion_allowed();
extern int NID_TEXTMESSAGE_to_double(const void *pValue, double *nValue);
extern int is_NID_TEXTMESSAGE_long_conversion_allowed();
extern int NID_TEXTMESSAGE_to_long(const void *pValue, long *nValue);
extern void compare_NID_TEXTMESSAGE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_TEXTMESSAGE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_TEXTMESSAGE(void *pValue);
extern int release_NID_TEXTMESSAGE(void *pValue);
extern int copy_NID_TEXTMESSAGE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_TEXTMESSAGE_Utils;

/****************************************************************
 ** NID_TSR 
 ****************************************************************/
extern int NID_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_TSR_string(const char *str, char **endptr);
extern int string_to_NID_TSR(const char *str, void *pValue, char **endptr);
extern int is_NID_TSR_double_conversion_allowed();
extern int NID_TSR_to_double(const void *pValue, double *nValue);
extern int is_NID_TSR_long_conversion_allowed();
extern int NID_TSR_to_long(const void *pValue, long *nValue);
extern void compare_NID_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_TSR(void *pValue);
extern int release_NID_TSR(void *pValue);
extern int copy_NID_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_TSR_Utils;

/****************************************************************
 ** NID_XUSER 
 ****************************************************************/
extern int NID_XUSER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_NID_XUSER_string(const char *str, char **endptr);
extern int string_to_NID_XUSER(const char *str, void *pValue, char **endptr);
extern int is_NID_XUSER_double_conversion_allowed();
extern int NID_XUSER_to_double(const void *pValue, double *nValue);
extern int is_NID_XUSER_long_conversion_allowed();
extern int NID_XUSER_to_long(const void *pValue, long *nValue);
extern void compare_NID_XUSER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_NID_XUSER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_NID_XUSER(void *pValue);
extern int release_NID_XUSER(void *pValue);
extern int copy_NID_XUSER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_NID_XUSER_Utils;

/****************************************************************
 ** nidC_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidC_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nidC_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidC_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidC_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nidC_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nidC_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nidC_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nidC_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nidC_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nidC_T_Packet_Types_Pkg(void *pValue);
extern int release_nidC_T_Packet_Types_Pkg(void *pValue);
extern int copy_nidC_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nidC_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nidCArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nidCArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nidCArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nidCArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nidCArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nidCArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nidCArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nidCArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nidCArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nidCArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nidCArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nidCArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nidCArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nidCArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nothing_to_resume_profile_follow_T_TIU_Types_Pkg 
 ****************************************************************/
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_double_conversion_allowed();
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_long_conversion_allowed();
extern int nothing_to_resume_profile_follow_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(void *pValue);
extern int release_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(void *pValue);
extern int copy_nothing_to_resume_profile_follow_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nothing_to_resume_profile_follow_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** nvkrint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrint_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkrint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrint_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkrint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkrint_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkrint_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkrint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkrint_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkrint_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkrint_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkrint_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkrint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkrintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkrintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkrintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkrintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkrintArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkrintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkrintArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkrintArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkrintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkrintArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkrintArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkrintArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkrintArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkrintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvint_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvint_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvint_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvint_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvint_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvint_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvint_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvint_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvint_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvint_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvint_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvint_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvint_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvint_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvintArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvintArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvintArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvintArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvintArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvintArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvintArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvintArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvintArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvintArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintset_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintset_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvintset_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintset_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintset_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvintset_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvintset_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvintset_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvintset_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvintset_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvintset_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvintset_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvintset_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvintset_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** nvkvintsetArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_nvkvintsetArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_nvkvintsetArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_nvkvintsetArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_nvkvintsetArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int nvkvintsetArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_nvkvintsetArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_nvkvintsetArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_nvkvintsetArray_T_Packet_Types_Pkg(void *pValue);
extern int release_nvkvintsetArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_nvkvintsetArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_nvkvintsetArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** obuEventsAndPhases_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_obuEventsAndPhases_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_obuEventsAndPhases_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_obuEventsAndPhases_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_obuEventsAndPhases_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int obuEventsAndPhases_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_obuEventsAndPhases_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_obuEventsAndPhases_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_obuEventsAndPhases_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_obuEventsAndPhases_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_obuEventsAndPhases_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_obuEventsAndPhases_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** odometry_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odometry_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_odometry_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odometry_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odometry_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int odometry_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_odometry_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int odometry_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_odometry_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_odometry_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_odometry_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_odometry_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_odometry_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_odometry_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OdometryLocations_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_OdometryLocations_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometryLocations_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometryLocations_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_OdometryLocations_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int OdometryLocations_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_OdometryLocations_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_OdometryLocations_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_OdometryLocations_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_OdometryLocations_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_OdometryLocations_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_OdometryLocations_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** OdometrySpeeds_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_OdometrySpeeds_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_OdometrySpeeds_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_OdometrySpeeds_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_OdometrySpeeds_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int OdometrySpeeds_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_OdometrySpeeds_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_OdometrySpeeds_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_OdometrySpeeds_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_OdometrySpeeds_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_OdometrySpeeds_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_OdometrySpeeds_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionDirection_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_odoMotionDirection_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionDirection_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionDirection_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_odoMotionDirection_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int odoMotionDirection_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_odoMotionDirection_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_odoMotionDirection_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_odoMotionDirection_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_odoMotionDirection_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_odoMotionDirection_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_odoMotionDirection_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** odoMotionState_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_odoMotionState_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_odoMotionState_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_odoMotionState_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_odoMotionState_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int odoMotionState_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_odoMotionState_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_odoMotionState_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_odoMotionState_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_odoMotionState_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_odoMotionState_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_odoMotionState_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** outPackets_T_Common_Types_Pkg 
 ****************************************************************/
extern int outPackets_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_outPackets_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_outPackets_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_outPackets_T_Common_Types_Pkg_double_conversion_allowed();
extern int outPackets_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_outPackets_T_Common_Types_Pkg_long_conversion_allowed();
extern int outPackets_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_outPackets_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_outPackets_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_outPackets_T_Common_Types_Pkg(void *pValue);
extern int release_outPackets_T_Common_Types_Pkg(void *pValue);
extern int copy_outPackets_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_outPackets_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** P000_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P000_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TM_TrainToTrack_double_conversion_allowed();
extern int P000_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P000_TM_TrainToTrack_long_conversion_allowed();
extern int P000_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P000_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P000_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P000_TM_TrainToTrack(void *pValue);
extern int release_P000_TM_TrainToTrack(void *pValue);
extern int copy_P000_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P000_TM_TrainToTrack_Utils;

/****************************************************************
 ** P000_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P000_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P000_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P000_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P000_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P000_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P000_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P000_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P000_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P000_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P000_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P000_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P000_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P000_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P001_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TM_TrainToTrack_double_conversion_allowed();
extern int P001_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P001_TM_TrainToTrack_long_conversion_allowed();
extern int P001_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P001_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P001_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P001_TM_TrainToTrack(void *pValue);
extern int release_P001_TM_TrainToTrack(void *pValue);
extern int copy_P001_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P001_TM_TrainToTrack_Utils;

/****************************************************************
 ** P001_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P001_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P001_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P001_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P001_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P001_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P001_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P001_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P001_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P001_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P001_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P001_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P001_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P001_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_int_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_nid_radio_list_int_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_int_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_int_t_TM_TrainToTrack_double_conversion_allowed();
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_nid_radio_list_int_t_TM_TrainToTrack_long_conversion_allowed();
extern int P003_nid_radio_list_int_t_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_nid_radio_list_int_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_nid_radio_list_int_t_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_nid_radio_list_int_t_TM_TrainToTrack(void *pValue);
extern int release_P003_nid_radio_list_int_t_TM_TrainToTrack(void *pValue);
extern int copy_P003_nid_radio_list_int_t_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_nid_radio_list_int_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_nid_radio_list_t_TM_TrainToTrack 
 ****************************************************************/
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_nid_radio_list_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_nid_radio_list_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_nid_radio_list_t_TM_TrainToTrack_double_conversion_allowed();
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_nid_radio_list_t_TM_TrainToTrack_long_conversion_allowed();
extern int P003_nid_radio_list_t_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_nid_radio_list_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_nid_radio_list_t_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_nid_radio_list_t_TM_TrainToTrack(void *pValue);
extern int release_P003_nid_radio_list_t_TM_TrainToTrack(void *pValue);
extern int copy_P003_nid_radio_list_t_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_nid_radio_list_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_OBU_k_m_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_m_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_m_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_m_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_m_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_m_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_m_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_m_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_m_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_m_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_m_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_m_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_m_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_m_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_m_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_m_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_m_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_m_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_m_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_m_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_m_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_m_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_m_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_k_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_k_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_k_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_k_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_k_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_k_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_k_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_k_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_k_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_k_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_k_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_k_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_k_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_k_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_l_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_l_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_l_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_l_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_l_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_l_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_l_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_l_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_l_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_l_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_l_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_l_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_l_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_l_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_l_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_l_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_l_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_l_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_l_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_l_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_l_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_l_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_l_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_l_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_n_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_n_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_n_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_n_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_n_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_n_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_n_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_n_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_n_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_n_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_n_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_n_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_n_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_n_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_n_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_n_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_n_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_n_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_n_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_n_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_n_sectionlist_enum_T_TM(void *pValue);
extern int release_P003_OBU_n_sectionlist_enum_T_TM(void *pValue);
extern int copy_P003_OBU_n_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_n_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_nid_c_section_enum_T_TM 
 ****************************************************************/
extern int P003_OBU_nid_c_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_nid_c_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_nid_c_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_nid_c_section_enum_T_TM_double_conversion_allowed();
extern int P003_OBU_nid_c_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_nid_c_section_enum_T_TM_long_conversion_allowed();
extern int P003_OBU_nid_c_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_nid_c_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_nid_c_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_nid_c_section_enum_T_TM(void *pValue);
extern int release_P003_OBU_nid_c_section_enum_T_TM(void *pValue);
extern int copy_P003_OBU_nid_c_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_nid_c_section_enum_T_TM_Utils;

/****************************************************************
 ** P003_OBU_T_TM 
 ****************************************************************/
extern int P003_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P003_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P003_OBU_T_TM_double_conversion_allowed();
extern int P003_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P003_OBU_T_TM_long_conversion_allowed();
extern int P003_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P003_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_OBU_T_TM(void *pValue);
extern int release_P003_OBU_T_TM(void *pValue);
extern int copy_P003_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_OBU_T_TM_Utils;

/****************************************************************
 ** P003_permanent_data_T_TM_baseline2 
 ****************************************************************/
extern int P003_permanent_data_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_permanent_data_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003_permanent_data_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003_permanent_data_T_TM_baseline2_double_conversion_allowed();
extern int P003_permanent_data_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003_permanent_data_T_TM_baseline2_long_conversion_allowed();
extern int P003_permanent_data_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003_permanent_data_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_permanent_data_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_permanent_data_T_TM_baseline2(void *pValue);
extern int release_P003_permanent_data_T_TM_baseline2(void *pValue);
extern int copy_P003_permanent_data_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_permanent_data_T_TM_baseline2_Utils;

/****************************************************************
 ** P003_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TM_TrainToTrack_double_conversion_allowed();
extern int P003_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_TM_TrainToTrack_long_conversion_allowed();
extern int P003_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_TM_TrainToTrack(void *pValue);
extern int release_P003_TM_TrainToTrack(void *pValue);
extern int copy_P003_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P003_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P003_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P003_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P003_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P003_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P003_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P003_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P003_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P003_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P003V1_OBU_sectionlist_int_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_OBU_sectionlist_int_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_sectionlist_int_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_sectionlist_int_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_OBU_sectionlist_int_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_OBU_sectionlist_int_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_OBU_sectionlist_int_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_OBU_sectionlist_int_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_OBU_sectionlist_int_T_TM_baseline2(void *pValue);
extern int release_P003V1_OBU_sectionlist_int_T_TM_baseline2(void *pValue);
extern int copy_P003V1_OBU_sectionlist_int_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_OBU_sectionlist_int_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_OBU_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_OBU_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_OBU_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_OBU_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_OBU_T_TM_baseline2(void *pValue);
extern int release_P003V1_OBU_T_TM_baseline2(void *pValue);
extern int copy_P003V1_OBU_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_section_enum_T_TM_baseline2(void *pValue);
extern int release_P003V1_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P003V1_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P003V1_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P003V1_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P003V1_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P003V1_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P003V1_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P003V1_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P003V1_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P003V1_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P003V1_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P003V1_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P003V1_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P003V1_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P004_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P004_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TM_TrainToTrack_double_conversion_allowed();
extern int P004_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P004_TM_TrainToTrack_long_conversion_allowed();
extern int P004_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P004_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P004_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P004_TM_TrainToTrack(void *pValue);
extern int release_P004_TM_TrainToTrack(void *pValue);
extern int copy_P004_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P004_TM_TrainToTrack_Utils;

/****************************************************************
 ** P004_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P004_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P004_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P004_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P004_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P004_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P004_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P004_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P004_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P004_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P004_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P004_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P004_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P004_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P005_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P005_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P005_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P005_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P005_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P005_OBU_T_TM 
 ****************************************************************/
extern int P005_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_OBU_T_TM_double_conversion_allowed();
extern int P005_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_OBU_T_TM_long_conversion_allowed();
extern int P005_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_OBU_T_TM(void *pValue);
extern int release_P005_OBU_T_TM(void *pValue);
extern int copy_P005_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_OBU_T_TM_Utils;

/****************************************************************
 ** P005_section_enum_T_TM 
 ****************************************************************/
extern int P005_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_section_enum_T_TM_double_conversion_allowed();
extern int P005_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_section_enum_T_TM_long_conversion_allowed();
extern int P005_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_section_enum_T_TM(void *pValue);
extern int release_P005_section_enum_T_TM(void *pValue);
extern int copy_P005_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_section_enum_T_TM_Utils;

/****************************************************************
 ** P005_sections_array_flat_T_TM 
 ****************************************************************/
extern int P005_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P005_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P005_sections_array_flat_T_TM_double_conversion_allowed();
extern int P005_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P005_sections_array_flat_T_TM_long_conversion_allowed();
extern int P005_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P005_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_sections_array_flat_T_TM(void *pValue);
extern int release_P005_sections_array_flat_T_TM(void *pValue);
extern int copy_P005_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P005_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TM_TrainToTrack_double_conversion_allowed();
extern int P005_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P005_TM_TrainToTrack_long_conversion_allowed();
extern int P005_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P005_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_TM_TrainToTrack(void *pValue);
extern int release_P005_TM_TrainToTrack(void *pValue);
extern int copy_P005_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_TM_TrainToTrack_Utils;

/****************************************************************
 ** P005_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P005_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P005_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P005_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P005_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P005_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P005_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P005_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P005_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P005_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P005_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P005_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P005_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P005_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P009_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TM_TrainToTrack_double_conversion_allowed();
extern int P009_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P009_TM_TrainToTrack_long_conversion_allowed();
extern int P009_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P009_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P009_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P009_TM_TrainToTrack(void *pValue);
extern int release_P009_TM_TrainToTrack(void *pValue);
extern int copy_P009_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P009_TM_TrainToTrack_Utils;

/****************************************************************
 ** P009_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P009_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P009_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P009_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P009_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P009_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P009_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P009_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P009_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P009_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P009_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P009_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P009_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P009_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_ntc_list_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_array_T_TM_TrainToTrack_double_conversion_allowed();
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_ntc_list_array_T_TM_TrainToTrack_long_conversion_allowed();
extern int P011_ntc_list_array_T_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_ntc_list_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_ntc_list_array_T_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_ntc_list_array_T_TM_TrainToTrack(void *pValue);
extern int release_P011_ntc_list_array_T_TM_TrainToTrack(void *pValue);
extern int copy_P011_ntc_list_array_T_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_ntc_list_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_ntc_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_ntc_list_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_ntc_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_ntc_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_ntc_list_TM_TrainToTrack_double_conversion_allowed();
extern int P011_ntc_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_ntc_list_TM_TrainToTrack_long_conversion_allowed();
extern int P011_ntc_list_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_ntc_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_ntc_list_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_ntc_list_TM_TrainToTrack(void *pValue);
extern int release_P011_ntc_list_TM_TrainToTrack(void *pValue);
extern int copy_P011_ntc_list_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_ntc_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TM_TrainToTrack_double_conversion_allowed();
extern int P011_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_TM_TrainToTrack_long_conversion_allowed();
extern int P011_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_TM_TrainToTrack(void *pValue);
extern int release_P011_TM_TrainToTrack(void *pValue);
extern int copy_P011_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P011_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P011_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P011_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P011_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P011_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_list_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_list_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_list_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_list_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_list_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_list_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_list_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_list_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_list_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_list_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_list_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_list_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_list_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_list_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_section_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_section_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_section_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_section_array_T_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_section_array_T_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_section_array_T_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_section_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_section_array_T_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_section_array_T_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_section_array_T_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_section_array_T_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_section_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sectionlist_array_T_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_sectionlist_array_T_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sectionlist_array_T_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sectionlist_array_T_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_sectionlist_array_T_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_sectionlist_array_T_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_sectionlist_array_T_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_sectionlist_array_T_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_sectionlist_array_T_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_sectionlist_array_T_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_sectionlist_array_T_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_sectionlist_array_T_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_sections_array_flat_t_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_sections_array_flat_t_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_sections_array_flat_t_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_sections_array_flat_t_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_sections_array_flat_t_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_sections_array_flat_t_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_sections_array_flat_t_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_sections_array_flat_t_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_sections_array_flat_t_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_sections_array_flat_t_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_sections_array_flat_t_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_sections_array_flat_t_TM_TrainToTrack_Utils;

/****************************************************************
 ** P011_voltage_TM_TrainToTrack 
 ****************************************************************/
extern int P011_voltage_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P011_voltage_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P011_voltage_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P011_voltage_TM_TrainToTrack_double_conversion_allowed();
extern int P011_voltage_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P011_voltage_TM_TrainToTrack_long_conversion_allowed();
extern int P011_voltage_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P011_voltage_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P011_voltage_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P011_voltage_TM_TrainToTrack(void *pValue);
extern int release_P011_voltage_TM_TrainToTrack(void *pValue);
extern int copy_P011_voltage_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P011_voltage_TM_TrainToTrack_Utils;

/****************************************************************
 ** P012_OBU_T_TM 
 ****************************************************************/
extern int P012_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P012_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_OBU_T_TM_double_conversion_allowed();
extern int P012_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P012_OBU_T_TM_long_conversion_allowed();
extern int P012_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P012_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P012_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P012_OBU_T_TM(void *pValue);
extern int release_P012_OBU_T_TM(void *pValue);
extern int copy_P012_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P012_OBU_T_TM_Utils;

/****************************************************************
 ** P012_section_enum_T_TM 
 ****************************************************************/
extern int P012_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P012_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_section_enum_T_TM_double_conversion_allowed();
extern int P012_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P012_section_enum_T_TM_long_conversion_allowed();
extern int P012_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P012_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P012_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P012_section_enum_T_TM(void *pValue);
extern int release_P012_section_enum_T_TM(void *pValue);
extern int copy_P012_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P012_section_enum_T_TM_Utils;

/****************************************************************
 ** P012_sections_array_flat_T_TM 
 ****************************************************************/
extern int P012_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P012_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P012_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P012_sections_array_flat_T_TM_double_conversion_allowed();
extern int P012_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P012_sections_array_flat_T_TM_long_conversion_allowed();
extern int P012_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P012_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P012_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P012_sections_array_flat_T_TM(void *pValue);
extern int release_P012_sections_array_flat_T_TM(void *pValue);
extern int copy_P012_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P012_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P015_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P015_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P015_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P015_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P015_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P015_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P015_OBU_T_TM 
 ****************************************************************/
extern int P015_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_OBU_T_TM_double_conversion_allowed();
extern int P015_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_OBU_T_TM_long_conversion_allowed();
extern int P015_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_OBU_T_TM(void *pValue);
extern int release_P015_OBU_T_TM(void *pValue);
extern int copy_P015_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_OBU_T_TM_Utils;

/****************************************************************
 ** P015_section_enum_T_TM 
 ****************************************************************/
extern int P015_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_section_enum_T_TM_double_conversion_allowed();
extern int P015_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_section_enum_T_TM_long_conversion_allowed();
extern int P015_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_section_enum_T_TM(void *pValue);
extern int release_P015_section_enum_T_TM(void *pValue);
extern int copy_P015_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_section_enum_T_TM_Utils;

/****************************************************************
 ** P015_sections_array_flat_T_TM 
 ****************************************************************/
extern int P015_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P015_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P015_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P015_sections_array_flat_T_TM_double_conversion_allowed();
extern int P015_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P015_sections_array_flat_T_TM_long_conversion_allowed();
extern int P015_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P015_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P015_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P015_sections_array_flat_T_TM(void *pValue);
extern int release_P015_sections_array_flat_T_TM(void *pValue);
extern int copy_P015_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P015_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P021_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P021_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P021_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P021_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P021_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P021_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P021_OBU_T_TM 
 ****************************************************************/
extern int P021_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_OBU_T_TM_double_conversion_allowed();
extern int P021_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_OBU_T_TM_long_conversion_allowed();
extern int P021_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_OBU_T_TM(void *pValue);
extern int release_P021_OBU_T_TM(void *pValue);
extern int copy_P021_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_OBU_T_TM_Utils;

/****************************************************************
 ** P021_section_enum_T_TM 
 ****************************************************************/
extern int P021_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_section_enum_T_TM_double_conversion_allowed();
extern int P021_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_section_enum_T_TM_long_conversion_allowed();
extern int P021_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_section_enum_T_TM(void *pValue);
extern int release_P021_section_enum_T_TM(void *pValue);
extern int copy_P021_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_section_enum_T_TM_Utils;

/****************************************************************
 ** P021_sections_array_flat_T_TM 
 ****************************************************************/
extern int P021_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P021_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P021_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P021_sections_array_flat_T_TM_double_conversion_allowed();
extern int P021_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P021_sections_array_flat_T_TM_long_conversion_allowed();
extern int P021_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P021_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P021_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P021_sections_array_flat_T_TM(void *pValue);
extern int release_P021_sections_array_flat_T_TM(void *pValue);
extern int copy_P021_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P021_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P027V1_OBU_body_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_body_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_body_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_body_enum_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_body_enum_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_body_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_body_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_body_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_body_enum_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_body_enum_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_body_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_body_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_OBU_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_OBU_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_OBU_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_OBU_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_OBU_T_TM_baseline2(void *pValue);
extern int release_P027V1_OBU_T_TM_baseline2(void *pValue);
extern int copy_P027V1_OBU_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_section_enum_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_section_enum_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_section_enum_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_section_enum_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_section_enum_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_section_enum_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_section_enum_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_section_enum_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_section_enum_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_section_enum_T_TM_baseline2(void *pValue);
extern int release_P027V1_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P027V1_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P027V1_sections_array_flat_qdiff_T_TM_baseline2 
 ****************************************************************/
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P027V1_sections_array_flat_qdiff_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P027V1_sections_array_flat_qdiff_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P027V1_sections_array_flat_qdiff_T_TM_baseline2_double_conversion_allowed();
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P027V1_sections_array_flat_qdiff_T_TM_baseline2_long_conversion_allowed();
extern int P027V1_sections_array_flat_qdiff_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P027V1_sections_array_flat_qdiff_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P027V1_sections_array_flat_qdiff_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P027V1_sections_array_flat_qdiff_T_TM_baseline2(void *pValue);
extern int release_P027V1_sections_array_flat_qdiff_T_TM_baseline2(void *pValue);
extern int copy_P027V1_sections_array_flat_qdiff_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P027V1_sections_array_flat_qdiff_T_TM_baseline2_Utils;

/****************************************************************
 ** P041_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P041_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P041_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P041_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P041_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P041_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P041_OBU_T_TM 
 ****************************************************************/
extern int P041_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_OBU_T_TM_double_conversion_allowed();
extern int P041_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_OBU_T_TM_long_conversion_allowed();
extern int P041_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_OBU_T_TM(void *pValue);
extern int release_P041_OBU_T_TM(void *pValue);
extern int copy_P041_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_OBU_T_TM_Utils;

/****************************************************************
 ** P041_section_enum_T_TM 
 ****************************************************************/
extern int P041_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_section_enum_T_TM_double_conversion_allowed();
extern int P041_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_section_enum_T_TM_long_conversion_allowed();
extern int P041_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_section_enum_T_TM(void *pValue);
extern int release_P041_section_enum_T_TM(void *pValue);
extern int copy_P041_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_section_enum_T_TM_Utils;

/****************************************************************
 ** P041_sections_array_flat_T_TM 
 ****************************************************************/
extern int P041_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P041_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P041_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P041_sections_array_flat_T_TM_double_conversion_allowed();
extern int P041_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P041_sections_array_flat_T_TM_long_conversion_allowed();
extern int P041_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P041_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P041_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P041_sections_array_flat_T_TM(void *pValue);
extern int release_P041_sections_array_flat_T_TM(void *pValue);
extern int copy_P041_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P041_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P042_trackside_int_T_TM 
 ****************************************************************/
extern int P042_trackside_int_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P042_trackside_int_T_TM_string(const char *str, char **endptr);
extern int string_to_P042_trackside_int_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P042_trackside_int_T_TM_double_conversion_allowed();
extern int P042_trackside_int_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P042_trackside_int_T_TM_long_conversion_allowed();
extern int P042_trackside_int_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P042_trackside_int_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P042_trackside_int_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P042_trackside_int_T_TM(void *pValue);
extern int release_P042_trackside_int_T_TM(void *pValue);
extern int copy_P042_trackside_int_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P042_trackside_int_T_TM_Utils;

/****************************************************************
 ** P044_other_data_TM_TrainToTrack 
 ****************************************************************/
extern int P044_other_data_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P044_other_data_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_other_data_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_other_data_TM_TrainToTrack_double_conversion_allowed();
extern int P044_other_data_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P044_other_data_TM_TrainToTrack_long_conversion_allowed();
extern int P044_other_data_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P044_other_data_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P044_other_data_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P044_other_data_TM_TrainToTrack(void *pValue);
extern int release_P044_other_data_TM_TrainToTrack(void *pValue);
extern int copy_P044_other_data_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P044_other_data_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P044_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TM_TrainToTrack_double_conversion_allowed();
extern int P044_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P044_TM_TrainToTrack_long_conversion_allowed();
extern int P044_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P044_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P044_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P044_TM_TrainToTrack(void *pValue);
extern int release_P044_TM_TrainToTrack(void *pValue);
extern int copy_P044_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P044_TM_TrainToTrack_Utils;

/****************************************************************
 ** P044_TrainTrack_int_TM_TrainToTrack 
 ****************************************************************/
extern int P044_TrainTrack_int_TM_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P044_TrainTrack_int_TM_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_P044_TrainTrack_int_TM_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_P044_TrainTrack_int_TM_TrainToTrack_double_conversion_allowed();
extern int P044_TrainTrack_int_TM_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_P044_TrainTrack_int_TM_TrainToTrack_long_conversion_allowed();
extern int P044_TrainTrack_int_TM_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_P044_TrainTrack_int_TM_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P044_TrainTrack_int_TM_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P044_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int release_P044_TrainTrack_int_TM_TrainToTrack(void *pValue);
extern int copy_P044_TrainTrack_int_TM_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P044_TrainTrack_int_TM_TrainToTrack_Utils;

/****************************************************************
 ** P046_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P046_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P046_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P046_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P046_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P046_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P046_OBU_T_TM 
 ****************************************************************/
extern int P046_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_OBU_T_TM_double_conversion_allowed();
extern int P046_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_OBU_T_TM_long_conversion_allowed();
extern int P046_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_OBU_T_TM(void *pValue);
extern int release_P046_OBU_T_TM(void *pValue);
extern int copy_P046_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_OBU_T_TM_Utils;

/****************************************************************
 ** P046_section_enum_T_TM 
 ****************************************************************/
extern int P046_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_section_enum_T_TM_double_conversion_allowed();
extern int P046_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_section_enum_T_TM_long_conversion_allowed();
extern int P046_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_section_enum_T_TM(void *pValue);
extern int release_P046_section_enum_T_TM(void *pValue);
extern int copy_P046_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_section_enum_T_TM_Utils;

/****************************************************************
 ** P046_sections_array_flat_T_TM 
 ****************************************************************/
extern int P046_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P046_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P046_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P046_sections_array_flat_T_TM_double_conversion_allowed();
extern int P046_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P046_sections_array_flat_T_TM_long_conversion_allowed();
extern int P046_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P046_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P046_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P046_sections_array_flat_T_TM(void *pValue);
extern int release_P046_sections_array_flat_T_TM(void *pValue);
extern int copy_P046_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P046_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P058_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P058_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P058_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P058_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P058_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P058_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P058_OBU_T_TM 
 ****************************************************************/
extern int P058_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_OBU_T_TM_double_conversion_allowed();
extern int P058_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_OBU_T_TM_long_conversion_allowed();
extern int P058_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_OBU_T_TM(void *pValue);
extern int release_P058_OBU_T_TM(void *pValue);
extern int copy_P058_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_OBU_T_TM_Utils;

/****************************************************************
 ** P058_section_enum_T_TM 
 ****************************************************************/
extern int P058_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_section_enum_T_TM_double_conversion_allowed();
extern int P058_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_section_enum_T_TM_long_conversion_allowed();
extern int P058_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_section_enum_T_TM(void *pValue);
extern int release_P058_section_enum_T_TM(void *pValue);
extern int copy_P058_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_section_enum_T_TM_Utils;

/****************************************************************
 ** P058_sections_array_flat_T_TM 
 ****************************************************************/
extern int P058_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P058_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P058_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P058_sections_array_flat_T_TM_double_conversion_allowed();
extern int P058_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P058_sections_array_flat_T_TM_long_conversion_allowed();
extern int P058_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P058_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P058_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P058_sections_array_flat_T_TM(void *pValue);
extern int release_P058_sections_array_flat_T_TM(void *pValue);
extern int copy_P058_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P058_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P065_OBU_T_TM 
 ****************************************************************/
extern int P065_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P065_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P065_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P065_OBU_T_TM_double_conversion_allowed();
extern int P065_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P065_OBU_T_TM_long_conversion_allowed();
extern int P065_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P065_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P065_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P065_OBU_T_TM(void *pValue);
extern int release_P065_OBU_T_TM(void *pValue);
extern int copy_P065_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P065_OBU_T_TM_Utils;

/****************************************************************
 ** P080_OBU_sectionlist_enum_T_TM 
 ****************************************************************/
extern int P080_OBU_sectionlist_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_OBU_sectionlist_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_OBU_sectionlist_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_OBU_sectionlist_enum_T_TM_double_conversion_allowed();
extern int P080_OBU_sectionlist_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_OBU_sectionlist_enum_T_TM_long_conversion_allowed();
extern int P080_OBU_sectionlist_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_OBU_sectionlist_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_OBU_sectionlist_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_OBU_sectionlist_enum_T_TM(void *pValue);
extern int release_P080_OBU_sectionlist_enum_T_TM(void *pValue);
extern int copy_P080_OBU_sectionlist_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_OBU_sectionlist_enum_T_TM_Utils;

/****************************************************************
 ** P080_OBU_T_TM 
 ****************************************************************/
extern int P080_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_OBU_T_TM_double_conversion_allowed();
extern int P080_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_OBU_T_TM_long_conversion_allowed();
extern int P080_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_OBU_T_TM(void *pValue);
extern int release_P080_OBU_T_TM(void *pValue);
extern int copy_P080_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_OBU_T_TM_Utils;

/****************************************************************
 ** P080_section_enum_T_TM 
 ****************************************************************/
extern int P080_section_enum_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_section_enum_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_section_enum_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_section_enum_T_TM_double_conversion_allowed();
extern int P080_section_enum_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_section_enum_T_TM_long_conversion_allowed();
extern int P080_section_enum_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_section_enum_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_section_enum_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_section_enum_T_TM(void *pValue);
extern int release_P080_section_enum_T_TM(void *pValue);
extern int copy_P080_section_enum_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_section_enum_T_TM_Utils;

/****************************************************************
 ** P080_sections_array_flat_T_TM 
 ****************************************************************/
extern int P080_sections_array_flat_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P080_sections_array_flat_T_TM_string(const char *str, char **endptr);
extern int string_to_P080_sections_array_flat_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P080_sections_array_flat_T_TM_double_conversion_allowed();
extern int P080_sections_array_flat_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P080_sections_array_flat_T_TM_long_conversion_allowed();
extern int P080_sections_array_flat_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P080_sections_array_flat_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P080_sections_array_flat_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P080_sections_array_flat_T_TM(void *pValue);
extern int release_P080_sections_array_flat_T_TM(void *pValue);
extern int copy_P080_sections_array_flat_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P080_sections_array_flat_T_TM_Utils;

/****************************************************************
 ** P12_Level1MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P12_Level1MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P12_Level1MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P12_Level1MovementAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P12_Level1MovementAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P12_Level1MovementAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P12_Level1MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P12_Level1MovementAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P12_Level1MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P12_Level1MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P12_Level1MovementAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P12_Level1MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P131_OBU_T_TM 
 ****************************************************************/
extern int P131_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P131_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P131_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P131_OBU_T_TM_double_conversion_allowed();
extern int P131_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P131_OBU_T_TM_long_conversion_allowed();
extern int P131_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P131_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P131_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P131_OBU_T_TM(void *pValue);
extern int release_P131_OBU_T_TM(void *pValue);
extern int copy_P131_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P131_OBU_T_TM_Utils;

/****************************************************************
 ** p131_q_rbcTransitionOrder_T_Handover_Pkg 
 ****************************************************************/
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_p131_q_rbcTransitionOrder_T_Handover_Pkg_string(const char *str, char **endptr);
extern int string_to_p131_q_rbcTransitionOrder_T_Handover_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p131_q_rbcTransitionOrder_T_Handover_Pkg_double_conversion_allowed();
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_double(const void *pValue, double *nValue);
extern int is_p131_q_rbcTransitionOrder_T_Handover_Pkg_long_conversion_allowed();
extern int p131_q_rbcTransitionOrder_T_Handover_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_p131_q_rbcTransitionOrder_T_Handover_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_p131_q_rbcTransitionOrder_T_Handover_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_p131_q_rbcTransitionOrder_T_Handover_Pkg(void *pValue);
extern int release_p131_q_rbcTransitionOrder_T_Handover_Pkg(void *pValue);
extern int copy_p131_q_rbcTransitionOrder_T_Handover_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_p131_q_rbcTransitionOrder_T_Handover_Pkg_Utils;

/****************************************************************
 ** P131_RBCTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P131_RBCTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P131_RBCTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P131_RBCTransitionOrder_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P131_RBCTransitionOrder_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P131_RBCTransitionOrder_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P131_RBCTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P131_RBCTransitionOrder_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P131_RBCTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int release_P131_RBCTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int copy_P131_RBCTransitionOrder_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P131_RBCTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P135_OBU_T_TM 
 ****************************************************************/
extern int P135_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P135_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P135_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P135_OBU_T_TM_double_conversion_allowed();
extern int P135_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P135_OBU_T_TM_long_conversion_allowed();
extern int P135_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P135_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P135_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P135_OBU_T_TM(void *pValue);
extern int release_P135_OBU_T_TM(void *pValue);
extern int copy_P135_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P135_OBU_T_TM_Utils;

/****************************************************************
 ** P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(void *pValue);
extern int release_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(void *pValue);
extern int copy_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P135_StopShuntingOnDeskOpening_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P137_StopIfInStaffResponsible_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(void *pValue);
extern int release_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(void *pValue);
extern int copy_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P137_StopIfInStaffResponsible_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P138_OBU_T_TM 
 ****************************************************************/
extern int P138_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P138_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P138_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P138_OBU_T_TM_double_conversion_allowed();
extern int P138_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P138_OBU_T_TM_long_conversion_allowed();
extern int P138_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P138_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P138_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P138_OBU_T_TM(void *pValue);
extern int release_P138_OBU_T_TM(void *pValue);
extern int copy_P138_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P138_OBU_T_TM_Utils;

/****************************************************************
 ** P138_ReversingAreaInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P138_ReversingAreaInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P138_ReversingAreaInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P138_ReversingAreaInformation_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P138_ReversingAreaInformation_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P138_ReversingAreaInformation_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P138_ReversingAreaInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P138_ReversingAreaInformation_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P138_ReversingAreaInformation_T_Packet_Types_Pkg(void *pValue);
extern int release_P138_ReversingAreaInformation_T_Packet_Types_Pkg(void *pValue);
extern int copy_P138_ReversingAreaInformation_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P138_ReversingAreaInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P139_OBU_T_TM 
 ****************************************************************/
extern int P139_OBU_T_TM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P139_OBU_T_TM_string(const char *str, char **endptr);
extern int string_to_P139_OBU_T_TM(const char *str, void *pValue, char **endptr);
extern int is_P139_OBU_T_TM_double_conversion_allowed();
extern int P139_OBU_T_TM_to_double(const void *pValue, double *nValue);
extern int is_P139_OBU_T_TM_long_conversion_allowed();
extern int P139_OBU_T_TM_to_long(const void *pValue, long *nValue);
extern void compare_P139_OBU_T_TM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P139_OBU_T_TM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P139_OBU_T_TM(void *pValue);
extern int release_P139_OBU_T_TM(void *pValue);
extern int copy_P139_OBU_T_TM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P139_OBU_T_TM_Utils;

/****************************************************************
 ** P139_ReversingSupervisionInformation_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(void *pValue);
extern int release_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(void *pValue);
extern int copy_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P139_ReversingSupervisionInformation_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P15_Level23MovementAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P15_Level23MovementAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P15_Level23MovementAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P15_Level23MovementAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P15_Level23MovementAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P15_Level23MovementAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P15_Level23MovementAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P15_Level23MovementAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P15_Level23MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P15_Level23MovementAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P15_Level23MovementAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P15_Level23MovementAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P203V1_OBU_k_m_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_k_m_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_m_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_m_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_k_m_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_k_m_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_k_m_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_k_m_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_k_m_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_k_m_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_k_m_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_k_m_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_k_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_k_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_k_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_k_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_k_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_k_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_k_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_k_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_k_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_k_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_k_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_l_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_l_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_l_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_l_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_l_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_l_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_l_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_l_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_l_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_l_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_l_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_section_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_n_section_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_section_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_section_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_n_section_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_n_section_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_n_section_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_n_section_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_n_section_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_n_section_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_n_section_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_n_section_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_n_sectionlist_enum_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_n_sectionlist_enum_T_TM_baseline2_Utils;

/****************************************************************
 ** P203V1_OBU_T_TM_baseline2 
 ****************************************************************/
extern int P203V1_OBU_T_TM_baseline2_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P203V1_OBU_T_TM_baseline2_string(const char *str, char **endptr);
extern int string_to_P203V1_OBU_T_TM_baseline2(const char *str, void *pValue, char **endptr);
extern int is_P203V1_OBU_T_TM_baseline2_double_conversion_allowed();
extern int P203V1_OBU_T_TM_baseline2_to_double(const void *pValue, double *nValue);
extern int is_P203V1_OBU_T_TM_baseline2_long_conversion_allowed();
extern int P203V1_OBU_T_TM_baseline2_to_long(const void *pValue, long *nValue);
extern void compare_P203V1_OBU_T_TM_baseline2(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P203V1_OBU_T_TM_baseline2_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P203V1_OBU_T_TM_baseline2(void *pValue);
extern int release_P203V1_OBU_T_TM_baseline2(void *pValue);
extern int copy_P203V1_OBU_T_TM_baseline2(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P203V1_OBU_T_TM_baseline2_Utils;

/****************************************************************
 ** P21_GradientProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P21_GradientProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfile_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P21_GradientProfile_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P21_GradientProfile_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P21_GradientProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P21_GradientProfile_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P21_GradientProfile_T_Packet_Types_Pkg(void *pValue);
extern int release_P21_GradientProfile_T_Packet_Types_Pkg(void *pValue);
extern int copy_P21_GradientProfile_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P21_GradientProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P21_GradientProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P21_GradientProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P21_GradientProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P21_GradientProfiles_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P21_GradientProfiles_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P21_GradientProfiles_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P21_GradientProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P21_GradientProfiles_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P21_GradientProfiles_T_Packet_Types_Pkg(void *pValue);
extern int release_P21_GradientProfiles_T_Packet_Types_Pkg(void *pValue);
extern int copy_P21_GradientProfiles_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P21_GradientProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(void *pValue);
extern int release_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(void *pValue);
extern int copy_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P27_InternationalStaticSpeedProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P3_NationalValues_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P3_NationalValues_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P3_NationalValues_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P3_NationalValues_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P3_NationalValues_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P3_NationalValues_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P3_NationalValues_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P3_NationalValues_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P3_NationalValues_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P3_NationalValues_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P3_NationalValues_T_Packet_Types_Pkg(void *pValue);
extern int release_P3_NationalValues_T_Packet_Types_Pkg(void *pValue);
extern int copy_P3_NationalValues_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P3_NationalValues_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransistionOrders_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P41_LevelTransistionOrders_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransistionOrders_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransistionOrders_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P41_LevelTransistionOrders_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P41_LevelTransistionOrders_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P41_LevelTransistionOrders_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P41_LevelTransistionOrders_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P41_LevelTransistionOrders_T_Packet_Types_Pkg(void *pValue);
extern int release_P41_LevelTransistionOrders_T_Packet_Types_Pkg(void *pValue);
extern int copy_P41_LevelTransistionOrders_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P41_LevelTransistionOrders_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P41_LevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P41_LevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P41_LevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P41_LevelTransitionOrder_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P41_LevelTransitionOrder_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P41_LevelTransitionOrder_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P41_LevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P41_LevelTransitionOrder_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P41_LevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int release_P41_LevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int copy_P41_LevelTransitionOrder_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P41_LevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P42_SessionManagement_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P42_SessionManagement_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P42_SessionManagement_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P42_SessionManagement_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P42_SessionManagement_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P42_SessionManagement_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P42_SessionManagement_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P42_SessionManagement_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P42_SessionManagement_T_Packet_Types_Pkg(void *pValue);
extern int release_P42_SessionManagement_T_Packet_Types_Pkg(void *pValue);
extern int copy_P42_SessionManagement_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P42_SessionManagement_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** p42_sessionManagement_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_p42_sessionManagement_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p42_sessionManagement_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p42_sessionManagement_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_p42_sessionManagement_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int p42_sessionManagement_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_p42_sessionManagement_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_p42_sessionManagement_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_p42_sessionManagement_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_p42_sessionManagement_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_p42_sessionManagement_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_p42_sessionManagement_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** P45_RadioNetworkRegistration_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P45_RadioNetworkRegistration_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(void *pValue);
extern int release_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(void *pValue);
extern int copy_P45_RadioNetworkRegistration_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P45_RadioNetworkRegistration_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg 
 ****************************************************************/
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_double_conversion_allowed();
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_long_conversion_allowed();
extern int p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(void *pValue);
extern int release_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(void *pValue);
extern int copy_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_p45_radioNetworkRegistration_T_RCM_MsgTypes_Pkg_Utils;

/****************************************************************
 ** P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int release_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(void *pValue);
extern int copy_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P46_ConditionalLevelTransitionOrder_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(void *pValue);
extern int release_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(void *pValue);
extern int copy_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P57_MovementAuthorityRequestParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P58_PositionReportParameters_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P58_PositionReportParameters_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P58_PositionReportParameters_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P58_PositionReportParameters_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P58_PositionReportParameters_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P58_PositionReportParameters_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P58_PositionReportParameters_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P58_PositionReportParameters_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P58_PositionReportParameters_T_Packet_Types_Pkg(void *pValue);
extern int release_P58_PositionReportParameters_T_Packet_Types_Pkg(void *pValue);
extern int copy_P58_PositionReportParameters_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P58_PositionReportParameters_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_BaliseInSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P63_BaliseInSRAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P63_BaliseInSRAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P63_BaliseInSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int release_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(void *pValue);
extern int copy_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P63_ListofBalisesinSRAuthority_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfile_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P80_ModeProfile_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfile_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfile_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P80_ModeProfile_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P80_ModeProfile_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P80_ModeProfile_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P80_ModeProfile_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P80_ModeProfile_T_Packet_Types_Pkg(void *pValue);
extern int release_P80_ModeProfile_T_Packet_Types_Pkg(void *pValue);
extern int copy_P80_ModeProfile_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P80_ModeProfile_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** P80_ModeProfiles_T_Packet_Types_Pkg 
 ****************************************************************/
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_P80_ModeProfiles_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_P80_ModeProfiles_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_P80_ModeProfiles_T_Packet_Types_Pkg_double_conversion_allowed();
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_P80_ModeProfiles_T_Packet_Types_Pkg_long_conversion_allowed();
extern int P80_ModeProfiles_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_P80_ModeProfiles_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_P80_ModeProfiles_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_P80_ModeProfiles_T_Packet_Types_Pkg(void *pValue);
extern int release_P80_ModeProfiles_T_Packet_Types_Pkg(void *pValue);
extern int copy_P80_ModeProfiles_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_P80_ModeProfiles_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** ParabolaArc_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaArc_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaArc_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaArc_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaArc_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaArc_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaArc_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaArc_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaArc_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaArc_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaArc_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaArc_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaArc_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaArc_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurve_list_MRSP_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurve_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurve_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurve_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurve_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurve_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurve_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurve_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurve_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurve_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurve_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurve_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurve_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveAccelerations_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveAccelerations_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveAccelerations_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveAccelerations_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveDistances_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveDistances_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveDistances_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveDistances_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveDistances_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveDistances_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveDistances_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveDistances_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveDistances_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveDistances_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveDistances_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveDistances_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveSpeeds_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveSpeeds_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveSpeeds_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveSpeeds_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** ParabolaCurveValid_T_CalcBrakingCurves_types 
 ****************************************************************/
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ParabolaCurveValid_T_CalcBrakingCurves_types_string(const char *str, char **endptr);
extern int string_to_ParabolaCurveValid_T_CalcBrakingCurves_types(const char *str, void *pValue, char **endptr);
extern int is_ParabolaCurveValid_T_CalcBrakingCurves_types_double_conversion_allowed();
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_double(const void *pValue, double *nValue);
extern int is_ParabolaCurveValid_T_CalcBrakingCurves_types_long_conversion_allowed();
extern int ParabolaCurveValid_T_CalcBrakingCurves_types_to_long(const void *pValue, long *nValue);
extern void compare_ParabolaCurveValid_T_CalcBrakingCurves_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ParabolaCurveValid_T_CalcBrakingCurves_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ParabolaCurveValid_T_CalcBrakingCurves_types(void *pValue);
extern int release_ParabolaCurveValid_T_CalcBrakingCurves_types(void *pValue);
extern int copy_ParabolaCurveValid_T_CalcBrakingCurves_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ParabolaCurveValid_T_CalcBrakingCurves_types_Utils;

/****************************************************************
 ** passedBG_T_BG_Types_Pkg 
 ****************************************************************/
extern int passedBG_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_passedBG_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_passedBG_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_passedBG_T_BG_Types_Pkg_double_conversion_allowed();
extern int passedBG_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_passedBG_T_BG_Types_Pkg_long_conversion_allowed();
extern int passedBG_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_passedBG_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_passedBG_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_passedBG_T_BG_Types_Pkg(void *pValue);
extern int release_passedBG_T_BG_Types_Pkg(void *pValue);
extern int copy_passedBG_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_passedBG_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** Passenger_door_control_info_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Passenger_door_control_info_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Passenger_door_control_info_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Passenger_door_control_info_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Passenger_door_control_info_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Passenger_door_control_info_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Passenger_door_control_info_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Passenger_door_control_info_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Passenger_door_control_info_T_TIU_Types_Pkg(void *pValue);
extern int release_Passenger_door_control_info_T_TIU_Types_Pkg(void *pValue);
extern int copy_Passenger_door_control_info_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Passenger_door_control_info_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Percentage_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Percentage_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Percentage_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Percentage_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Percentage_T_SDM_Types_Pkg_double_conversion_allowed();
extern int Percentage_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Percentage_T_SDM_Types_Pkg_long_conversion_allowed();
extern int Percentage_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Percentage_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Percentage_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Percentage_T_SDM_Types_Pkg(void *pValue);
extern int release_Percentage_T_SDM_Types_Pkg(void *pValue);
extern int copy_Percentage_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Percentage_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** Position_Report_based_on_two_balise_groups_TrainToTrack 
 ****************************************************************/
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Position_Report_based_on_two_balise_groups_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_based_on_two_balise_groups_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_based_on_two_balise_groups_TrainToTrack_double_conversion_allowed();
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_Position_Report_based_on_two_balise_groups_TrainToTrack_long_conversion_allowed();
extern int Position_Report_based_on_two_balise_groups_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_Position_Report_based_on_two_balise_groups_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Position_Report_based_on_two_balise_groups_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Position_Report_based_on_two_balise_groups_TrainToTrack(void *pValue);
extern int release_Position_Report_based_on_two_balise_groups_TrainToTrack(void *pValue);
extern int copy_Position_Report_based_on_two_balise_groups_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Position_Report_based_on_two_balise_groups_TrainToTrack_Utils;

/****************************************************************
 ** Position_Report_TrainToTrack 
 ****************************************************************/
extern int Position_Report_TrainToTrack_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Position_Report_TrainToTrack_string(const char *str, char **endptr);
extern int string_to_Position_Report_TrainToTrack(const char *str, void *pValue, char **endptr);
extern int is_Position_Report_TrainToTrack_double_conversion_allowed();
extern int Position_Report_TrainToTrack_to_double(const void *pValue, double *nValue);
extern int is_Position_Report_TrainToTrack_long_conversion_allowed();
extern int Position_Report_TrainToTrack_to_long(const void *pValue, long *nValue);
extern void compare_Position_Report_TrainToTrack(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Position_Report_TrainToTrack_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Position_Report_TrainToTrack(void *pValue);
extern int release_Position_Report_TrainToTrack(void *pValue);
extern int copy_Position_Report_TrainToTrack(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Position_Report_TrainToTrack_Utils;

/****************************************************************
 ** positionedBG_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBG_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionedBG_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBG_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBG_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int positionedBG_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_positionedBG_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int positionedBG_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_positionedBG_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionedBG_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionedBG_T_TrainPosition_Types_Pck(void *pValue);
extern int release_positionedBG_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_positionedBG_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionedBG_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBGs_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionedBGs_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionedBGs_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionedBGs_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int positionedBGs_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_positionedBGs_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int positionedBGs_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_positionedBGs_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionedBGs_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int release_positionedBGs_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_positionedBGs_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionedBGs_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg 
 ****************************************************************/
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_string(const char *str, char **endptr);
extern int string_to_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(const char *str, void *pValue, char **endptr);
extern int is_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_double_conversion_allowed();
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_double(const void *pValue, double *nValue);
extern int is_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_long_conversion_allowed();
extern int positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(void *pValue);
extern int release_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(void *pValue);
extern int copy_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionedBGs_w_overrun_T_CalculateTrainPosition_Pkg_Utils;

/****************************************************************
 ** positionErrors_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int positionErrors_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_positionErrors_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_positionErrors_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_positionErrors_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int positionErrors_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_positionErrors_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int positionErrors_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_positionErrors_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_positionErrors_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_positionErrors_T_TrainPosition_Types_Pck(void *pValue);
extern int release_positionErrors_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_positionErrors_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_positionErrors_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** probesBalises_T_xdebugSupport_Pkg 
 ****************************************************************/
extern int probesBalises_T_xdebugSupport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_probesBalises_T_xdebugSupport_Pkg_string(const char *str, char **endptr);
extern int string_to_probesBalises_T_xdebugSupport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_probesBalises_T_xdebugSupport_Pkg_double_conversion_allowed();
extern int probesBalises_T_xdebugSupport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_probesBalises_T_xdebugSupport_Pkg_long_conversion_allowed();
extern int probesBalises_T_xdebugSupport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_probesBalises_T_xdebugSupport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_probesBalises_T_xdebugSupport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_probesBalises_T_xdebugSupport_Pkg(void *pValue);
extern int release_probesBalises_T_xdebugSupport_Pkg(void *pValue);
extern int copy_probesBalises_T_xdebugSupport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_probesBalises_T_xdebugSupport_Pkg_Utils;

/****************************************************************
 ** ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg 
 ****************************************************************/
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_string(const char *str, char **endptr);
extern int string_to_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_double_conversion_allowed();
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_long_conversion_allowed();
extern int ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(void *pValue);
extern int release_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(void *pValue);
extern int copy_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ps_dataForStartOfMission_T_API_PersistanceStorage_Pkg_Utils;

/****************************************************************
 ** PT0_PositionReport_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT0_PositionReport_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT0_PositionReport_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT0_PositionReport_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT0_PositionReport_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT0_PositionReport_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT0_PositionReport_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT0_PositionReport_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT0_PositionReport_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT0_PositionReport_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT0_PositionReport_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT0_PositionReport_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT11_ValidatedTrainData_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT1_PositionReport_2BG_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT3_OnboardTelephoneNumbers_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT4_ErrorReporting_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT4_ErrorReporting_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT5_TrainRunningNumber_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT5_TrainRunningNumber_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_PT9_Level23_TransitionInformation_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** Q_DANGERPOINT 
 ****************************************************************/
extern int Q_DANGERPOINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DANGERPOINT_string(const char *str, char **endptr);
extern int string_to_Q_DANGERPOINT(const char *str, void *pValue, char **endptr);
extern int is_Q_DANGERPOINT_double_conversion_allowed();
extern int Q_DANGERPOINT_to_double(const void *pValue, double *nValue);
extern int is_Q_DANGERPOINT_long_conversion_allowed();
extern int Q_DANGERPOINT_to_long(const void *pValue, long *nValue);
extern void compare_Q_DANGERPOINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DANGERPOINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DANGERPOINT(void *pValue);
extern int release_Q_DANGERPOINT(void *pValue);
extern int copy_Q_DANGERPOINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DANGERPOINT_Utils;

/****************************************************************
 ** Q_DIFF 
 ****************************************************************/
extern int Q_DIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIFF_string(const char *str, char **endptr);
extern int string_to_Q_DIFF(const char *str, void *pValue, char **endptr);
extern int is_Q_DIFF_double_conversion_allowed();
extern int Q_DIFF_to_double(const void *pValue, double *nValue);
extern int is_Q_DIFF_long_conversion_allowed();
extern int Q_DIFF_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIFF(void *pValue);
extern int release_Q_DIFF(void *pValue);
extern int copy_Q_DIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIFF_Utils;

/****************************************************************
 ** Q_DIR 
 ****************************************************************/
extern int Q_DIR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIR_string(const char *str, char **endptr);
extern int string_to_Q_DIR(const char *str, void *pValue, char **endptr);
extern int is_Q_DIR_double_conversion_allowed();
extern int Q_DIR_to_double(const void *pValue, double *nValue);
extern int is_Q_DIR_long_conversion_allowed();
extern int Q_DIR_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIR(void *pValue);
extern int release_Q_DIR(void *pValue);
extern int copy_Q_DIR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIR_Utils;

/****************************************************************
 ** Q_DIRLRBG 
 ****************************************************************/
extern int Q_DIRLRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIRLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DIRLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRLRBG_double_conversion_allowed();
extern int Q_DIRLRBG_to_double(const void *pValue, double *nValue);
extern int is_Q_DIRLRBG_long_conversion_allowed();
extern int Q_DIRLRBG_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIRLRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIRLRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIRLRBG(void *pValue);
extern int release_Q_DIRLRBG(void *pValue);
extern int copy_Q_DIRLRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIRLRBG_Utils;

/****************************************************************
 ** Q_DIRTRAIN 
 ****************************************************************/
extern int Q_DIRTRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DIRTRAIN_string(const char *str, char **endptr);
extern int string_to_Q_DIRTRAIN(const char *str, void *pValue, char **endptr);
extern int is_Q_DIRTRAIN_double_conversion_allowed();
extern int Q_DIRTRAIN_to_double(const void *pValue, double *nValue);
extern int is_Q_DIRTRAIN_long_conversion_allowed();
extern int Q_DIRTRAIN_to_long(const void *pValue, long *nValue);
extern void compare_Q_DIRTRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DIRTRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DIRTRAIN(void *pValue);
extern int release_Q_DIRTRAIN(void *pValue);
extern int copy_Q_DIRTRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DIRTRAIN_Utils;

/****************************************************************
 ** Q_DLRBG 
 ****************************************************************/
extern int Q_DLRBG_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_DLRBG_string(const char *str, char **endptr);
extern int string_to_Q_DLRBG(const char *str, void *pValue, char **endptr);
extern int is_Q_DLRBG_double_conversion_allowed();
extern int Q_DLRBG_to_double(const void *pValue, double *nValue);
extern int is_Q_DLRBG_long_conversion_allowed();
extern int Q_DLRBG_to_long(const void *pValue, long *nValue);
extern void compare_Q_DLRBG(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_DLRBG_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_DLRBG(void *pValue);
extern int release_Q_DLRBG(void *pValue);
extern int copy_Q_DLRBG(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_DLRBG_Utils;

/****************************************************************
 ** Q_EMERGENCYSTOP 
 ****************************************************************/
extern int Q_EMERGENCYSTOP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_EMERGENCYSTOP_string(const char *str, char **endptr);
extern int string_to_Q_EMERGENCYSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_EMERGENCYSTOP_double_conversion_allowed();
extern int Q_EMERGENCYSTOP_to_double(const void *pValue, double *nValue);
extern int is_Q_EMERGENCYSTOP_long_conversion_allowed();
extern int Q_EMERGENCYSTOP_to_long(const void *pValue, long *nValue);
extern void compare_Q_EMERGENCYSTOP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_EMERGENCYSTOP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_EMERGENCYSTOP(void *pValue);
extern int release_Q_EMERGENCYSTOP(void *pValue);
extern int copy_Q_EMERGENCYSTOP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_EMERGENCYSTOP_Utils;

/****************************************************************
 ** Q_ENDTIMER 
 ****************************************************************/
extern int Q_ENDTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_Q_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_ENDTIMER_double_conversion_allowed();
extern int Q_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int is_Q_ENDTIMER_long_conversion_allowed();
extern int Q_ENDTIMER_to_long(const void *pValue, long *nValue);
extern void compare_Q_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_ENDTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_ENDTIMER(void *pValue);
extern int release_Q_ENDTIMER(void *pValue);
extern int copy_Q_ENDTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_ENDTIMER_Utils;

/****************************************************************
 ** Q_FRONT 
 ****************************************************************/
extern int Q_FRONT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_FRONT_string(const char *str, char **endptr);
extern int string_to_Q_FRONT(const char *str, void *pValue, char **endptr);
extern int is_Q_FRONT_double_conversion_allowed();
extern int Q_FRONT_to_double(const void *pValue, double *nValue);
extern int is_Q_FRONT_long_conversion_allowed();
extern int Q_FRONT_to_long(const void *pValue, long *nValue);
extern void compare_Q_FRONT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_FRONT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_FRONT(void *pValue);
extern int release_Q_FRONT(void *pValue);
extern int copy_Q_FRONT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_FRONT_Utils;

/****************************************************************
 ** Q_GDIR 
 ****************************************************************/
extern int Q_GDIR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_GDIR_string(const char *str, char **endptr);
extern int string_to_Q_GDIR(const char *str, void *pValue, char **endptr);
extern int is_Q_GDIR_double_conversion_allowed();
extern int Q_GDIR_to_double(const void *pValue, double *nValue);
extern int is_Q_GDIR_long_conversion_allowed();
extern int Q_GDIR_to_long(const void *pValue, long *nValue);
extern void compare_Q_GDIR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_GDIR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_GDIR(void *pValue);
extern int release_Q_GDIR(void *pValue);
extern int copy_Q_GDIR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_GDIR_Utils;

/****************************************************************
 ** Q_LENGTH 
 ****************************************************************/
extern int Q_LENGTH_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LENGTH_string(const char *str, char **endptr);
extern int string_to_Q_LENGTH(const char *str, void *pValue, char **endptr);
extern int is_Q_LENGTH_double_conversion_allowed();
extern int Q_LENGTH_to_double(const void *pValue, double *nValue);
extern int is_Q_LENGTH_long_conversion_allowed();
extern int Q_LENGTH_to_long(const void *pValue, long *nValue);
extern void compare_Q_LENGTH(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LENGTH_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LENGTH(void *pValue);
extern int release_Q_LENGTH(void *pValue);
extern int copy_Q_LENGTH(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LENGTH_Utils;

/****************************************************************
 ** Q_LGTLOC 
 ****************************************************************/
extern int Q_LGTLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LGTLOC_string(const char *str, char **endptr);
extern int string_to_Q_LGTLOC(const char *str, void *pValue, char **endptr);
extern int is_Q_LGTLOC_double_conversion_allowed();
extern int Q_LGTLOC_to_double(const void *pValue, double *nValue);
extern int is_Q_LGTLOC_long_conversion_allowed();
extern int Q_LGTLOC_to_long(const void *pValue, long *nValue);
extern void compare_Q_LGTLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LGTLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LGTLOC(void *pValue);
extern int release_Q_LGTLOC(void *pValue);
extern int copy_Q_LGTLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LGTLOC_Utils;

/****************************************************************
 ** Q_LINK 
 ****************************************************************/
extern int Q_LINK_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LINK_string(const char *str, char **endptr);
extern int string_to_Q_LINK(const char *str, void *pValue, char **endptr);
extern int is_Q_LINK_double_conversion_allowed();
extern int Q_LINK_to_double(const void *pValue, double *nValue);
extern int is_Q_LINK_long_conversion_allowed();
extern int Q_LINK_to_long(const void *pValue, long *nValue);
extern void compare_Q_LINK(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LINK_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LINK(void *pValue);
extern int release_Q_LINK(void *pValue);
extern int copy_Q_LINK(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LINK_Utils;

/****************************************************************
 ** Q_LINKORIENTATION 
 ****************************************************************/
extern int Q_LINKORIENTATION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LINKORIENTATION_string(const char *str, char **endptr);
extern int string_to_Q_LINKORIENTATION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKORIENTATION_double_conversion_allowed();
extern int Q_LINKORIENTATION_to_double(const void *pValue, double *nValue);
extern int is_Q_LINKORIENTATION_long_conversion_allowed();
extern int Q_LINKORIENTATION_to_long(const void *pValue, long *nValue);
extern void compare_Q_LINKORIENTATION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LINKORIENTATION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LINKORIENTATION(void *pValue);
extern int release_Q_LINKORIENTATION(void *pValue);
extern int copy_Q_LINKORIENTATION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LINKORIENTATION_Utils;

/****************************************************************
 ** Q_LINKREACTION 
 ****************************************************************/
extern int Q_LINKREACTION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LINKREACTION_string(const char *str, char **endptr);
extern int string_to_Q_LINKREACTION(const char *str, void *pValue, char **endptr);
extern int is_Q_LINKREACTION_double_conversion_allowed();
extern int Q_LINKREACTION_to_double(const void *pValue, double *nValue);
extern int is_Q_LINKREACTION_long_conversion_allowed();
extern int Q_LINKREACTION_to_long(const void *pValue, long *nValue);
extern void compare_Q_LINKREACTION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LINKREACTION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LINKREACTION(void *pValue);
extern int release_Q_LINKREACTION(void *pValue);
extern int copy_Q_LINKREACTION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LINKREACTION_Utils;

/****************************************************************
 ** Q_LOCACC 
 ****************************************************************/
extern int Q_LOCACC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_LOCACC_string(const char *str, char **endptr);
extern int string_to_Q_LOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_LOCACC_double_conversion_allowed();
extern int Q_LOCACC_to_double(const void *pValue, double *nValue);
extern int is_Q_LOCACC_long_conversion_allowed();
extern int Q_LOCACC_to_long(const void *pValue, long *nValue);
extern void compare_Q_LOCACC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_LOCACC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_LOCACC(void *pValue);
extern int release_Q_LOCACC(void *pValue);
extern int copy_Q_LOCACC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_LOCACC_Utils;

/****************************************************************
 ** Q_MAMODE 
 ****************************************************************/
extern int Q_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_MAMODE_string(const char *str, char **endptr);
extern int string_to_Q_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_Q_MAMODE_double_conversion_allowed();
extern int Q_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_Q_MAMODE_long_conversion_allowed();
extern int Q_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_Q_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_MAMODE(void *pValue);
extern int release_Q_MAMODE(void *pValue);
extern int copy_Q_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_MAMODE_Utils;

/****************************************************************
 ** Q_MARQSTREASON 
 ****************************************************************/
extern int Q_MARQSTREASON_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_MARQSTREASON_string(const char *str, char **endptr);
extern int string_to_Q_MARQSTREASON(const char *str, void *pValue, char **endptr);
extern int is_Q_MARQSTREASON_double_conversion_allowed();
extern int Q_MARQSTREASON_to_double(const void *pValue, double *nValue);
extern int is_Q_MARQSTREASON_long_conversion_allowed();
extern int Q_MARQSTREASON_to_long(const void *pValue, long *nValue);
extern void compare_Q_MARQSTREASON(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_MARQSTREASON_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_MARQSTREASON(void *pValue);
extern int release_Q_MARQSTREASON(void *pValue);
extern int copy_Q_MARQSTREASON(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_MARQSTREASON_Utils;

/****************************************************************
 ** Q_MEDIA 
 ****************************************************************/
extern int Q_MEDIA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_MEDIA_string(const char *str, char **endptr);
extern int string_to_Q_MEDIA(const char *str, void *pValue, char **endptr);
extern int is_Q_MEDIA_double_conversion_allowed();
extern int Q_MEDIA_to_double(const void *pValue, double *nValue);
extern int is_Q_MEDIA_long_conversion_allowed();
extern int Q_MEDIA_to_long(const void *pValue, long *nValue);
extern void compare_Q_MEDIA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_MEDIA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_MEDIA(void *pValue);
extern int release_Q_MEDIA(void *pValue);
extern int copy_Q_MEDIA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_MEDIA_Utils;

/****************************************************************
 ** Q_NEWCOUNTRY 
 ****************************************************************/
extern int Q_NEWCOUNTRY_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NEWCOUNTRY_string(const char *str, char **endptr);
extern int string_to_Q_NEWCOUNTRY(const char *str, void *pValue, char **endptr);
extern int is_Q_NEWCOUNTRY_double_conversion_allowed();
extern int Q_NEWCOUNTRY_to_double(const void *pValue, double *nValue);
extern int is_Q_NEWCOUNTRY_long_conversion_allowed();
extern int Q_NEWCOUNTRY_to_long(const void *pValue, long *nValue);
extern void compare_Q_NEWCOUNTRY(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NEWCOUNTRY_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NEWCOUNTRY(void *pValue);
extern int release_Q_NEWCOUNTRY(void *pValue);
extern int copy_Q_NEWCOUNTRY(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NEWCOUNTRY_Utils;

/****************************************************************
 ** Q_NVDRIVER_ADHES 
 ****************************************************************/
extern int Q_NVDRIVER_ADHES_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVDRIVER_ADHES_string(const char *str, char **endptr);
extern int string_to_Q_NVDRIVER_ADHES(const char *str, void *pValue, char **endptr);
extern int is_Q_NVDRIVER_ADHES_double_conversion_allowed();
extern int Q_NVDRIVER_ADHES_to_double(const void *pValue, double *nValue);
extern int is_Q_NVDRIVER_ADHES_long_conversion_allowed();
extern int Q_NVDRIVER_ADHES_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVDRIVER_ADHES(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVDRIVER_ADHES_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVDRIVER_ADHES(void *pValue);
extern int release_Q_NVDRIVER_ADHES(void *pValue);
extern int copy_Q_NVDRIVER_ADHES(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVDRIVER_ADHES_Utils;

/****************************************************************
 ** Q_NVEMRRLS 
 ****************************************************************/
extern int Q_NVEMRRLS_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVEMRRLS_string(const char *str, char **endptr);
extern int string_to_Q_NVEMRRLS(const char *str, void *pValue, char **endptr);
extern int is_Q_NVEMRRLS_double_conversion_allowed();
extern int Q_NVEMRRLS_to_double(const void *pValue, double *nValue);
extern int is_Q_NVEMRRLS_long_conversion_allowed();
extern int Q_NVEMRRLS_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVEMRRLS(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVEMRRLS_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVEMRRLS(void *pValue);
extern int release_Q_NVEMRRLS(void *pValue);
extern int copy_Q_NVEMRRLS(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVEMRRLS_Utils;

/****************************************************************
 ** Q_NVGUIPERM 
 ****************************************************************/
extern int Q_NVGUIPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVGUIPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVGUIPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVGUIPERM_double_conversion_allowed();
extern int Q_NVGUIPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVGUIPERM_long_conversion_allowed();
extern int Q_NVGUIPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVGUIPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVGUIPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVGUIPERM(void *pValue);
extern int release_Q_NVGUIPERM(void *pValue);
extern int copy_Q_NVGUIPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVGUIPERM_Utils;

/****************************************************************
 ** Q_NVINHSMICPERM 
 ****************************************************************/
extern int Q_NVINHSMICPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVINHSMICPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVINHSMICPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVINHSMICPERM_double_conversion_allowed();
extern int Q_NVINHSMICPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVINHSMICPERM_long_conversion_allowed();
extern int Q_NVINHSMICPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVINHSMICPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVINHSMICPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVINHSMICPERM(void *pValue);
extern int release_Q_NVINHSMICPERM(void *pValue);
extern int copy_Q_NVINHSMICPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVINHSMICPERM_Utils;

/****************************************************************
 ** Q_NVKINT 
 ****************************************************************/
extern int Q_NVKINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVKINT_string(const char *str, char **endptr);
extern int string_to_Q_NVKINT(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKINT_double_conversion_allowed();
extern int Q_NVKINT_to_double(const void *pValue, double *nValue);
extern int is_Q_NVKINT_long_conversion_allowed();
extern int Q_NVKINT_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVKINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVKINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVKINT(void *pValue);
extern int release_Q_NVKINT(void *pValue);
extern int copy_Q_NVKINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVKINT_Utils;

/****************************************************************
 ** Q_NVKVINTSET 
 ****************************************************************/
extern int Q_NVKVINTSET_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVKVINTSET_string(const char *str, char **endptr);
extern int string_to_Q_NVKVINTSET(const char *str, void *pValue, char **endptr);
extern int is_Q_NVKVINTSET_double_conversion_allowed();
extern int Q_NVKVINTSET_to_double(const void *pValue, double *nValue);
extern int is_Q_NVKVINTSET_long_conversion_allowed();
extern int Q_NVKVINTSET_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVKVINTSET(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVKVINTSET_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVKVINTSET(void *pValue);
extern int release_Q_NVKVINTSET(void *pValue);
extern int copy_Q_NVKVINTSET(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVKVINTSET_Utils;

/****************************************************************
 ** Q_NVLOCACC 
 ****************************************************************/
extern int Q_NVLOCACC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVLOCACC_string(const char *str, char **endptr);
extern int string_to_Q_NVLOCACC(const char *str, void *pValue, char **endptr);
extern int is_Q_NVLOCACC_double_conversion_allowed();
extern int Q_NVLOCACC_to_double(const void *pValue, double *nValue);
extern int is_Q_NVLOCACC_long_conversion_allowed();
extern int Q_NVLOCACC_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVLOCACC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVLOCACC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVLOCACC(void *pValue);
extern int release_Q_NVLOCACC(void *pValue);
extern int copy_Q_NVLOCACC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVLOCACC_Utils;

/****************************************************************
 ** Q_NVSBFBPERM 
 ****************************************************************/
extern int Q_NVSBFBPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVSBFBPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBFBPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBFBPERM_double_conversion_allowed();
extern int Q_NVSBFBPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVSBFBPERM_long_conversion_allowed();
extern int Q_NVSBFBPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVSBFBPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVSBFBPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVSBFBPERM(void *pValue);
extern int release_Q_NVSBFBPERM(void *pValue);
extern int copy_Q_NVSBFBPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVSBFBPERM_Utils;

/****************************************************************
 ** Q_NVSBTSMPERM 
 ****************************************************************/
extern int Q_NVSBTSMPERM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_NVSBTSMPERM_string(const char *str, char **endptr);
extern int string_to_Q_NVSBTSMPERM(const char *str, void *pValue, char **endptr);
extern int is_Q_NVSBTSMPERM_double_conversion_allowed();
extern int Q_NVSBTSMPERM_to_double(const void *pValue, double *nValue);
extern int is_Q_NVSBTSMPERM_long_conversion_allowed();
extern int Q_NVSBTSMPERM_to_long(const void *pValue, long *nValue);
extern void compare_Q_NVSBTSMPERM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_NVSBTSMPERM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_NVSBTSMPERM(void *pValue);
extern int release_Q_NVSBTSMPERM(void *pValue);
extern int copy_Q_NVSBTSMPERM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_NVSBTSMPERM_Utils;

/****************************************************************
 ** Q_OVERLAP 
 ****************************************************************/
extern int Q_OVERLAP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_OVERLAP_string(const char *str, char **endptr);
extern int string_to_Q_OVERLAP(const char *str, void *pValue, char **endptr);
extern int is_Q_OVERLAP_double_conversion_allowed();
extern int Q_OVERLAP_to_double(const void *pValue, double *nValue);
extern int is_Q_OVERLAP_long_conversion_allowed();
extern int Q_OVERLAP_to_long(const void *pValue, long *nValue);
extern void compare_Q_OVERLAP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_OVERLAP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_OVERLAP(void *pValue);
extern int release_Q_OVERLAP(void *pValue);
extern int copy_Q_OVERLAP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_OVERLAP_Utils;

/****************************************************************
 ** Q_RBC 
 ****************************************************************/
extern int Q_RBC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_RBC_string(const char *str, char **endptr);
extern int string_to_Q_RBC(const char *str, void *pValue, char **endptr);
extern int is_Q_RBC_double_conversion_allowed();
extern int Q_RBC_to_double(const void *pValue, double *nValue);
extern int is_Q_RBC_long_conversion_allowed();
extern int Q_RBC_to_long(const void *pValue, long *nValue);
extern void compare_Q_RBC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_RBC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_RBC(void *pValue);
extern int release_Q_RBC(void *pValue);
extern int copy_Q_RBC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_RBC_Utils;

/****************************************************************
 ** Q_SCALE 
 ****************************************************************/
extern int Q_SCALE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SCALE_string(const char *str, char **endptr);
extern int string_to_Q_SCALE(const char *str, void *pValue, char **endptr);
extern int is_Q_SCALE_double_conversion_allowed();
extern int Q_SCALE_to_double(const void *pValue, double *nValue);
extern int is_Q_SCALE_long_conversion_allowed();
extern int Q_SCALE_to_long(const void *pValue, long *nValue);
extern void compare_Q_SCALE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SCALE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SCALE(void *pValue);
extern int release_Q_SCALE(void *pValue);
extern int copy_Q_SCALE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SCALE_Utils;

/****************************************************************
 ** Q_SECTIONTIMER 
 ****************************************************************/
extern int Q_SECTIONTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_Q_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_Q_SECTIONTIMER_double_conversion_allowed();
extern int Q_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int is_Q_SECTIONTIMER_long_conversion_allowed();
extern int Q_SECTIONTIMER_to_long(const void *pValue, long *nValue);
extern void compare_Q_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SECTIONTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SECTIONTIMER(void *pValue);
extern int release_Q_SECTIONTIMER(void *pValue);
extern int copy_Q_SECTIONTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SECTIONTIMER_Utils;

/****************************************************************
 ** Q_SLEEPSESSION 
 ****************************************************************/
extern int Q_SLEEPSESSION_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SLEEPSESSION_string(const char *str, char **endptr);
extern int string_to_Q_SLEEPSESSION(const char *str, void *pValue, char **endptr);
extern int is_Q_SLEEPSESSION_double_conversion_allowed();
extern int Q_SLEEPSESSION_to_double(const void *pValue, double *nValue);
extern int is_Q_SLEEPSESSION_long_conversion_allowed();
extern int Q_SLEEPSESSION_to_long(const void *pValue, long *nValue);
extern void compare_Q_SLEEPSESSION(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SLEEPSESSION_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SLEEPSESSION(void *pValue);
extern int release_Q_SLEEPSESSION(void *pValue);
extern int copy_Q_SLEEPSESSION(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SLEEPSESSION_Utils;

/****************************************************************
 ** Q_SRSTOP 
 ****************************************************************/
extern int Q_SRSTOP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_SRSTOP_string(const char *str, char **endptr);
extern int string_to_Q_SRSTOP(const char *str, void *pValue, char **endptr);
extern int is_Q_SRSTOP_double_conversion_allowed();
extern int Q_SRSTOP_to_double(const void *pValue, double *nValue);
extern int is_Q_SRSTOP_long_conversion_allowed();
extern int Q_SRSTOP_to_long(const void *pValue, long *nValue);
extern void compare_Q_SRSTOP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_SRSTOP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_SRSTOP(void *pValue);
extern int release_Q_SRSTOP(void *pValue);
extern int copy_Q_SRSTOP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_SRSTOP_Utils;

/****************************************************************
 ** Q_TEXTCLASS 
 ****************************************************************/
extern int Q_TEXTCLASS_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_TEXTCLASS_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCLASS(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCLASS_double_conversion_allowed();
extern int Q_TEXTCLASS_to_double(const void *pValue, double *nValue);
extern int is_Q_TEXTCLASS_long_conversion_allowed();
extern int Q_TEXTCLASS_to_long(const void *pValue, long *nValue);
extern void compare_Q_TEXTCLASS(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_TEXTCLASS_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_TEXTCLASS(void *pValue);
extern int release_Q_TEXTCLASS(void *pValue);
extern int copy_Q_TEXTCLASS(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_TEXTCLASS_Utils;

/****************************************************************
 ** Q_TEXTCONFIRM 
 ****************************************************************/
extern int Q_TEXTCONFIRM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_TEXTCONFIRM_string(const char *str, char **endptr);
extern int string_to_Q_TEXTCONFIRM(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTCONFIRM_double_conversion_allowed();
extern int Q_TEXTCONFIRM_to_double(const void *pValue, double *nValue);
extern int is_Q_TEXTCONFIRM_long_conversion_allowed();
extern int Q_TEXTCONFIRM_to_long(const void *pValue, long *nValue);
extern void compare_Q_TEXTCONFIRM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_TEXTCONFIRM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_TEXTCONFIRM(void *pValue);
extern int release_Q_TEXTCONFIRM(void *pValue);
extern int copy_Q_TEXTCONFIRM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_TEXTCONFIRM_Utils;

/****************************************************************
 ** Q_TEXTREPORT 
 ****************************************************************/
extern int Q_TEXTREPORT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_TEXTREPORT_string(const char *str, char **endptr);
extern int string_to_Q_TEXTREPORT(const char *str, void *pValue, char **endptr);
extern int is_Q_TEXTREPORT_double_conversion_allowed();
extern int Q_TEXTREPORT_to_double(const void *pValue, double *nValue);
extern int is_Q_TEXTREPORT_long_conversion_allowed();
extern int Q_TEXTREPORT_to_long(const void *pValue, long *nValue);
extern void compare_Q_TEXTREPORT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_TEXTREPORT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_TEXTREPORT(void *pValue);
extern int release_Q_TEXTREPORT(void *pValue);
extern int copy_Q_TEXTREPORT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_TEXTREPORT_Utils;

/****************************************************************
 ** Q_UPDOWN 
 ****************************************************************/
extern int Q_UPDOWN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Q_UPDOWN_string(const char *str, char **endptr);
extern int string_to_Q_UPDOWN(const char *str, void *pValue, char **endptr);
extern int is_Q_UPDOWN_double_conversion_allowed();
extern int Q_UPDOWN_to_double(const void *pValue, double *nValue);
extern int is_Q_UPDOWN_long_conversion_allowed();
extern int Q_UPDOWN_to_long(const void *pValue, long *nValue);
extern void compare_Q_UPDOWN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Q_UPDOWN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Q_UPDOWN(void *pValue);
extern int release_Q_UPDOWN(void *pValue);
extern int copy_Q_UPDOWN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Q_UPDOWN_Utils;

/****************************************************************
 ** Radio_TrackTrain_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrackTrain_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrackTrain_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrackTrain_Header_T_Radio_Types_Pkg_double_conversion_allowed();
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrackTrain_Header_T_Radio_Types_Pkg_long_conversion_allowed();
extern int Radio_TrackTrain_Header_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrackTrain_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrackTrain_Header_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrackTrain_Header_T_Radio_Types_Pkg(void *pValue);
extern int release_Radio_TrackTrain_Header_T_Radio_Types_Pkg(void *pValue);
extern int copy_Radio_TrackTrain_Header_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrackTrain_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Header_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrainTrack_Header_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Header_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Header_T_Radio_Types_Pkg_double_conversion_allowed();
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrainTrack_Header_T_Radio_Types_Pkg_long_conversion_allowed();
extern int Radio_TrainTrack_Header_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrainTrack_Header_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrainTrack_Header_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrainTrack_Header_T_Radio_Types_Pkg(void *pValue);
extern int release_Radio_TrainTrack_Header_T_Radio_Types_Pkg(void *pValue);
extern int copy_Radio_TrainTrack_Header_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Header_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** Radio_TrainTrack_Message_T_Radio_Types_Pkg 
 ****************************************************************/
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Radio_TrainTrack_Message_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Radio_TrainTrack_Message_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Radio_TrainTrack_Message_T_Radio_Types_Pkg_double_conversion_allowed();
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Radio_TrainTrack_Message_T_Radio_Types_Pkg_long_conversion_allowed();
extern int Radio_TrainTrack_Message_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Radio_TrainTrack_Message_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Radio_TrainTrack_Message_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Radio_TrainTrack_Message_T_Radio_Types_Pkg(void *pValue);
extern int release_Radio_TrainTrack_Message_T_Radio_Types_Pkg(void *pValue);
extern int copy_Radio_TrainTrack_Message_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Radio_TrainTrack_Message_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** RadioManagement_T_API_RadioCommunication_Pkg 
 ****************************************************************/
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioManagement_T_API_RadioCommunication_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioManagement_T_API_RadioCommunication_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioManagement_T_API_RadioCommunication_Pkg_double_conversion_allowed();
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RadioManagement_T_API_RadioCommunication_Pkg_long_conversion_allowed();
extern int RadioManagement_T_API_RadioCommunication_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RadioManagement_T_API_RadioCommunication_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioManagement_T_API_RadioCommunication_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioManagement_T_API_RadioCommunication_Pkg(void *pValue);
extern int release_RadioManagement_T_API_RadioCommunication_Pkg(void *pValue);
extern int copy_RadioManagement_T_API_RadioCommunication_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioManagement_T_API_RadioCommunication_Pkg_Utils;

/****************************************************************
 ** radioManagementMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int radioManagementMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_radioManagementMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_radioManagementMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_radioManagementMessage_T_Common_Types_Pkg_double_conversion_allowed();
extern int radioManagementMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_radioManagementMessage_T_Common_Types_Pkg_long_conversion_allowed();
extern int radioManagementMessage_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_radioManagementMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_radioManagementMessage_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_radioManagementMessage_T_Common_Types_Pkg(void *pValue);
extern int release_radioManagementMessage_T_Common_Types_Pkg(void *pValue);
extern int copy_radioManagementMessage_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_radioManagementMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** RadioMessage_T_Radio_Types_Pkg 
 ****************************************************************/
extern int RadioMessage_T_Radio_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioMessage_T_Radio_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMessage_T_Radio_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMessage_T_Radio_Types_Pkg_double_conversion_allowed();
extern int RadioMessage_T_Radio_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RadioMessage_T_Radio_Types_Pkg_long_conversion_allowed();
extern int RadioMessage_T_Radio_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RadioMessage_T_Radio_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioMessage_T_Radio_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioMessage_T_Radio_Types_Pkg(void *pValue);
extern int release_RadioMessage_T_Radio_Types_Pkg(void *pValue);
extern int copy_RadioMessage_T_Radio_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioMessage_T_Radio_Types_Pkg_Utils;

/****************************************************************
 ** RadioMetadata_T_Common_Types_Pkg 
 ****************************************************************/
extern int RadioMetadata_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RadioMetadata_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RadioMetadata_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RadioMetadata_T_Common_Types_Pkg_double_conversion_allowed();
extern int RadioMetadata_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RadioMetadata_T_Common_Types_Pkg_long_conversion_allowed();
extern int RadioMetadata_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RadioMetadata_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RadioMetadata_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RadioMetadata_T_Common_Types_Pkg(void *pValue);
extern int release_RadioMetadata_T_Common_Types_Pkg(void *pValue);
extern int copy_RadioMetadata_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RadioMetadata_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** radioNetWorkIDs_T_MoRC_Pck 
 ****************************************************************/
extern int radioNetWorkIDs_T_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_radioNetWorkIDs_T_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_radioNetWorkIDs_T_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_radioNetWorkIDs_T_MoRC_Pck_double_conversion_allowed();
extern int radioNetWorkIDs_T_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_radioNetWorkIDs_T_MoRC_Pck_long_conversion_allowed();
extern int radioNetWorkIDs_T_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_radioNetWorkIDs_T_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_radioNetWorkIDs_T_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_radioNetWorkIDs_T_MoRC_Pck(void *pValue);
extern int release_radioNetWorkIDs_T_MoRC_Pck(void *pValue);
extern int copy_radioNetWorkIDs_T_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_radioNetWorkIDs_T_MoRC_Pck_Utils;

/****************************************************************
 ** RBC_Communication_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RBC_Communication_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Communication_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Communication_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RBC_Communication_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int RBC_Communication_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RBC_Communication_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RBC_Communication_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RBC_Communication_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_RBC_Communication_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_RBC_Communication_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RBC_Communication_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** RBC_Id_T_Common_Types_Pkg 
 ****************************************************************/
extern int RBC_Id_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_RBC_Id_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_RBC_Id_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_RBC_Id_T_Common_Types_Pkg_double_conversion_allowed();
extern int RBC_Id_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_RBC_Id_T_Common_Types_Pkg_long_conversion_allowed();
extern int RBC_Id_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_RBC_Id_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_RBC_Id_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_RBC_Id_T_Common_Types_Pkg(void *pValue);
extern int release_RBC_Id_T_Common_Types_Pkg(void *pValue);
extern int copy_RBC_Id_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_RBC_Id_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** ReceivedMessage_T_Common_Types_Pkg 
 ****************************************************************/
extern int ReceivedMessage_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ReceivedMessage_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_ReceivedMessage_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReceivedMessage_T_Common_Types_Pkg_double_conversion_allowed();
extern int ReceivedMessage_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ReceivedMessage_T_Common_Types_Pkg_long_conversion_allowed();
extern int ReceivedMessage_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ReceivedMessage_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ReceivedMessage_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ReceivedMessage_T_Common_Types_Pkg(void *pValue);
extern int release_ReceivedMessage_T_Common_Types_Pkg(void *pValue);
extern int copy_ReceivedMessage_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ReceivedMessage_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg 
 ****************************************************************/
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_string(const char *str, char **endptr);
extern int string_to_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(const char *str, void *pValue, char **endptr);
extern int is_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_double_conversion_allowed();
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_double(const void *pValue, double *nValue);
extern int is_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_long_conversion_allowed();
extern int refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int release_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pValue);
extern int copy_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_refBGs_T_CalculateTrainPosition_Pkg_BG_relocation_Pkg_Utils;

/****************************************************************
 ** ReportedBG_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ReportedBG_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBG_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBG_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ReportedBG_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ReportedBG_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ReportedBG_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ReportedBG_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ReportedBG_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ReportedBG_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ReportedBG_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ReportedBG_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** ReportedBGList_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_ReportedBGList_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_ReportedBGList_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_ReportedBGList_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_ReportedBGList_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int ReportedBGList_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_ReportedBGList_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_ReportedBGList_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_ReportedBGList_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_ReportedBGList_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_ReportedBGList_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_ReportedBGList_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** safeRadioConnectionIndication_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_safeRadioConnectionIndication_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_safeRadioConnnectionIndicator_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Commands_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Commands_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SDM_Commands_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Commands_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Commands_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SDM_Commands_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SDM_Commands_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SDM_Commands_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SDM_Commands_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SDM_Commands_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SDM_Commands_T_SDM_Types_Pkg(void *pValue);
extern int release_SDM_Commands_T_SDM_Types_Pkg(void *pValue);
extern int copy_SDM_Commands_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SDM_Commands_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Locations_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Locations_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SDM_Locations_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Locations_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Locations_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SDM_Locations_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SDM_Locations_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SDM_Locations_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SDM_Locations_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SDM_Locations_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SDM_Locations_T_SDM_Types_Pkg(void *pValue);
extern int release_SDM_Locations_T_SDM_Types_Pkg(void *pValue);
extern int copy_SDM_Locations_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SDM_Locations_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SDM_Types_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SDM_Types_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SDM_Types_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SDM_Types_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SDM_Types_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SDM_Types_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SDM_Types_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SDM_Types_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SDM_Types_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SDM_Types_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SDM_Types_T_SDM_Types_Pkg(void *pValue);
extern int release_SDM_Types_T_SDM_Types_Pkg(void *pValue);
extern int copy_SDM_Types_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SDM_Types_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** sessionCmd_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sessionCmd_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionCmd_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionCmd_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sessionCmd_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int sessionCmd_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sessionCmd_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sessionCmd_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sessionCmd_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_sessionCmd_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_sessionCmd_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sessionCmd_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionPhase_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sessionPhase_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionPhase_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionPhase_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sessionPhase_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int sessionPhase_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sessionPhase_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sessionPhase_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sessionPhase_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_sessionPhase_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_sessionPhase_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sessionPhase_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sessionStatus_T_RCM_Session_Types_Pkg 
 ****************************************************************/
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sessionStatus_T_RCM_Session_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_sessionStatus_T_RCM_Session_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sessionStatus_T_RCM_Session_Types_Pkg_double_conversion_allowed();
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sessionStatus_T_RCM_Session_Types_Pkg_long_conversion_allowed();
extern int sessionStatus_T_RCM_Session_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sessionStatus_T_RCM_Session_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sessionStatus_T_RCM_Session_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sessionStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int release_sessionStatus_T_RCM_Session_Types_Pkg(void *pValue);
extern int copy_sessionStatus_T_RCM_Session_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sessionStatus_T_RCM_Session_Types_Pkg_Utils;

/****************************************************************
 ** sNID_RADIO_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sNID_RADIO_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sNID_RADIO_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sNID_RADIO_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sNID_RADIO_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int sNID_RADIO_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sNID_RADIO_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sNID_RADIO_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_sNID_RADIO_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_sNID_RADIO_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sNID_RADIO_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** Speed_T_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int Speed_T_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Speed_T_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_Speed_T_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speed_T_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int Speed_T_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Speed_T_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int Speed_T_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Speed_T_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Speed_T_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Speed_T_Obu_BasicTypes_Pkg(void *pValue);
extern int release_Speed_T_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_Speed_T_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Speed_T_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** Speeds_T_SDM_Types_Pkg 
 ****************************************************************/
extern int Speeds_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Speeds_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Speeds_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Speeds_T_SDM_Types_Pkg_double_conversion_allowed();
extern int Speeds_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Speeds_T_SDM_Types_Pkg_long_conversion_allowed();
extern int Speeds_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Speeds_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Speeds_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Speeds_T_SDM_Types_Pkg(void *pValue);
extern int release_Speeds_T_SDM_Types_Pkg(void *pValue);
extern int copy_Speeds_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Speeds_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** speedSupervisionForDMI_T_DMI_Types_Pkg 
 ****************************************************************/
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_speedSupervisionForDMI_T_DMI_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_speedSupervisionForDMI_T_DMI_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_speedSupervisionForDMI_T_DMI_Types_Pkg_double_conversion_allowed();
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_speedSupervisionForDMI_T_DMI_Types_Pkg_long_conversion_allowed();
extern int speedSupervisionForDMI_T_DMI_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_speedSupervisionForDMI_T_DMI_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_speedSupervisionForDMI_T_DMI_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_speedSupervisionForDMI_T_DMI_Types_Pkg(void *pValue);
extern int release_speedSupervisionForDMI_T_DMI_Types_Pkg(void *pValue);
extern int copy_speedSupervisionForDMI_T_DMI_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_speedSupervisionForDMI_T_DMI_Types_Pkg_Utils;

/****************************************************************
 ** SSM_ST_brake_Management 
 ****************************************************************/
extern int SSM_ST_brake_Management_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_brake_Management_string(const char *str, char **endptr);
extern int string_to_SSM_ST_brake_Management(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_brake_Management_double_conversion_allowed();
extern int SSM_ST_brake_Management_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_brake_Management_long_conversion_allowed();
extern int SSM_ST_brake_Management_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_brake_Management(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_brake_Management_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_brake_Management(void *pValue);
extern int release_SSM_ST_brake_Management(void *pValue);
extern int copy_SSM_ST_brake_Management(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_brake_Management_Utils;

/****************************************************************
 ** SSM_ST_connectionStatus_SM 
 ****************************************************************/
extern int SSM_ST_connectionStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_connectionStatus_SM_double_conversion_allowed();
extern int SSM_ST_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_connectionStatus_SM_long_conversion_allowed();
extern int SSM_ST_connectionStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_connectionStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_connectionStatus_SM(void *pValue);
extern int release_SSM_ST_connectionStatus_SM(void *pValue);
extern int copy_SSM_ST_connectionStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_ST_CSM_CSM_modeInterplay 
 ****************************************************************/
extern int SSM_ST_CSM_CSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_CSM_CSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_CSM_CSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_CSM_CSM_modeInterplay_double_conversion_allowed();
extern int SSM_ST_CSM_CSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_CSM_CSM_modeInterplay_long_conversion_allowed();
extern int SSM_ST_CSM_CSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_CSM_CSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_CSM_CSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_CSM_CSM_modeInterplay(void *pValue);
extern int release_SSM_ST_CSM_CSM_modeInterplay(void *pValue);
extern int copy_SSM_ST_CSM_CSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_CSM_CSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_1_Session_SM_else_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_double_conversion_allowed();
extern int SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_long_conversion_allowed();
extern int SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int release_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int copy_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_1_Session_SM_else_IfBlock1_Utils;

/****************************************************************
 ** SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1 
 ****************************************************************/
extern int SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_double_conversion_allowed();
extern int SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_long_conversion_allowed();
extern int SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int release_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int copy_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_handOver_with_2_Sessions_SM_then_IfBlock1_Utils;

/****************************************************************
 ** SSM_ST_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_ST_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Level_NTC_and_Mode_SN_double_conversion_allowed();
extern int SSM_ST_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Level_NTC_and_Mode_SN_long_conversion_allowed();
extern int SSM_ST_Level_NTC_and_Mode_SN_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Level_NTC_and_Mode_SN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Level_NTC_and_Mode_SN(void *pValue);
extern int release_SSM_ST_Level_NTC_and_Mode_SN(void *pValue);
extern int copy_SSM_ST_Level_NTC_and_Mode_SN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** SSM_ST_modeInterplay 
 ****************************************************************/
extern int SSM_ST_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_modeInterplay_double_conversion_allowed();
extern int SSM_ST_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_modeInterplay_long_conversion_allowed();
extern int SSM_ST_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_modeInterplay(void *pValue);
extern int release_SSM_ST_modeInterplay(void *pValue);
extern int copy_SSM_ST_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_Register_SM 
 ****************************************************************/
extern int SSM_ST_Register_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Register_SM_double_conversion_allowed();
extern int SSM_ST_Register_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Register_SM_long_conversion_allowed();
extern int SSM_ST_Register_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Register_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Register_SM(void *pValue);
extern int release_SSM_ST_Register_SM(void *pValue);
extern int copy_SSM_ST_Register_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Register_SM_Utils;

/****************************************************************
 ** SSM_ST_repeat_SM 
 ****************************************************************/
extern int SSM_ST_repeat_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_repeat_SM_double_conversion_allowed();
extern int SSM_ST_repeat_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_repeat_SM_long_conversion_allowed();
extern int SSM_ST_repeat_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_repeat_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_repeat_SM(void *pValue);
extern int release_SSM_ST_repeat_SM(void *pValue);
extern int copy_SSM_ST_repeat_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_repeat_SM_Utils;

/****************************************************************
 ** SSM_ST_Revoke_Procedure 
 ****************************************************************/
extern int SSM_ST_Revoke_Procedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Revoke_Procedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Revoke_Procedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Revoke_Procedure_double_conversion_allowed();
extern int SSM_ST_Revoke_Procedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Revoke_Procedure_long_conversion_allowed();
extern int SSM_ST_Revoke_Procedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Revoke_Procedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Revoke_Procedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Revoke_Procedure(void *pValue);
extern int release_SSM_ST_Revoke_Procedure(void *pValue);
extern int copy_SSM_ST_Revoke_Procedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Revoke_Procedure_Utils;

/****************************************************************
 ** SSM_ST_RSM_RSM_modeInterplay 
 ****************************************************************/
extern int SSM_ST_RSM_RSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_RSM_RSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_RSM_RSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_RSM_RSM_modeInterplay_double_conversion_allowed();
extern int SSM_ST_RSM_RSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_RSM_RSM_modeInterplay_long_conversion_allowed();
extern int SSM_ST_RSM_RSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_RSM_RSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_RSM_RSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_RSM_RSM_modeInterplay(void *pValue);
extern int release_SSM_ST_RSM_RSM_modeInterplay(void *pValue);
extern int copy_SSM_ST_RSM_RSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_RSM_RSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_Session_SM 
 ****************************************************************/
extern int SSM_ST_Session_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_Session_SM_double_conversion_allowed();
extern int SSM_ST_Session_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_Session_SM_long_conversion_allowed();
extern int SSM_ST_Session_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_Session_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_Session_SM(void *pValue);
extern int release_SSM_ST_Session_SM(void *pValue);
extern int copy_SSM_ST_Session_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_Session_SM_Utils;

/****************************************************************
 ** SSM_ST_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_ST_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_ST_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_ST_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_ST_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM1 
 ****************************************************************/
extern int SSM_ST_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM1_double_conversion_allowed();
extern int SSM_ST_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM1_long_conversion_allowed();
extern int SSM_ST_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM1(void *pValue);
extern int release_SSM_ST_SM1(void *pValue);
extern int copy_SSM_ST_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM1_Utils;

/****************************************************************
 ** SSM_ST_SM3_Awakness_of_Train_SM1 
 ****************************************************************/
extern int SSM_ST_SM3_Awakness_of_Train_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM3_Awakness_of_Train_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM3_Awakness_of_Train_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM3_Awakness_of_Train_SM1_double_conversion_allowed();
extern int SSM_ST_SM3_Awakness_of_Train_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM3_Awakness_of_Train_SM1_long_conversion_allowed();
extern int SSM_ST_SM3_Awakness_of_Train_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM3_Awakness_of_Train_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM3_Awakness_of_Train_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM3_Awakness_of_Train_SM1(void *pValue);
extern int release_SSM_ST_SM3_Awakness_of_Train_SM1(void *pValue);
extern int copy_SSM_ST_SM3_Awakness_of_Train_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM3_Awakness_of_Train_SM1_Utils;

/****************************************************************
 ** SSM_ST_SM4_TSM_modeInterplay 
 ****************************************************************/
extern int SSM_ST_SM4_TSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM4_TSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM4_TSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM4_TSM_modeInterplay_double_conversion_allowed();
extern int SSM_ST_SM4_TSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM4_TSM_modeInterplay_long_conversion_allowed();
extern int SSM_ST_SM4_TSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM4_TSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM4_TSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM4_TSM_modeInterplay(void *pValue);
extern int release_SSM_ST_SM4_TSM_modeInterplay(void *pValue);
extern int copy_SSM_ST_SM4_TSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM4_TSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_ST_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_ST_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_ST_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_ST_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_ST_SM_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_ST_SM_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_ST_SM_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_ST_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_ST_SM_Start_L1_L2_L3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Start_L1_L2_L3_double_conversion_allowed();
extern int SSM_ST_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Start_L1_L2_L3_long_conversion_allowed();
extern int SSM_ST_SM_Start_L1_L2_L3_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Start_L1_L2_L3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Start_L1_L2_L3(void *pValue);
extern int release_SSM_ST_SM_Start_L1_L2_L3(void *pValue);
extern int copy_SSM_ST_SM_Start_L1_L2_L3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** SSM_ST_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_ST_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_ST_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_ST_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_ST_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_ST_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_ST_SM_Train_Reversing_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Reversing_double_conversion_allowed();
extern int SSM_ST_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Train_Reversing_long_conversion_allowed();
extern int SSM_ST_SM_Train_Reversing_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Train_Reversing_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Train_Reversing(void *pValue);
extern int release_SSM_ST_SM_Train_Reversing(void *pValue);
extern int copy_SSM_ST_SM_Train_Reversing(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Reversing_Utils;

/****************************************************************
 ** SSM_ST_SM_Train_Trip 
 ****************************************************************/
extern int SSM_ST_SM_Train_Trip_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_ST_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_SM_Train_Trip_double_conversion_allowed();
extern int SSM_ST_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_SM_Train_Trip_long_conversion_allowed();
extern int SSM_ST_SM_Train_Trip_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_SM_Train_Trip_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_SM_Train_Trip(void *pValue);
extern int release_SSM_ST_SM_Train_Trip(void *pValue);
extern int copy_SSM_ST_SM_Train_Trip(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_ST_TimerStatus_SM 
 ****************************************************************/
extern int SSM_ST_TimerStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TimerStatus_SM_double_conversion_allowed();
extern int SSM_ST_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_TimerStatus_SM_long_conversion_allowed();
extern int SSM_ST_TimerStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_TimerStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_TimerStatus_SM(void *pValue);
extern int release_SSM_ST_TimerStatus_SM(void *pValue);
extern int copy_SSM_ST_TimerStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_TimerStatus_SM_Utils;

/****************************************************************
 ** SSM_ST_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_ST_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_ST_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_ST_TrainExitedFromRBCArea_SM_double_conversion_allowed();
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_ST_TrainExitedFromRBCArea_SM_long_conversion_allowed();
extern int SSM_ST_TrainExitedFromRBCArea_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_ST_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_ST_TrainExitedFromRBCArea_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_ST_TrainExitedFromRBCArea_SM(void *pValue);
extern int release_SSM_ST_TrainExitedFromRBCArea_SM(void *pValue);
extern int copy_SSM_ST_TrainExitedFromRBCArea_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_ST_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSM_TR_brake_Management 
 ****************************************************************/
extern int SSM_TR_brake_Management_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_brake_Management_string(const char *str, char **endptr);
extern int string_to_SSM_TR_brake_Management(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_brake_Management_double_conversion_allowed();
extern int SSM_TR_brake_Management_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_brake_Management_long_conversion_allowed();
extern int SSM_TR_brake_Management_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_brake_Management(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_brake_Management_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_brake_Management(void *pValue);
extern int release_SSM_TR_brake_Management(void *pValue);
extern int copy_SSM_TR_brake_Management(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_brake_Management_Utils;

/****************************************************************
 ** SSM_TR_connectionStatus_SM 
 ****************************************************************/
extern int SSM_TR_connectionStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_connectionStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_connectionStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_connectionStatus_SM_double_conversion_allowed();
extern int SSM_TR_connectionStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_connectionStatus_SM_long_conversion_allowed();
extern int SSM_TR_connectionStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_connectionStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_connectionStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_connectionStatus_SM(void *pValue);
extern int release_SSM_TR_connectionStatus_SM(void *pValue);
extern int copy_SSM_TR_connectionStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_connectionStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_CSM_CSM_modeInterplay 
 ****************************************************************/
extern int SSM_TR_CSM_CSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_CSM_CSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_CSM_CSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_CSM_CSM_modeInterplay_double_conversion_allowed();
extern int SSM_TR_CSM_CSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_CSM_CSM_modeInterplay_long_conversion_allowed();
extern int SSM_TR_CSM_CSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_CSM_CSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_CSM_CSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_CSM_CSM_modeInterplay(void *pValue);
extern int release_SSM_TR_CSM_CSM_modeInterplay(void *pValue);
extern int copy_SSM_TR_CSM_CSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_CSM_CSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_1_Session_SM_else_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_double_conversion_allowed();
extern int SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_long_conversion_allowed();
extern int SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int release_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(void *pValue);
extern int copy_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_1_Session_SM_else_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1 
 ****************************************************************/
extern int SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_double_conversion_allowed();
extern int SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_long_conversion_allowed();
extern int SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int release_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(void *pValue);
extern int copy_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_handOver_with_2_Sessions_SM_then_IfBlock1_Utils;

/****************************************************************
 ** SSM_TR_Level_NTC_and_Mode_SN 
 ****************************************************************/
extern int SSM_TR_Level_NTC_and_Mode_SN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Level_NTC_and_Mode_SN_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Level_NTC_and_Mode_SN(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Level_NTC_and_Mode_SN_double_conversion_allowed();
extern int SSM_TR_Level_NTC_and_Mode_SN_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Level_NTC_and_Mode_SN_long_conversion_allowed();
extern int SSM_TR_Level_NTC_and_Mode_SN_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Level_NTC_and_Mode_SN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Level_NTC_and_Mode_SN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Level_NTC_and_Mode_SN(void *pValue);
extern int release_SSM_TR_Level_NTC_and_Mode_SN(void *pValue);
extern int copy_SSM_TR_Level_NTC_and_Mode_SN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Level_NTC_and_Mode_SN_Utils;

/****************************************************************
 ** SSM_TR_modeInterplay 
 ****************************************************************/
extern int SSM_TR_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_modeInterplay_double_conversion_allowed();
extern int SSM_TR_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_modeInterplay_long_conversion_allowed();
extern int SSM_TR_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_modeInterplay(void *pValue);
extern int release_SSM_TR_modeInterplay(void *pValue);
extern int copy_SSM_TR_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_Register_SM 
 ****************************************************************/
extern int SSM_TR_Register_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Register_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Register_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Register_SM_double_conversion_allowed();
extern int SSM_TR_Register_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Register_SM_long_conversion_allowed();
extern int SSM_TR_Register_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Register_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Register_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Register_SM(void *pValue);
extern int release_SSM_TR_Register_SM(void *pValue);
extern int copy_SSM_TR_Register_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Register_SM_Utils;

/****************************************************************
 ** SSM_TR_repeat_SM 
 ****************************************************************/
extern int SSM_TR_repeat_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_repeat_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_repeat_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_repeat_SM_double_conversion_allowed();
extern int SSM_TR_repeat_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_repeat_SM_long_conversion_allowed();
extern int SSM_TR_repeat_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_repeat_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_repeat_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_repeat_SM(void *pValue);
extern int release_SSM_TR_repeat_SM(void *pValue);
extern int copy_SSM_TR_repeat_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_repeat_SM_Utils;

/****************************************************************
 ** SSM_TR_Revoke_Procedure 
 ****************************************************************/
extern int SSM_TR_Revoke_Procedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Revoke_Procedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Revoke_Procedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Revoke_Procedure_double_conversion_allowed();
extern int SSM_TR_Revoke_Procedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Revoke_Procedure_long_conversion_allowed();
extern int SSM_TR_Revoke_Procedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Revoke_Procedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Revoke_Procedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Revoke_Procedure(void *pValue);
extern int release_SSM_TR_Revoke_Procedure(void *pValue);
extern int copy_SSM_TR_Revoke_Procedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Revoke_Procedure_Utils;

/****************************************************************
 ** SSM_TR_RSM_RSM_modeInterplay 
 ****************************************************************/
extern int SSM_TR_RSM_RSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_RSM_RSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_RSM_RSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_RSM_RSM_modeInterplay_double_conversion_allowed();
extern int SSM_TR_RSM_RSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_RSM_RSM_modeInterplay_long_conversion_allowed();
extern int SSM_TR_RSM_RSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_RSM_RSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_RSM_RSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_RSM_RSM_modeInterplay(void *pValue);
extern int release_SSM_TR_RSM_RSM_modeInterplay(void *pValue);
extern int copy_SSM_TR_RSM_RSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_RSM_RSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_Session_SM 
 ****************************************************************/
extern int SSM_TR_Session_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_Session_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_Session_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_Session_SM_double_conversion_allowed();
extern int SSM_TR_Session_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_Session_SM_long_conversion_allowed();
extern int SSM_TR_Session_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_Session_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_Session_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_Session_SM(void *pValue);
extern int release_SSM_TR_Session_SM(void *pValue);
extern int copy_SSM_TR_Session_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_Session_SM_Utils;

/****************************************************************
 ** SSM_TR_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_TR_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_TR_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_TR_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_TR_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SM1 
 ****************************************************************/
extern int SSM_TR_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM1_double_conversion_allowed();
extern int SSM_TR_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM1_long_conversion_allowed();
extern int SSM_TR_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM1(void *pValue);
extern int release_SSM_TR_SM1(void *pValue);
extern int copy_SSM_TR_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM1_Utils;

/****************************************************************
 ** SSM_TR_SM3_Awakness_of_Train_SM1 
 ****************************************************************/
extern int SSM_TR_SM3_Awakness_of_Train_SM1_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM3_Awakness_of_Train_SM1_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM3_Awakness_of_Train_SM1(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM3_Awakness_of_Train_SM1_double_conversion_allowed();
extern int SSM_TR_SM3_Awakness_of_Train_SM1_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM3_Awakness_of_Train_SM1_long_conversion_allowed();
extern int SSM_TR_SM3_Awakness_of_Train_SM1_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM3_Awakness_of_Train_SM1(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM3_Awakness_of_Train_SM1_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM3_Awakness_of_Train_SM1(void *pValue);
extern int release_SSM_TR_SM3_Awakness_of_Train_SM1(void *pValue);
extern int copy_SSM_TR_SM3_Awakness_of_Train_SM1(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM3_Awakness_of_Train_SM1_Utils;

/****************************************************************
 ** SSM_TR_SM4_TSM_modeInterplay 
 ****************************************************************/
extern int SSM_TR_SM4_TSM_modeInterplay_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM4_TSM_modeInterplay_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM4_TSM_modeInterplay(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM4_TSM_modeInterplay_double_conversion_allowed();
extern int SSM_TR_SM4_TSM_modeInterplay_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM4_TSM_modeInterplay_long_conversion_allowed();
extern int SSM_TR_SM4_TSM_modeInterplay_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM4_TSM_modeInterplay(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM4_TSM_modeInterplay_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM4_TSM_modeInterplay(void *pValue);
extern int release_SSM_TR_SM4_TSM_modeInterplay(void *pValue);
extern int copy_SSM_TR_SM4_TSM_modeInterplay(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM4_TSM_modeInterplay_Utils;

/****************************************************************
 ** SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Current_Location_Current_Location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Futher_Location_Futher_location_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_Mode_Profile_By_Trackside 
 ****************************************************************/
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Mode_Profile_By_Trackside_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Mode_Profile_By_Trackside(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Mode_Profile_By_Trackside_double_conversion_allowed();
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Mode_Profile_By_Trackside_long_conversion_allowed();
extern int SSM_TR_SM_Mode_Profile_By_Trackside_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Mode_Profile_By_Trackside(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Mode_Profile_By_Trackside_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Mode_Profile_By_Trackside(void *pValue);
extern int release_SSM_TR_SM_Mode_Profile_By_Trackside(void *pValue);
extern int copy_SSM_TR_SM_Mode_Profile_By_Trackside(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Mode_Profile_By_Trackside_Utils;

/****************************************************************
 ** SSM_TR_SM_SH_Initiated_By_Driver 
 ****************************************************************/
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_SH_Initiated_By_Driver_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SH_Initiated_By_Driver(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SH_Initiated_By_Driver_double_conversion_allowed();
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_SH_Initiated_By_Driver_long_conversion_allowed();
extern int SSM_TR_SM_SH_Initiated_By_Driver_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_SH_Initiated_By_Driver(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_SH_Initiated_By_Driver_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_SH_Initiated_By_Driver(void *pValue);
extern int release_SSM_TR_SM_SH_Initiated_By_Driver(void *pValue);
extern int copy_SSM_TR_SM_SH_Initiated_By_Driver(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_SH_Initiated_By_Driver_Utils;

/****************************************************************
 ** SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_SoM_On_Procedure_On_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_TR_SM_Start_L1_L2_L3 
 ****************************************************************/
extern int SSM_TR_SM_Start_L1_L2_L3_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Start_L1_L2_L3_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Start_L1_L2_L3(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Start_L1_L2_L3_double_conversion_allowed();
extern int SSM_TR_SM_Start_L1_L2_L3_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Start_L1_L2_L3_long_conversion_allowed();
extern int SSM_TR_SM_Start_L1_L2_L3_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Start_L1_L2_L3(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Start_L1_L2_L3_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Start_L1_L2_L3(void *pValue);
extern int release_SSM_TR_SM_Start_L1_L2_L3(void *pValue);
extern int copy_SSM_TR_SM_Start_L1_L2_L3(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Start_L1_L2_L3_Utils;

/****************************************************************
 ** SSM_TR_SM_StartOfMissionProcedure 
 ****************************************************************/
extern int SSM_TR_SM_StartOfMissionProcedure_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_StartOfMissionProcedure_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_StartOfMissionProcedure(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_StartOfMissionProcedure_double_conversion_allowed();
extern int SSM_TR_SM_StartOfMissionProcedure_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_StartOfMissionProcedure_long_conversion_allowed();
extern int SSM_TR_SM_StartOfMissionProcedure_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_StartOfMissionProcedure(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_StartOfMissionProcedure_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_StartOfMissionProcedure(void *pValue);
extern int release_SSM_TR_SM_StartOfMissionProcedure(void *pValue);
extern int copy_SSM_TR_SM_StartOfMissionProcedure(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_StartOfMissionProcedure_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Reversing 
 ****************************************************************/
extern int SSM_TR_SM_Train_Reversing_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Train_Reversing_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Reversing(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Reversing_double_conversion_allowed();
extern int SSM_TR_SM_Train_Reversing_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Train_Reversing_long_conversion_allowed();
extern int SSM_TR_SM_Train_Reversing_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Train_Reversing(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Train_Reversing_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Train_Reversing(void *pValue);
extern int release_SSM_TR_SM_Train_Reversing(void *pValue);
extern int copy_SSM_TR_SM_Train_Reversing(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Reversing_Utils;

/****************************************************************
 ** SSM_TR_SM_Train_Trip 
 ****************************************************************/
extern int SSM_TR_SM_Train_Trip_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_SM_Train_Trip_string(const char *str, char **endptr);
extern int string_to_SSM_TR_SM_Train_Trip(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_SM_Train_Trip_double_conversion_allowed();
extern int SSM_TR_SM_Train_Trip_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_SM_Train_Trip_long_conversion_allowed();
extern int SSM_TR_SM_Train_Trip_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_SM_Train_Trip(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_SM_Train_Trip_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_SM_Train_Trip(void *pValue);
extern int release_SSM_TR_SM_Train_Trip(void *pValue);
extern int copy_SSM_TR_SM_Train_Trip(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_SM_Train_Trip_Utils;

/****************************************************************
 ** SSM_TR_TimerStatus_SM 
 ****************************************************************/
extern int SSM_TR_TimerStatus_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_TimerStatus_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TimerStatus_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TimerStatus_SM_double_conversion_allowed();
extern int SSM_TR_TimerStatus_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_TimerStatus_SM_long_conversion_allowed();
extern int SSM_TR_TimerStatus_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_TimerStatus_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_TimerStatus_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_TimerStatus_SM(void *pValue);
extern int release_SSM_TR_TimerStatus_SM(void *pValue);
extern int copy_SSM_TR_TimerStatus_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_TimerStatus_SM_Utils;

/****************************************************************
 ** SSM_TR_TrainExitedFromRBCArea_SM 
 ****************************************************************/
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSM_TR_TrainExitedFromRBCArea_SM_string(const char *str, char **endptr);
extern int string_to_SSM_TR_TrainExitedFromRBCArea_SM(const char *str, void *pValue, char **endptr);
extern int is_SSM_TR_TrainExitedFromRBCArea_SM_double_conversion_allowed();
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_double(const void *pValue, double *nValue);
extern int is_SSM_TR_TrainExitedFromRBCArea_SM_long_conversion_allowed();
extern int SSM_TR_TrainExitedFromRBCArea_SM_to_long(const void *pValue, long *nValue);
extern void compare_SSM_TR_TrainExitedFromRBCArea_SM(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSM_TR_TrainExitedFromRBCArea_SM_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSM_TR_TrainExitedFromRBCArea_SM(void *pValue);
extern int release_SSM_TR_TrainExitedFromRBCArea_SM(void *pValue);
extern int copy_SSM_TR_TrainExitedFromRBCArea_SM(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSM_TR_TrainExitedFromRBCArea_SM_Utils;

/****************************************************************
 ** SSP_cat_t_TA_MRSP 
 ****************************************************************/
extern int SSP_cat_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_cat_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_cat_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_cat_t_TA_MRSP_double_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_cat_t_TA_MRSP_long_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_cat_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_cat_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_cat_t_TA_MRSP(void *pValue);
extern int release_SSP_cat_t_TA_MRSP(void *pValue);
extern int copy_SSP_cat_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_cat_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_cat_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_cat_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_cat_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_cat_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_cat_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_cat_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_cat_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_cat_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_cat_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_cat_t_TA_MRSP_new(void *pValue);
extern int release_SSP_cat_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_cat_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_cat_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_matrix_t_TA_MRSP 
 ****************************************************************/
extern int SSP_matrix_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_matrix_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_matrix_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_matrix_t_TA_MRSP_double_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_matrix_t_TA_MRSP_long_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_matrix_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_matrix_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_matrix_t_TA_MRSP(void *pValue);
extern int release_SSP_matrix_t_TA_MRSP(void *pValue);
extern int copy_SSP_matrix_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_matrix_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_matrix_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_matrix_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_matrix_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_matrix_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_matrix_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_matrix_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_matrix_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_matrix_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_matrix_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_matrix_t_TA_MRSP_new(void *pValue);
extern int release_SSP_matrix_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_matrix_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_matrix_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_s_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_s_section_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_s_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_s_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_s_section_t_TA_MRSP_double_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_s_section_t_TA_MRSP_long_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_s_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_s_section_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_s_section_t_TA_MRSP(void *pValue);
extern int release_SSP_s_section_t_TA_MRSP(void *pValue);
extern int copy_SSP_s_section_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_s_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_s_section_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_s_section_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_s_section_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_s_section_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_s_section_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_s_section_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_s_section_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_s_section_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_s_section_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_s_section_t_TA_MRSP_new(void *pValue);
extern int release_SSP_s_section_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_s_section_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_s_section_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_section_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_section_t_TA_MRSP_double_conversion_allowed();
extern int SSP_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_section_t_TA_MRSP_long_conversion_allowed();
extern int SSP_section_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_section_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_section_t_TA_MRSP(void *pValue);
extern int release_SSP_section_t_TA_MRSP(void *pValue);
extern int copy_SSP_section_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_section_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_section_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_section_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_section_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_section_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_section_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_section_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_section_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_section_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_section_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_section_t_TA_MRSP_new(void *pValue);
extern int release_SSP_section_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_section_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_section_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSP_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSP_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSP_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSP_T_Packet_Types_Pkg_double_conversion_allowed();
extern int SSP_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SSP_T_Packet_Types_Pkg_long_conversion_allowed();
extern int SSP_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SSP_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_T_Packet_Types_Pkg(void *pValue);
extern int release_SSP_T_Packet_Types_Pkg(void *pValue);
extern int copy_SSP_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** SSP_t_section_t_TA_MRSP 
 ****************************************************************/
extern int SSP_t_section_t_TA_MRSP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_t_section_t_TA_MRSP_string(const char *str, char **endptr);
extern int string_to_SSP_t_section_t_TA_MRSP(const char *str, void *pValue, char **endptr);
extern int is_SSP_t_section_t_TA_MRSP_double_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_to_double(const void *pValue, double *nValue);
extern int is_SSP_t_section_t_TA_MRSP_long_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_to_long(const void *pValue, long *nValue);
extern void compare_SSP_t_section_t_TA_MRSP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_t_section_t_TA_MRSP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_t_section_t_TA_MRSP(void *pValue);
extern int release_SSP_t_section_t_TA_MRSP(void *pValue);
extern int copy_SSP_t_section_t_TA_MRSP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_t_section_t_TA_MRSP_Utils;

/****************************************************************
 ** SSP_t_section_t_TA_MRSP_new 
 ****************************************************************/
extern int SSP_t_section_t_TA_MRSP_new_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSP_t_section_t_TA_MRSP_new_string(const char *str, char **endptr);
extern int string_to_SSP_t_section_t_TA_MRSP_new(const char *str, void *pValue, char **endptr);
extern int is_SSP_t_section_t_TA_MRSP_new_double_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_new_to_double(const void *pValue, double *nValue);
extern int is_SSP_t_section_t_TA_MRSP_new_long_conversion_allowed();
extern int SSP_t_section_t_TA_MRSP_new_to_long(const void *pValue, long *nValue);
extern void compare_SSP_t_section_t_TA_MRSP_new(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSP_t_section_t_TA_MRSP_new_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSP_t_section_t_TA_MRSP_new(void *pValue);
extern int release_SSP_t_section_t_TA_MRSP_new(void *pValue);
extern int copy_SSP_t_section_t_TA_MRSP_new(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSP_t_section_t_TA_MRSP_new_Utils;

/****************************************************************
 ** SSPArray_T_Packet_Types_Pkg 
 ****************************************************************/
extern int SSPArray_T_Packet_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SSPArray_T_Packet_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SSPArray_T_Packet_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SSPArray_T_Packet_Types_Pkg_double_conversion_allowed();
extern int SSPArray_T_Packet_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SSPArray_T_Packet_Types_Pkg_long_conversion_allowed();
extern int SSPArray_T_Packet_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SSPArray_T_Packet_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SSPArray_T_Packet_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SSPArray_T_Packet_Types_Pkg(void *pValue);
extern int release_SSPArray_T_Packet_Types_Pkg(void *pValue);
extern int copy_SSPArray_T_Packet_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SSPArray_T_Packet_Types_Pkg_Utils;

/****************************************************************
 ** StaticSpeedProfile_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_StaticSpeedProfile_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedProfile_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedProfile_t_TrackAtlasTypes_double_conversion_allowed();
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_StaticSpeedProfile_t_TrackAtlasTypes_long_conversion_allowed();
extern int StaticSpeedProfile_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_StaticSpeedProfile_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_StaticSpeedProfile_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_StaticSpeedProfile_t_TrackAtlasTypes(void *pValue);
extern int release_StaticSpeedProfile_t_TrackAtlasTypes(void *pValue);
extern int copy_StaticSpeedProfile_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_StaticSpeedProfile_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** StaticSpeedSection_t_TrackAtlasTypes 
 ****************************************************************/
extern int StaticSpeedSection_t_TrackAtlasTypes_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_StaticSpeedSection_t_TrackAtlasTypes_string(const char *str, char **endptr);
extern int string_to_StaticSpeedSection_t_TrackAtlasTypes(const char *str, void *pValue, char **endptr);
extern int is_StaticSpeedSection_t_TrackAtlasTypes_double_conversion_allowed();
extern int StaticSpeedSection_t_TrackAtlasTypes_to_double(const void *pValue, double *nValue);
extern int is_StaticSpeedSection_t_TrackAtlasTypes_long_conversion_allowed();
extern int StaticSpeedSection_t_TrackAtlasTypes_to_long(const void *pValue, long *nValue);
extern void compare_StaticSpeedSection_t_TrackAtlasTypes(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_StaticSpeedSection_t_TrackAtlasTypes_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_StaticSpeedSection_t_TrackAtlasTypes(void *pValue);
extern int release_StaticSpeedSection_t_TrackAtlasTypes(void *pValue);
extern int copy_StaticSpeedSection_t_TrackAtlasTypes(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_StaticSpeedSection_t_TrackAtlasTypes_Utils;

/****************************************************************
 ** sTractionIdentity_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_sTractionIdentity_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_sTractionIdentity_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_sTractionIdentity_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_sTractionIdentity_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int sTractionIdentity_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_sTractionIdentity_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_sTractionIdentity_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_sTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_sTractionIdentity_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_sTractionIdentity_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_sTractionIdentity_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** struct_273277 
 ****************************************************************/
extern int struct_273277_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_273277_string(const char *str, char **endptr);
extern int string_to_struct_273277(const char *str, void *pValue, char **endptr);
extern int is_struct_273277_double_conversion_allowed();
extern int struct_273277_to_double(const void *pValue, double *nValue);
extern int is_struct_273277_long_conversion_allowed();
extern int struct_273277_to_long(const void *pValue, long *nValue);
extern void compare_struct_273277(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_273277_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_273277(void *pValue);
extern int release_struct_273277(void *pValue);
extern int copy_struct_273277(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_273277_Utils;

/****************************************************************
 ** struct_273626 
 ****************************************************************/
extern int struct_273626_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_273626_string(const char *str, char **endptr);
extern int string_to_struct_273626(const char *str, void *pValue, char **endptr);
extern int is_struct_273626_double_conversion_allowed();
extern int struct_273626_to_double(const void *pValue, double *nValue);
extern int is_struct_273626_long_conversion_allowed();
extern int struct_273626_to_long(const void *pValue, long *nValue);
extern void compare_struct_273626(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_273626_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_273626(void *pValue);
extern int release_struct_273626(void *pValue);
extern int copy_struct_273626(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_273626_Utils;

/****************************************************************
 ** struct_273993 
 ****************************************************************/
extern int struct_273993_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_273993_string(const char *str, char **endptr);
extern int string_to_struct_273993(const char *str, void *pValue, char **endptr);
extern int is_struct_273993_double_conversion_allowed();
extern int struct_273993_to_double(const void *pValue, double *nValue);
extern int is_struct_273993_long_conversion_allowed();
extern int struct_273993_to_long(const void *pValue, long *nValue);
extern void compare_struct_273993(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_273993_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_273993(void *pValue);
extern int release_struct_273993(void *pValue);
extern int copy_struct_273993(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_273993_Utils;

/****************************************************************
 ** struct_274389 
 ****************************************************************/
extern int struct_274389_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_274389_string(const char *str, char **endptr);
extern int string_to_struct_274389(const char *str, void *pValue, char **endptr);
extern int is_struct_274389_double_conversion_allowed();
extern int struct_274389_to_double(const void *pValue, double *nValue);
extern int is_struct_274389_long_conversion_allowed();
extern int struct_274389_to_long(const void *pValue, long *nValue);
extern void compare_struct_274389(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_274389_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_274389(void *pValue);
extern int release_struct_274389(void *pValue);
extern int copy_struct_274389(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_274389_Utils;

/****************************************************************
 ** struct_274688 
 ****************************************************************/
extern int struct_274688_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_274688_string(const char *str, char **endptr);
extern int string_to_struct_274688(const char *str, void *pValue, char **endptr);
extern int is_struct_274688_double_conversion_allowed();
extern int struct_274688_to_double(const void *pValue, double *nValue);
extern int is_struct_274688_long_conversion_allowed();
extern int struct_274688_to_long(const void *pValue, long *nValue);
extern void compare_struct_274688(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_274688_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_274688(void *pValue);
extern int release_struct_274688(void *pValue);
extern int copy_struct_274688(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_274688_Utils;

/****************************************************************
 ** struct_274806 
 ****************************************************************/
extern int struct_274806_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_274806_string(const char *str, char **endptr);
extern int string_to_struct_274806(const char *str, void *pValue, char **endptr);
extern int is_struct_274806_double_conversion_allowed();
extern int struct_274806_to_double(const void *pValue, double *nValue);
extern int is_struct_274806_long_conversion_allowed();
extern int struct_274806_to_long(const void *pValue, long *nValue);
extern void compare_struct_274806(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_274806_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_274806(void *pValue);
extern int release_struct_274806(void *pValue);
extern int copy_struct_274806(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_274806_Utils;

/****************************************************************
 ** struct_274867 
 ****************************************************************/
extern int struct_274867_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_274867_string(const char *str, char **endptr);
extern int string_to_struct_274867(const char *str, void *pValue, char **endptr);
extern int is_struct_274867_double_conversion_allowed();
extern int struct_274867_to_double(const void *pValue, double *nValue);
extern int is_struct_274867_long_conversion_allowed();
extern int struct_274867_to_long(const void *pValue, long *nValue);
extern void compare_struct_274867(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_274867_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_274867(void *pValue);
extern int release_struct_274867(void *pValue);
extern int copy_struct_274867(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_274867_Utils;

/****************************************************************
 ** struct_274908 
 ****************************************************************/
extern int struct_274908_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_274908_string(const char *str, char **endptr);
extern int string_to_struct_274908(const char *str, void *pValue, char **endptr);
extern int is_struct_274908_double_conversion_allowed();
extern int struct_274908_to_double(const void *pValue, double *nValue);
extern int is_struct_274908_long_conversion_allowed();
extern int struct_274908_to_long(const void *pValue, long *nValue);
extern void compare_struct_274908(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_274908_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_274908(void *pValue);
extern int release_struct_274908(void *pValue);
extern int copy_struct_274908(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_274908_Utils;

/****************************************************************
 ** struct_275034 
 ****************************************************************/
extern int struct_275034_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_275034_string(const char *str, char **endptr);
extern int string_to_struct_275034(const char *str, void *pValue, char **endptr);
extern int is_struct_275034_double_conversion_allowed();
extern int struct_275034_to_double(const void *pValue, double *nValue);
extern int is_struct_275034_long_conversion_allowed();
extern int struct_275034_to_long(const void *pValue, long *nValue);
extern void compare_struct_275034(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_275034_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_275034(void *pValue);
extern int release_struct_275034(void *pValue);
extern int copy_struct_275034(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_275034_Utils;

/****************************************************************
 ** struct_275228 
 ****************************************************************/
extern int struct_275228_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_275228_string(const char *str, char **endptr);
extern int string_to_struct_275228(const char *str, void *pValue, char **endptr);
extern int is_struct_275228_double_conversion_allowed();
extern int struct_275228_to_double(const void *pValue, double *nValue);
extern int is_struct_275228_long_conversion_allowed();
extern int struct_275228_to_long(const void *pValue, long *nValue);
extern void compare_struct_275228(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_275228_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_275228(void *pValue);
extern int release_struct_275228(void *pValue);
extern int copy_struct_275228(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_275228_Utils;

/****************************************************************
 ** struct_275282 
 ****************************************************************/
extern int struct_275282_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_275282_string(const char *str, char **endptr);
extern int string_to_struct_275282(const char *str, void *pValue, char **endptr);
extern int is_struct_275282_double_conversion_allowed();
extern int struct_275282_to_double(const void *pValue, double *nValue);
extern int is_struct_275282_long_conversion_allowed();
extern int struct_275282_to_long(const void *pValue, long *nValue);
extern void compare_struct_275282(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_275282_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_275282(void *pValue);
extern int release_struct_275282(void *pValue);
extern int copy_struct_275282(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_275282_Utils;

/****************************************************************
 ** struct_275303 
 ****************************************************************/
extern int struct_275303_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_275303_string(const char *str, char **endptr);
extern int string_to_struct_275303(const char *str, void *pValue, char **endptr);
extern int is_struct_275303_double_conversion_allowed();
extern int struct_275303_to_double(const void *pValue, double *nValue);
extern int is_struct_275303_long_conversion_allowed();
extern int struct_275303_to_long(const void *pValue, long *nValue);
extern void compare_struct_275303(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_275303_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_275303(void *pValue);
extern int release_struct_275303(void *pValue);
extern int copy_struct_275303(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_275303_Utils;

/****************************************************************
 ** struct_275675 
 ****************************************************************/
extern int struct_275675_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_275675_string(const char *str, char **endptr);
extern int string_to_struct_275675(const char *str, void *pValue, char **endptr);
extern int is_struct_275675_double_conversion_allowed();
extern int struct_275675_to_double(const void *pValue, double *nValue);
extern int is_struct_275675_long_conversion_allowed();
extern int struct_275675_to_long(const void *pValue, long *nValue);
extern void compare_struct_275675(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_275675_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_275675(void *pValue);
extern int release_struct_275675(void *pValue);
extern int copy_struct_275675(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_275675_Utils;

/****************************************************************
 ** struct_276076 
 ****************************************************************/
extern int struct_276076_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_276076_string(const char *str, char **endptr);
extern int string_to_struct_276076(const char *str, void *pValue, char **endptr);
extern int is_struct_276076_double_conversion_allowed();
extern int struct_276076_to_double(const void *pValue, double *nValue);
extern int is_struct_276076_long_conversion_allowed();
extern int struct_276076_to_long(const void *pValue, long *nValue);
extern void compare_struct_276076(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_276076_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_276076(void *pValue);
extern int release_struct_276076(void *pValue);
extern int copy_struct_276076(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_276076_Utils;

/****************************************************************
 ** struct_277960 
 ****************************************************************/
extern int struct_277960_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_277960_string(const char *str, char **endptr);
extern int string_to_struct_277960(const char *str, void *pValue, char **endptr);
extern int is_struct_277960_double_conversion_allowed();
extern int struct_277960_to_double(const void *pValue, double *nValue);
extern int is_struct_277960_long_conversion_allowed();
extern int struct_277960_to_long(const void *pValue, long *nValue);
extern void compare_struct_277960(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_277960_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_277960(void *pValue);
extern int release_struct_277960(void *pValue);
extern int copy_struct_277960(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_277960_Utils;

/****************************************************************
 ** struct_278116 
 ****************************************************************/
extern int struct_278116_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_278116_string(const char *str, char **endptr);
extern int string_to_struct_278116(const char *str, void *pValue, char **endptr);
extern int is_struct_278116_double_conversion_allowed();
extern int struct_278116_to_double(const void *pValue, double *nValue);
extern int is_struct_278116_long_conversion_allowed();
extern int struct_278116_to_long(const void *pValue, long *nValue);
extern void compare_struct_278116(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_278116_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_278116(void *pValue);
extern int release_struct_278116(void *pValue);
extern int copy_struct_278116(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_278116_Utils;

/****************************************************************
 ** struct_278367 
 ****************************************************************/
extern int struct_278367_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_278367_string(const char *str, char **endptr);
extern int string_to_struct_278367(const char *str, void *pValue, char **endptr);
extern int is_struct_278367_double_conversion_allowed();
extern int struct_278367_to_double(const void *pValue, double *nValue);
extern int is_struct_278367_long_conversion_allowed();
extern int struct_278367_to_long(const void *pValue, long *nValue);
extern void compare_struct_278367(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_278367_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_278367(void *pValue);
extern int release_struct_278367(void *pValue);
extern int copy_struct_278367(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_278367_Utils;

/****************************************************************
 ** struct_278835 
 ****************************************************************/
extern int struct_278835_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_278835_string(const char *str, char **endptr);
extern int string_to_struct_278835(const char *str, void *pValue, char **endptr);
extern int is_struct_278835_double_conversion_allowed();
extern int struct_278835_to_double(const void *pValue, double *nValue);
extern int is_struct_278835_long_conversion_allowed();
extern int struct_278835_to_long(const void *pValue, long *nValue);
extern void compare_struct_278835(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_278835_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_278835(void *pValue);
extern int release_struct_278835(void *pValue);
extern int copy_struct_278835(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_278835_Utils;

/****************************************************************
 ** struct_278986 
 ****************************************************************/
extern int struct_278986_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_278986_string(const char *str, char **endptr);
extern int string_to_struct_278986(const char *str, void *pValue, char **endptr);
extern int is_struct_278986_double_conversion_allowed();
extern int struct_278986_to_double(const void *pValue, double *nValue);
extern int is_struct_278986_long_conversion_allowed();
extern int struct_278986_to_long(const void *pValue, long *nValue);
extern void compare_struct_278986(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_278986_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_278986(void *pValue);
extern int release_struct_278986(void *pValue);
extern int copy_struct_278986(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_278986_Utils;

/****************************************************************
 ** struct_279025 
 ****************************************************************/
extern int struct_279025_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_279025_string(const char *str, char **endptr);
extern int string_to_struct_279025(const char *str, void *pValue, char **endptr);
extern int is_struct_279025_double_conversion_allowed();
extern int struct_279025_to_double(const void *pValue, double *nValue);
extern int is_struct_279025_long_conversion_allowed();
extern int struct_279025_to_long(const void *pValue, long *nValue);
extern void compare_struct_279025(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_279025_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_279025(void *pValue);
extern int release_struct_279025(void *pValue);
extern int copy_struct_279025(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_279025_Utils;

/****************************************************************
 ** struct_279212 
 ****************************************************************/
extern int struct_279212_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_279212_string(const char *str, char **endptr);
extern int string_to_struct_279212(const char *str, void *pValue, char **endptr);
extern int is_struct_279212_double_conversion_allowed();
extern int struct_279212_to_double(const void *pValue, double *nValue);
extern int is_struct_279212_long_conversion_allowed();
extern int struct_279212_to_long(const void *pValue, long *nValue);
extern void compare_struct_279212(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_279212_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_279212(void *pValue);
extern int release_struct_279212(void *pValue);
extern int copy_struct_279212(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_279212_Utils;

/****************************************************************
 ** struct_279611 
 ****************************************************************/
extern int struct_279611_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_struct_279611_string(const char *str, char **endptr);
extern int string_to_struct_279611(const char *str, void *pValue, char **endptr);
extern int is_struct_279611_double_conversion_allowed();
extern int struct_279611_to_double(const void *pValue, double *nValue);
extern int is_struct_279611_long_conversion_allowed();
extern int struct_279611_to_long(const void *pValue, long *nValue);
extern void compare_struct_279611(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_struct_279611_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_struct_279611(void *pValue);
extern int release_struct_279611(void *pValue);
extern int copy_struct_279611(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_struct_279611_Utils;

/****************************************************************
 ** SupervisionStatus_T_SDM_Types_Pkg 
 ****************************************************************/
extern int SupervisionStatus_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SupervisionStatus_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_SupervisionStatus_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SupervisionStatus_T_SDM_Types_Pkg_double_conversion_allowed();
extern int SupervisionStatus_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SupervisionStatus_T_SDM_Types_Pkg_long_conversion_allowed();
extern int SupervisionStatus_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SupervisionStatus_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SupervisionStatus_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SupervisionStatus_T_SDM_Types_Pkg(void *pValue);
extern int release_SupervisionStatus_T_SDM_Types_Pkg(void *pValue);
extern int copy_SupervisionStatus_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SupervisionStatus_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** SystemTime_T_ProvidePositionReport_Pkg 
 ****************************************************************/
extern int SystemTime_T_ProvidePositionReport_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_SystemTime_T_ProvidePositionReport_Pkg_string(const char *str, char **endptr);
extern int string_to_SystemTime_T_ProvidePositionReport_Pkg(const char *str, void *pValue, char **endptr);
extern int is_SystemTime_T_ProvidePositionReport_Pkg_double_conversion_allowed();
extern int SystemTime_T_ProvidePositionReport_Pkg_to_double(const void *pValue, double *nValue);
extern int is_SystemTime_T_ProvidePositionReport_Pkg_long_conversion_allowed();
extern int SystemTime_T_ProvidePositionReport_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_SystemTime_T_ProvidePositionReport_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_SystemTime_T_ProvidePositionReport_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_SystemTime_T_ProvidePositionReport_Pkg(void *pValue);
extern int release_SystemTime_T_ProvidePositionReport_Pkg(void *pValue);
extern int copy_SystemTime_T_ProvidePositionReport_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_SystemTime_T_ProvidePositionReport_Pkg_Utils;

/****************************************************************
 ** T_AcknoledgementRequest_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_AcknoledgementRequest_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_AnnouncedLevel_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_AnnouncedLevel_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_AnnouncedLevel_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_AnnouncedLevel_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** t_Brake_t_SDMModelPkg 
 ****************************************************************/
extern int t_Brake_t_SDMModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_t_Brake_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_Brake_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_Brake_t_SDMModelPkg_double_conversion_allowed();
extern int t_Brake_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int is_t_Brake_t_SDMModelPkg_long_conversion_allowed();
extern int t_Brake_t_SDMModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_t_Brake_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_t_Brake_t_SDMModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_t_Brake_t_SDMModelPkg(void *pValue);
extern int release_t_Brake_t_SDMModelPkg(void *pValue);
extern int copy_t_Brake_t_SDMModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_t_Brake_t_SDMModelPkg_Utils;

/****************************************************************
 ** t_BrakeVt_t_SDMModelPkg 
 ****************************************************************/
extern int t_BrakeVt_t_SDMModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_t_BrakeVt_t_SDMModelPkg_string(const char *str, char **endptr);
extern int string_to_t_BrakeVt_t_SDMModelPkg(const char *str, void *pValue, char **endptr);
extern int is_t_BrakeVt_t_SDMModelPkg_double_conversion_allowed();
extern int t_BrakeVt_t_SDMModelPkg_to_double(const void *pValue, double *nValue);
extern int is_t_BrakeVt_t_SDMModelPkg_long_conversion_allowed();
extern int t_BrakeVt_t_SDMModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_t_BrakeVt_t_SDMModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_t_BrakeVt_t_SDMModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_t_BrakeVt_t_SDMModelPkg(void *pValue);
extern int release_t_BrakeVt_t_SDMModelPkg(void *pValue);
extern int copy_t_BrakeVt_t_SDMModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_t_BrakeVt_t_SDMModelPkg_Utils;

/****************************************************************
 ** T_CYCLOC 
 ****************************************************************/
extern int T_CYCLOC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_CYCLOC_string(const char *str, char **endptr);
extern int string_to_T_CYCLOC(const char *str, void *pValue, char **endptr);
extern int is_T_CYCLOC_double_conversion_allowed();
extern int T_CYCLOC_to_double(const void *pValue, double *nValue);
extern int is_T_CYCLOC_long_conversion_allowed();
extern int T_CYCLOC_to_long(const void *pValue, long *nValue);
extern void compare_T_CYCLOC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_CYCLOC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_CYCLOC(void *pValue);
extern int release_T_CYCLOC(void *pValue);
extern int copy_T_CYCLOC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_CYCLOC_Utils;

/****************************************************************
 ** T_CYCRQST 
 ****************************************************************/
extern int T_CYCRQST_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_CYCRQST_string(const char *str, char **endptr);
extern int string_to_T_CYCRQST(const char *str, void *pValue, char **endptr);
extern int is_T_CYCRQST_double_conversion_allowed();
extern int T_CYCRQST_to_double(const void *pValue, double *nValue);
extern int is_T_CYCRQST_long_conversion_allowed();
extern int T_CYCRQST_to_long(const void *pValue, long *nValue);
extern void compare_T_CYCRQST(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_CYCRQST_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_CYCRQST(void *pValue);
extern int release_T_CYCRQST(void *pValue);
extern int copy_T_CYCRQST(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_CYCRQST_Utils;

/****************************************************************
 ** T_Data_From_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_DMI_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_DMI_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_DMI_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_DMI_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_DMI_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_F2_functions_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_F2_functions_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Localisation_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Localisation_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Localisation_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Localisation_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Speed_Supervision_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_STM_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_STM_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_STM_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_STM_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_STM_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_STM_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_STM_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_STM_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_STM_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_STM_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_STM_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_STM_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_MASSPGradient_Available_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_Mess_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_Packet_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_From_Track_To_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_BG_Management_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_To_BG_Management_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Data_To_DMI_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Data_To_DMI_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Data_To_DMI_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Data_To_DMI_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Data_To_DMI_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Data_To_DMI_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Data_To_DMI_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Data_To_DMI_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Data_To_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Data_To_DMI_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Data_To_DMI_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Data_To_DMI_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_ENDTIMER 
 ****************************************************************/
extern int T_ENDTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_ENDTIMER_string(const char *str, char **endptr);
extern int string_to_T_ENDTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_ENDTIMER_double_conversion_allowed();
extern int T_ENDTIMER_to_double(const void *pValue, double *nValue);
extern int is_T_ENDTIMER_long_conversion_allowed();
extern int T_ENDTIMER_to_long(const void *pValue, long *nValue);
extern void compare_T_ENDTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_ENDTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_ENDTIMER(void *pValue);
extern int release_T_ENDTIMER(void *pValue);
extern int copy_T_ENDTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_ENDTIMER_Utils;

/****************************************************************
 ** T_ERTMS_capabilities_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_ERTMS_capabilities_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int T_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int T_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int T_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_T_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_T_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** T_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_T_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int T_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_T_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_T_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** T_LevelTansitionInfo_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LevelTansitionInfo_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LevelTransition_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_LevelTransition_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_LevelTransition_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_LevelTransition_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LevelTransition_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LevelTransition_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_LevelTransition_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_LevelTransition_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LevelTransition_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LevelTransition_PriorityTable_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_LOA 
 ****************************************************************/
extern int T_LOA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_LOA_string(const char *str, char **endptr);
extern int string_to_T_LOA(const char *str, void *pValue, char **endptr);
extern int is_T_LOA_double_conversion_allowed();
extern int T_LOA_to_double(const void *pValue, double *nValue);
extern int is_T_LOA_long_conversion_allowed();
extern int T_LOA_to_long(const void *pValue, long *nValue);
extern void compare_T_LOA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_LOA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_LOA(void *pValue);
extern int release_T_LOA(void *pValue);
extern int copy_T_LOA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_LOA_Utils;

/****************************************************************
 ** T_MA_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_MA_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_MA_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_MA_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_MA_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_MA_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_MA_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_MA_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_MA_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_MA_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_MA_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_MA_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_MA_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_MA_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_MAR 
 ****************************************************************/
extern int T_MAR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_MAR_string(const char *str, char **endptr);
extern int string_to_T_MAR(const char *str, void *pValue, char **endptr);
extern int is_T_MAR_double_conversion_allowed();
extern int T_MAR_to_double(const void *pValue, double *nValue);
extern int is_T_MAR_long_conversion_allowed();
extern int T_MAR_to_long(const void *pValue, long *nValue);
extern void compare_T_MAR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_MAR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_MAR(void *pValue);
extern int release_T_MAR(void *pValue);
extern int copy_T_MAR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_MAR_Utils;

/****************************************************************
 ** T_Mode_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Level_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Level_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Level_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Level_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Level_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Level_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Level_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Level_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Level_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Level_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Level_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Profile_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Profile_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Profile_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Profile_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Profile_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Profile_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Profile_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Profile_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Profile_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_Mode_Profile_Table_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Mode_Profile_Table_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_NVCONTACT 
 ****************************************************************/
extern int T_NVCONTACT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_NVCONTACT_string(const char *str, char **endptr);
extern int string_to_T_NVCONTACT(const char *str, void *pValue, char **endptr);
extern int is_T_NVCONTACT_double_conversion_allowed();
extern int T_NVCONTACT_to_double(const void *pValue, double *nValue);
extern int is_T_NVCONTACT_long_conversion_allowed();
extern int T_NVCONTACT_to_long(const void *pValue, long *nValue);
extern void compare_T_NVCONTACT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_NVCONTACT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_NVCONTACT(void *pValue);
extern int release_T_NVCONTACT(void *pValue);
extern int copy_T_NVCONTACT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_NVCONTACT_Utils;

/****************************************************************
 ** T_NVOVTRP 
 ****************************************************************/
extern int T_NVOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_NVOVTRP_string(const char *str, char **endptr);
extern int string_to_T_NVOVTRP(const char *str, void *pValue, char **endptr);
extern int is_T_NVOVTRP_double_conversion_allowed();
extern int T_NVOVTRP_to_double(const void *pValue, double *nValue);
extern int is_T_NVOVTRP_long_conversion_allowed();
extern int T_NVOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_T_NVOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_NVOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_NVOVTRP(void *pValue);
extern int release_T_NVOVTRP(void *pValue);
extern int copy_T_NVOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_NVOVTRP_Utils;

/****************************************************************
 ** T_OL 
 ****************************************************************/
extern int T_OL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_OL_string(const char *str, char **endptr);
extern int string_to_T_OL(const char *str, void *pValue, char **endptr);
extern int is_T_OL_double_conversion_allowed();
extern int T_OL_to_double(const void *pValue, double *nValue);
extern int is_T_OL_long_conversion_allowed();
extern int T_OL_to_long(const void *pValue, long *nValue);
extern void compare_T_OL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_OL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_OL(void *pValue);
extern int release_T_OL(void *pValue);
extern int copy_T_OL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_OL_Utils;

/****************************************************************
 ** T_Reversing_Data_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_Reversing_Data_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_Reversing_Data_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_Reversing_Data_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_Reversing_Data_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_Reversing_Data_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_Reversing_Data_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_Reversing_Data_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_Reversing_Data_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_Reversing_Data_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_Reversing_Data_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_Reversing_Data_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** T_SECTIONTIMER 
 ****************************************************************/
extern int T_SECTIONTIMER_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_SECTIONTIMER_string(const char *str, char **endptr);
extern int string_to_T_SECTIONTIMER(const char *str, void *pValue, char **endptr);
extern int is_T_SECTIONTIMER_double_conversion_allowed();
extern int T_SECTIONTIMER_to_double(const void *pValue, double *nValue);
extern int is_T_SECTIONTIMER_long_conversion_allowed();
extern int T_SECTIONTIMER_to_long(const void *pValue, long *nValue);
extern void compare_T_SECTIONTIMER(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_SECTIONTIMER_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_SECTIONTIMER(void *pValue);
extern int release_T_SECTIONTIMER(void *pValue);
extern int copy_T_SECTIONTIMER(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_SECTIONTIMER_Utils;

/****************************************************************
 ** T_TIMEOUTRQST 
 ****************************************************************/
extern int T_TIMEOUTRQST_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_TIMEOUTRQST_string(const char *str, char **endptr);
extern int string_to_T_TIMEOUTRQST(const char *str, void *pValue, char **endptr);
extern int is_T_TIMEOUTRQST_double_conversion_allowed();
extern int T_TIMEOUTRQST_to_double(const void *pValue, double *nValue);
extern int is_T_TIMEOUTRQST_long_conversion_allowed();
extern int T_TIMEOUTRQST_to_long(const void *pValue, long *nValue);
extern void compare_T_TIMEOUTRQST(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_TIMEOUTRQST_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_TIMEOUTRQST(void *pValue);
extern int release_T_TIMEOUTRQST(void *pValue);
extern int copy_T_TIMEOUTRQST(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_TIMEOUTRQST_Utils;

/****************************************************************
 ** T_trac_t_TargetLimits_Pkg 
 ****************************************************************/
extern int T_trac_t_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_trac_t_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_T_trac_t_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_trac_t_TargetLimits_Pkg_double_conversion_allowed();
extern int T_trac_t_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_trac_t_TargetLimits_Pkg_long_conversion_allowed();
extern int T_trac_t_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_trac_t_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_trac_t_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_trac_t_TargetLimits_Pkg(void *pValue);
extern int release_T_trac_t_TargetLimits_Pkg(void *pValue);
extern int copy_T_trac_t_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_trac_t_TargetLimits_Pkg_Utils;

/****************************************************************
 ** T_TRAIN 
 ****************************************************************/
extern int T_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_TRAIN_string(const char *str, char **endptr);
extern int string_to_T_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_T_TRAIN_double_conversion_allowed();
extern int T_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_T_TRAIN_long_conversion_allowed();
extern int T_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_T_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_TRAIN(void *pValue);
extern int release_T_TRAIN(void *pValue);
extern int copy_T_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_TRAIN_Utils;

/****************************************************************
 ** T_TransitionType_Level_And_Mode_Types_Pkg 
 ****************************************************************/
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_T_TransitionType_Level_And_Mode_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_T_TransitionType_Level_And_Mode_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_T_TransitionType_Level_And_Mode_Types_Pkg_double_conversion_allowed();
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_T_TransitionType_Level_And_Mode_Types_Pkg_long_conversion_allowed();
extern int T_TransitionType_Level_And_Mode_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_T_TransitionType_Level_And_Mode_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_T_TransitionType_Level_And_Mode_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_T_TransitionType_Level_And_Mode_Types_Pkg(void *pValue);
extern int release_T_TransitionType_Level_And_Mode_Types_Pkg(void *pValue);
extern int copy_T_TransitionType_Level_And_Mode_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_T_TransitionType_Level_And_Mode_Types_Pkg_Utils;

/****************************************************************
 ** Target_list_MRSP_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_list_MRSP_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Target_list_MRSP_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_list_MRSP_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_list_MRSP_real_T_TargetManagement_types_double_conversion_allowed();
extern int Target_list_MRSP_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_Target_list_MRSP_real_T_TargetManagement_types_long_conversion_allowed();
extern int Target_list_MRSP_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_Target_list_MRSP_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Target_list_MRSP_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Target_list_MRSP_real_T_TargetManagement_types(void *pValue);
extern int release_Target_list_MRSP_real_T_TargetManagement_types(void *pValue);
extern int copy_Target_list_MRSP_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Target_list_MRSP_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_real_T_TargetManagement_types 
 ****************************************************************/
extern int Target_real_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Target_real_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_real_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_real_T_TargetManagement_types_double_conversion_allowed();
extern int Target_real_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_Target_real_T_TargetManagement_types_long_conversion_allowed();
extern int Target_real_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_Target_real_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Target_real_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Target_real_T_TargetManagement_types(void *pValue);
extern int release_Target_real_T_TargetManagement_types(void *pValue);
extern int copy_Target_real_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Target_real_T_TargetManagement_types_Utils;

/****************************************************************
 ** Target_T_TargetManagement_types 
 ****************************************************************/
extern int Target_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Target_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_Target_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_Target_T_TargetManagement_types_double_conversion_allowed();
extern int Target_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_Target_T_TargetManagement_types_long_conversion_allowed();
extern int Target_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_Target_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Target_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Target_T_TargetManagement_types(void *pValue);
extern int release_Target_T_TargetManagement_types(void *pValue);
extern int copy_Target_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Target_T_TargetManagement_types_Utils;

/****************************************************************
 ** TargetCollection_T_TargetManagement_types 
 ****************************************************************/
extern int TargetCollection_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TargetCollection_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetCollection_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetCollection_T_TargetManagement_types_double_conversion_allowed();
extern int TargetCollection_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_TargetCollection_T_TargetManagement_types_long_conversion_allowed();
extern int TargetCollection_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_TargetCollection_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TargetCollection_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TargetCollection_T_TargetManagement_types(void *pValue);
extern int release_TargetCollection_T_TargetManagement_types(void *pValue);
extern int copy_TargetCollection_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TargetCollection_T_TargetManagement_types_Utils;

/****************************************************************
 ** TargetIteratorAkku_TargetLimits_Pkg 
 ****************************************************************/
extern int TargetIteratorAkku_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TargetIteratorAkku_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TargetIteratorAkku_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TargetIteratorAkku_TargetLimits_Pkg_double_conversion_allowed();
extern int TargetIteratorAkku_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TargetIteratorAkku_TargetLimits_Pkg_long_conversion_allowed();
extern int TargetIteratorAkku_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TargetIteratorAkku_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TargetIteratorAkku_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TargetIteratorAkku_TargetLimits_Pkg(void *pValue);
extern int release_TargetIteratorAkku_TargetLimits_Pkg(void *pValue);
extern int copy_TargetIteratorAkku_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TargetIteratorAkku_TargetLimits_Pkg_Utils;

/****************************************************************
 ** TargetType_T_TargetManagement_types 
 ****************************************************************/
extern int TargetType_T_TargetManagement_types_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TargetType_T_TargetManagement_types_string(const char *str, char **endptr);
extern int string_to_TargetType_T_TargetManagement_types(const char *str, void *pValue, char **endptr);
extern int is_TargetType_T_TargetManagement_types_double_conversion_allowed();
extern int TargetType_T_TargetManagement_types_to_double(const void *pValue, double *nValue);
extern int is_TargetType_T_TargetManagement_types_long_conversion_allowed();
extern int TargetType_T_TargetManagement_types_to_long(const void *pValue, long *nValue);
extern void compare_TargetType_T_TargetManagement_types(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TargetType_T_TargetManagement_types_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TargetType_T_TargetManagement_types(void *pValue);
extern int release_TargetType_T_TargetManagement_types(void *pValue);
extern int copy_TargetType_T_TargetManagement_types(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TargetType_T_TargetManagement_types_Utils;

/****************************************************************
 ** Telegram_T_BG_Types_Pkg 
 ****************************************************************/
extern int Telegram_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Telegram_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Telegram_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Telegram_T_BG_Types_Pkg_double_conversion_allowed();
extern int Telegram_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Telegram_T_BG_Types_Pkg_long_conversion_allowed();
extern int Telegram_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Telegram_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Telegram_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Telegram_T_BG_Types_Pkg(void *pValue);
extern int release_Telegram_T_BG_Types_Pkg(void *pValue);
extern int copy_Telegram_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Telegram_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramArray_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramArray_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TelegramArray_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramArray_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramArray_T_BG_Types_Pkg_double_conversion_allowed();
extern int TelegramArray_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TelegramArray_T_BG_Types_Pkg_long_conversion_allowed();
extern int TelegramArray_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TelegramArray_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TelegramArray_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TelegramArray_T_BG_Types_Pkg(void *pValue);
extern int release_TelegramArray_T_BG_Types_Pkg(void *pValue);
extern int copy_TelegramArray_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TelegramArray_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramHeader_T_BG_Types_Pkg 
 ****************************************************************/
extern int TelegramHeader_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TelegramHeader_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramHeader_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramHeader_T_BG_Types_Pkg_double_conversion_allowed();
extern int TelegramHeader_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TelegramHeader_T_BG_Types_Pkg_long_conversion_allowed();
extern int TelegramHeader_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TelegramHeader_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TelegramHeader_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TelegramHeader_T_BG_Types_Pkg(void *pValue);
extern int release_TelegramHeader_T_BG_Types_Pkg(void *pValue);
extern int copy_TelegramHeader_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TelegramHeader_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TelegramStore_T_Receive_TrackSide_Msg_Pkg 
 ****************************************************************/
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TelegramStore_T_Receive_TrackSide_Msg_Pkg_string(const char *str, char **endptr);
extern int string_to_TelegramStore_T_Receive_TrackSide_Msg_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TelegramStore_T_Receive_TrackSide_Msg_Pkg_double_conversion_allowed();
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TelegramStore_T_Receive_TrackSide_Msg_Pkg_long_conversion_allowed();
extern int TelegramStore_T_Receive_TrackSide_Msg_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TelegramStore_T_Receive_TrackSide_Msg_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TelegramStore_T_Receive_TrackSide_Msg_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TelegramStore_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int release_TelegramStore_T_Receive_TrackSide_Msg_Pkg(void *pValue);
extern int copy_TelegramStore_T_Receive_TrackSide_Msg_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TelegramStore_T_Receive_TrackSide_Msg_Pkg_Utils;

/****************************************************************
 ** telephoneNumber_T_Packet_TrainTypes_Pkg 
 ****************************************************************/
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_telephoneNumber_T_Packet_TrainTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_telephoneNumber_T_Packet_TrainTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_telephoneNumber_T_Packet_TrainTypes_Pkg_double_conversion_allowed();
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_telephoneNumber_T_Packet_TrainTypes_Pkg_long_conversion_allowed();
extern int telephoneNumber_T_Packet_TrainTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_telephoneNumber_T_Packet_TrainTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_telephoneNumber_T_Packet_TrainTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_telephoneNumber_T_Packet_TrainTypes_Pkg(void *pValue);
extern int release_telephoneNumber_T_Packet_TrainTypes_Pkg(void *pValue);
extern int copy_telephoneNumber_T_Packet_TrainTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_telephoneNumber_T_Packet_TrainTypes_Pkg_Utils;

/****************************************************************
 ** time_Type_MoRC_Pck 
 ****************************************************************/
extern int time_Type_MoRC_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_time_Type_MoRC_Pck_string(const char *str, char **endptr);
extern int string_to_time_Type_MoRC_Pck(const char *str, void *pValue, char **endptr);
extern int is_time_Type_MoRC_Pck_double_conversion_allowed();
extern int time_Type_MoRC_Pck_to_double(const void *pValue, double *nValue);
extern int is_time_Type_MoRC_Pck_long_conversion_allowed();
extern int time_Type_MoRC_Pck_to_long(const void *pValue, long *nValue);
extern void compare_time_Type_MoRC_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_time_Type_MoRC_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_time_Type_MoRC_Pck(void *pValue);
extern int release_time_Type_MoRC_Pck(void *pValue);
extern int copy_time_Type_MoRC_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_time_Type_MoRC_Pck_Utils;

/****************************************************************
 ** TIU_commandStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_commandStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_commandStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_commandStatus_T_TIU_Types_Pkg_double_conversion_allowed();
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_commandStatus_T_TIU_Types_Pkg_long_conversion_allowed();
extern int TIU_commandStatus_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_commandStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_commandStatus_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_commandStatus_T_TIU_Types_Pkg(void *pValue);
extern int release_TIU_commandStatus_T_TIU_Types_Pkg(void *pValue);
extern int copy_TIU_commandStatus_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_commandStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** TIU_Input_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Input_msg_API_TIU_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_Input_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Input_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Input_msg_API_TIU_Pkg_double_conversion_allowed();
extern int TIU_Input_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_Input_msg_API_TIU_Pkg_long_conversion_allowed();
extern int TIU_Input_msg_API_TIU_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_Input_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_Input_msg_API_TIU_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_Input_msg_API_TIU_Pkg(void *pValue);
extern int release_TIU_Input_msg_API_TIU_Pkg(void *pValue);
extern int copy_TIU_Input_msg_API_TIU_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_Input_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** TIU_Output_msg_API_TIU_Pkg 
 ****************************************************************/
extern int TIU_Output_msg_API_TIU_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_Output_msg_API_TIU_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_Output_msg_API_TIU_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_Output_msg_API_TIU_Pkg_double_conversion_allowed();
extern int TIU_Output_msg_API_TIU_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_Output_msg_API_TIU_Pkg_long_conversion_allowed();
extern int TIU_Output_msg_API_TIU_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_Output_msg_API_TIU_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_Output_msg_API_TIU_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_Output_msg_API_TIU_Pkg(void *pValue);
extern int release_TIU_Output_msg_API_TIU_Pkg(void *pValue);
extern int copy_TIU_Output_msg_API_TIU_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_Output_msg_API_TIU_Pkg_Utils;

/****************************************************************
 ** TIU_trainStatus_T_TIU_Types_Pkg 
 ****************************************************************/
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TIU_trainStatus_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TIU_trainStatus_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TIU_trainStatus_T_TIU_Types_Pkg_double_conversion_allowed();
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TIU_trainStatus_T_TIU_Types_Pkg_long_conversion_allowed();
extern int TIU_trainStatus_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TIU_trainStatus_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TIU_trainStatus_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TIU_trainStatus_T_TIU_Types_Pkg(void *pValue);
extern int release_TIU_trainStatus_T_TIU_Types_Pkg(void *pValue);
extern int copy_TIU_trainStatus_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TIU_trainStatus_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** TrackSide_ForCheck_T_Common_Types_Pkg 
 ****************************************************************/
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrackSide_ForCheck_T_Common_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrackSide_ForCheck_T_Common_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrackSide_ForCheck_T_Common_Types_Pkg_double_conversion_allowed();
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TrackSide_ForCheck_T_Common_Types_Pkg_long_conversion_allowed();
extern int TrackSide_ForCheck_T_Common_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TrackSide_ForCheck_T_Common_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrackSide_ForCheck_T_Common_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrackSide_ForCheck_T_Common_Types_Pkg(void *pValue);
extern int release_TrackSide_ForCheck_T_Common_Types_Pkg(void *pValue);
extern int copy_TrackSide_ForCheck_T_Common_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrackSide_ForCheck_T_Common_Types_Pkg_Utils;

/****************************************************************
 ** TractionDeltaTriple_TargetLimits_Pkg 
 ****************************************************************/
extern int TractionDeltaTriple_TargetLimits_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TractionDeltaTriple_TargetLimits_Pkg_string(const char *str, char **endptr);
extern int string_to_TractionDeltaTriple_TargetLimits_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TractionDeltaTriple_TargetLimits_Pkg_double_conversion_allowed();
extern int TractionDeltaTriple_TargetLimits_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TractionDeltaTriple_TargetLimits_Pkg_long_conversion_allowed();
extern int TractionDeltaTriple_TargetLimits_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TractionDeltaTriple_TargetLimits_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TractionDeltaTriple_TargetLimits_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TractionDeltaTriple_TargetLimits_Pkg(void *pValue);
extern int release_TractionDeltaTriple_TargetLimits_Pkg(void *pValue);
extern int copy_TractionDeltaTriple_TargetLimits_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TractionDeltaTriple_TargetLimits_Pkg_Utils;

/****************************************************************
 ** trainData_Events_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Events_T_trainData_Types_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_Events_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Events_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Events_T_trainData_Types_pkg_double_conversion_allowed();
extern int trainData_Events_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_Events_T_trainData_Types_pkg_long_conversion_allowed();
extern int trainData_Events_T_trainData_Types_pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_Events_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_Events_T_trainData_Types_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_Events_T_trainData_Types_pkg(void *pValue);
extern int release_trainData_Events_T_trainData_Types_pkg(void *pValue);
extern int copy_trainData_Events_T_trainData_Types_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_Events_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainData_internal_t_SDM_Types_Pkg 
 ****************************************************************/
extern int trainData_internal_t_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_internal_t_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_internal_t_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_internal_t_SDM_Types_Pkg_double_conversion_allowed();
extern int trainData_internal_t_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_internal_t_SDM_Types_Pkg_long_conversion_allowed();
extern int trainData_internal_t_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_internal_t_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_internal_t_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_internal_t_SDM_Types_Pkg(void *pValue);
extern int release_trainData_internal_t_SDM_Types_Pkg(void *pValue);
extern int copy_trainData_internal_t_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_internal_t_SDM_Types_Pkg_Utils;

/****************************************************************
 ** trainData_T_TIU_Types_Pkg 
 ****************************************************************/
extern int trainData_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_trainData_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_T_TIU_Types_Pkg_double_conversion_allowed();
extern int trainData_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_T_TIU_Types_Pkg_long_conversion_allowed();
extern int trainData_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_T_TIU_Types_Pkg(void *pValue);
extern int release_trainData_T_TIU_Types_Pkg(void *pValue);
extern int copy_trainData_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** trainData_Trigger_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainData_Trigger_T_trainData_Types_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainData_Trigger_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainData_Trigger_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainData_Trigger_T_trainData_Types_pkg_double_conversion_allowed();
extern int trainData_Trigger_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int is_trainData_Trigger_T_trainData_Types_pkg_long_conversion_allowed();
extern int trainData_Trigger_T_trainData_Types_pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainData_Trigger_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainData_Trigger_T_trainData_Types_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainData_Trigger_T_trainData_Types_pkg(void *pValue);
extern int release_trainData_Trigger_T_trainData_Types_pkg(void *pValue);
extern int copy_trainData_Trigger_T_trainData_Types_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainData_Trigger_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** trainDataStatus_T_trainData_Types_pkg 
 ****************************************************************/
extern int trainDataStatus_T_trainData_Types_pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainDataStatus_T_trainData_Types_pkg_string(const char *str, char **endptr);
extern int string_to_trainDataStatus_T_trainData_Types_pkg(const char *str, void *pValue, char **endptr);
extern int is_trainDataStatus_T_trainData_Types_pkg_double_conversion_allowed();
extern int trainDataStatus_T_trainData_Types_pkg_to_double(const void *pValue, double *nValue);
extern int is_trainDataStatus_T_trainData_Types_pkg_long_conversion_allowed();
extern int trainDataStatus_T_trainData_Types_pkg_to_long(const void *pValue, long *nValue);
extern void compare_trainDataStatus_T_trainData_Types_pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainDataStatus_T_trainData_Types_pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainDataStatus_T_trainData_Types_pkg(void *pValue);
extern int release_trainDataStatus_T_trainData_Types_pkg(void *pValue);
extern int copy_trainDataStatus_T_trainData_Types_pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainDataStatus_T_trainData_Types_pkg_Utils;

/****************************************************************
 ** TrainLocations_real_T_SDM_Types_Pkg 
 ****************************************************************/
extern int TrainLocations_real_T_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrainLocations_real_T_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainLocations_real_T_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainLocations_real_T_SDM_Types_Pkg_double_conversion_allowed();
extern int TrainLocations_real_T_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TrainLocations_real_T_SDM_Types_Pkg_long_conversion_allowed();
extern int TrainLocations_real_T_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TrainLocations_real_T_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrainLocations_real_T_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrainLocations_real_T_SDM_Types_Pkg(void *pValue);
extern int release_TrainLocations_real_T_SDM_Types_Pkg(void *pValue);
extern int copy_TrainLocations_real_T_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrainLocations_real_T_SDM_Types_Pkg_Utils;

/****************************************************************
 ** trainPosition_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPosition_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainPosition_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPosition_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPosition_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int trainPosition_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_trainPosition_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int trainPosition_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_trainPosition_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainPosition_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainPosition_T_TrainPosition_Types_Pck(void *pValue);
extern int release_trainPosition_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_trainPosition_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainPosition_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** trainPositionInfo_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainPositionInfo_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainPositionInfo_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainPositionInfo_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_trainPositionInfo_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int trainPositionInfo_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_trainPositionInfo_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainPositionInfo_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainPositionInfo_T_TrainPosition_Types_Pck(void *pValue);
extern int release_trainPositionInfo_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_trainPositionInfo_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainPositionInfo_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** trainProperties_T_TrainPosition_Types_Pck 
 ****************************************************************/
extern int trainProperties_T_TrainPosition_Types_Pck_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_trainProperties_T_TrainPosition_Types_Pck_string(const char *str, char **endptr);
extern int string_to_trainProperties_T_TrainPosition_Types_Pck(const char *str, void *pValue, char **endptr);
extern int is_trainProperties_T_TrainPosition_Types_Pck_double_conversion_allowed();
extern int trainProperties_T_TrainPosition_Types_Pck_to_double(const void *pValue, double *nValue);
extern int is_trainProperties_T_TrainPosition_Types_Pck_long_conversion_allowed();
extern int trainProperties_T_TrainPosition_Types_Pck_to_long(const void *pValue, long *nValue);
extern void compare_trainProperties_T_TrainPosition_Types_Pck(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_trainProperties_T_TrainPosition_Types_Pck_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_trainProperties_T_TrainPosition_Types_Pck(void *pValue);
extern int release_trainProperties_T_TrainPosition_Types_Pck(void *pValue);
extern int copy_trainProperties_T_TrainPosition_Types_Pck(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_trainProperties_T_TrainPosition_Types_Pck_Utils;

/****************************************************************
 ** TrainToTrackStatus_T_BG_Types_Pkg 
 ****************************************************************/
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TrainToTrackStatus_T_BG_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_TrainToTrackStatus_T_BG_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TrainToTrackStatus_T_BG_Types_Pkg_double_conversion_allowed();
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TrainToTrackStatus_T_BG_Types_Pkg_long_conversion_allowed();
extern int TrainToTrackStatus_T_BG_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TrainToTrackStatus_T_BG_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TrainToTrackStatus_T_BG_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TrainToTrackStatus_T_BG_Types_Pkg(void *pValue);
extern int release_TrainToTrackStatus_T_BG_Types_Pkg(void *pValue);
extern int copy_TrainToTrackStatus_T_BG_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TrainToTrackStatus_T_BG_Types_Pkg_Utils;

/****************************************************************
 ** TransitionBuffer_T_InformationFilter_Pkg 
 ****************************************************************/
extern int TransitionBuffer_T_InformationFilter_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TransitionBuffer_T_InformationFilter_Pkg_string(const char *str, char **endptr);
extern int string_to_TransitionBuffer_T_InformationFilter_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TransitionBuffer_T_InformationFilter_Pkg_double_conversion_allowed();
extern int TransitionBuffer_T_InformationFilter_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TransitionBuffer_T_InformationFilter_Pkg_long_conversion_allowed();
extern int TransitionBuffer_T_InformationFilter_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TransitionBuffer_T_InformationFilter_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TransitionBuffer_T_InformationFilter_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TransitionBuffer_T_InformationFilter_Pkg(void *pValue);
extern int release_TransitionBuffer_T_InformationFilter_Pkg(void *pValue);
extern int copy_TransitionBuffer_T_InformationFilter_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TransitionBuffer_T_InformationFilter_Pkg_Utils;

/****************************************************************
 ** TSM_revokeCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TSM_revokeCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_revokeCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_revokeCond_T_SDM_Commands_Pkg_double_conversion_allowed();
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TSM_revokeCond_T_SDM_Commands_Pkg_long_conversion_allowed();
extern int TSM_revokeCond_T_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TSM_revokeCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TSM_revokeCond_T_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TSM_revokeCond_T_SDM_Commands_Pkg(void *pValue);
extern int release_TSM_revokeCond_T_SDM_Commands_Pkg(void *pValue);
extern int copy_TSM_revokeCond_T_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TSM_revokeCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** TSM_triggerCond_T_SDM_Commands_Pkg 
 ****************************************************************/
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_TSM_triggerCond_T_SDM_Commands_Pkg_string(const char *str, char **endptr);
extern int string_to_TSM_triggerCond_T_SDM_Commands_Pkg(const char *str, void *pValue, char **endptr);
extern int is_TSM_triggerCond_T_SDM_Commands_Pkg_double_conversion_allowed();
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_double(const void *pValue, double *nValue);
extern int is_TSM_triggerCond_T_SDM_Commands_Pkg_long_conversion_allowed();
extern int TSM_triggerCond_T_SDM_Commands_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_TSM_triggerCond_T_SDM_Commands_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_TSM_triggerCond_T_SDM_Commands_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_TSM_triggerCond_T_SDM_Commands_Pkg(void *pValue);
extern int release_TSM_triggerCond_T_SDM_Commands_Pkg(void *pValue);
extern int copy_TSM_triggerCond_T_SDM_Commands_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_TSM_triggerCond_T_SDM_Commands_Pkg_Utils;

/****************************************************************
 ** Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(void *pValue);
extern int release_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(void *pValue);
extern int copy_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Type_I_train_and_brake_inhibition_with_distance_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** Type_I_train_commands_T_TIU_Types_Pkg 
 ****************************************************************/
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_Type_I_train_commands_T_TIU_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_Type_I_train_commands_T_TIU_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_Type_I_train_commands_T_TIU_Types_Pkg_double_conversion_allowed();
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_Type_I_train_commands_T_TIU_Types_Pkg_long_conversion_allowed();
extern int Type_I_train_commands_T_TIU_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_Type_I_train_commands_T_TIU_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_Type_I_train_commands_T_TIU_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_Type_I_train_commands_T_TIU_Types_Pkg(void *pValue);
extern int release_Type_I_train_commands_T_TIU_Types_Pkg(void *pValue);
extern int copy_Type_I_train_commands_T_TIU_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_Type_I_train_commands_T_TIU_Types_Pkg_Utils;

/****************************************************************
 ** v_BrakeSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_v_BrakeSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_BrakeSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_BrakeSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_v_BrakeSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int v_BrakeSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_v_BrakeSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_v_BrakeSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_v_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_v_BrakeSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_v_BrakeSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_v_BrakeSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** V_DIFF 
 ****************************************************************/
extern int V_DIFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_DIFF_string(const char *str, char **endptr);
extern int string_to_V_DIFF(const char *str, void *pValue, char **endptr);
extern int is_V_DIFF_double_conversion_allowed();
extern int V_DIFF_to_double(const void *pValue, double *nValue);
extern int is_V_DIFF_long_conversion_allowed();
extern int V_DIFF_to_long(const void *pValue, long *nValue);
extern void compare_V_DIFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_DIFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_DIFF(void *pValue);
extern int release_V_DIFF(void *pValue);
extern int copy_V_DIFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_DIFF_Utils;

/****************************************************************
 ** V_internal_real_Type_SDM_Types_Pkg 
 ****************************************************************/
extern int V_internal_real_Type_SDM_Types_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_internal_real_Type_SDM_Types_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_real_Type_SDM_Types_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_real_Type_SDM_Types_Pkg_double_conversion_allowed();
extern int V_internal_real_Type_SDM_Types_Pkg_to_double(const void *pValue, double *nValue);
extern int is_V_internal_real_Type_SDM_Types_Pkg_long_conversion_allowed();
extern int V_internal_real_Type_SDM_Types_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_V_internal_real_Type_SDM_Types_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_internal_real_Type_SDM_Types_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int release_V_internal_real_Type_SDM_Types_Pkg(void *pValue);
extern int copy_V_internal_real_Type_SDM_Types_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_internal_real_Type_SDM_Types_Pkg_Utils;

/****************************************************************
 ** V_internal_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_internal_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_internal_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_internal_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_V_internal_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int V_internal_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_V_internal_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_internal_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_V_internal_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_V_internal_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_internal_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** v_KvSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_KvSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_v_KvSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_KvSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_KvSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int v_KvSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_v_KvSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int v_KvSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_v_KvSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_v_KvSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_v_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_v_KvSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_v_KvSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_v_KvSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** V_LOA 
 ****************************************************************/
extern int V_LOA_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_LOA_string(const char *str, char **endptr);
extern int string_to_V_LOA(const char *str, void *pValue, char **endptr);
extern int is_V_LOA_double_conversion_allowed();
extern int V_LOA_to_double(const void *pValue, double *nValue);
extern int is_V_LOA_long_conversion_allowed();
extern int V_LOA_to_long(const void *pValue, long *nValue);
extern void compare_V_LOA(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_LOA_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_LOA(void *pValue);
extern int release_V_LOA(void *pValue);
extern int copy_V_LOA(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_LOA_Utils;

/****************************************************************
 ** V_MAIN 
 ****************************************************************/
extern int V_MAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_MAIN_string(const char *str, char **endptr);
extern int string_to_V_MAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAIN_double_conversion_allowed();
extern int V_MAIN_to_double(const void *pValue, double *nValue);
extern int is_V_MAIN_long_conversion_allowed();
extern int V_MAIN_to_long(const void *pValue, long *nValue);
extern void compare_V_MAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_MAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_MAIN(void *pValue);
extern int release_V_MAIN(void *pValue);
extern int copy_V_MAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_MAIN_Utils;

/****************************************************************
 ** V_MAMODE 
 ****************************************************************/
extern int V_MAMODE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_MAMODE_string(const char *str, char **endptr);
extern int string_to_V_MAMODE(const char *str, void *pValue, char **endptr);
extern int is_V_MAMODE_double_conversion_allowed();
extern int V_MAMODE_to_double(const void *pValue, double *nValue);
extern int is_V_MAMODE_long_conversion_allowed();
extern int V_MAMODE_to_long(const void *pValue, long *nValue);
extern void compare_V_MAMODE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_MAMODE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_MAMODE(void *pValue);
extern int release_V_MAMODE(void *pValue);
extern int copy_V_MAMODE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_MAMODE_Utils;

/****************************************************************
 ** V_MAXTRAIN 
 ****************************************************************/
extern int V_MAXTRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_MAXTRAIN_string(const char *str, char **endptr);
extern int string_to_V_MAXTRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_MAXTRAIN_double_conversion_allowed();
extern int V_MAXTRAIN_to_double(const void *pValue, double *nValue);
extern int is_V_MAXTRAIN_long_conversion_allowed();
extern int V_MAXTRAIN_to_long(const void *pValue, long *nValue);
extern void compare_V_MAXTRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_MAXTRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_MAXTRAIN(void *pValue);
extern int release_V_MAXTRAIN(void *pValue);
extern int copy_V_MAXTRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_MAXTRAIN_Utils;

/****************************************************************
 ** v_MergedSteps_t_SDMConversionModelPkg 
 ****************************************************************/
extern int v_MergedSteps_t_SDMConversionModelPkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_v_MergedSteps_t_SDMConversionModelPkg_string(const char *str, char **endptr);
extern int string_to_v_MergedSteps_t_SDMConversionModelPkg(const char *str, void *pValue, char **endptr);
extern int is_v_MergedSteps_t_SDMConversionModelPkg_double_conversion_allowed();
extern int v_MergedSteps_t_SDMConversionModelPkg_to_double(const void *pValue, double *nValue);
extern int is_v_MergedSteps_t_SDMConversionModelPkg_long_conversion_allowed();
extern int v_MergedSteps_t_SDMConversionModelPkg_to_long(const void *pValue, long *nValue);
extern void compare_v_MergedSteps_t_SDMConversionModelPkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_v_MergedSteps_t_SDMConversionModelPkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_v_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int release_v_MergedSteps_t_SDMConversionModelPkg(void *pValue);
extern int copy_v_MergedSteps_t_SDMConversionModelPkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_v_MergedSteps_t_SDMConversionModelPkg_Utils;

/****************************************************************
 ** V_NVALLOWOVTRP 
 ****************************************************************/
extern int V_NVALLOWOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVALLOWOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVALLOWOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVALLOWOVTRP_double_conversion_allowed();
extern int V_NVALLOWOVTRP_to_double(const void *pValue, double *nValue);
extern int is_V_NVALLOWOVTRP_long_conversion_allowed();
extern int V_NVALLOWOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_V_NVALLOWOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVALLOWOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVALLOWOVTRP(void *pValue);
extern int release_V_NVALLOWOVTRP(void *pValue);
extern int copy_V_NVALLOWOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVALLOWOVTRP_Utils;

/****************************************************************
 ** V_NVKVINT 
 ****************************************************************/
extern int V_NVKVINT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVKVINT_string(const char *str, char **endptr);
extern int string_to_V_NVKVINT(const char *str, void *pValue, char **endptr);
extern int is_V_NVKVINT_double_conversion_allowed();
extern int V_NVKVINT_to_double(const void *pValue, double *nValue);
extern int is_V_NVKVINT_long_conversion_allowed();
extern int V_NVKVINT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVKVINT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVKVINT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVKVINT(void *pValue);
extern int release_V_NVKVINT(void *pValue);
extern int copy_V_NVKVINT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVKVINT_Utils;

/****************************************************************
 ** V_NVLIMSUPERV 
 ****************************************************************/
extern int V_NVLIMSUPERV_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVLIMSUPERV_string(const char *str, char **endptr);
extern int string_to_V_NVLIMSUPERV(const char *str, void *pValue, char **endptr);
extern int is_V_NVLIMSUPERV_double_conversion_allowed();
extern int V_NVLIMSUPERV_to_double(const void *pValue, double *nValue);
extern int is_V_NVLIMSUPERV_long_conversion_allowed();
extern int V_NVLIMSUPERV_to_long(const void *pValue, long *nValue);
extern void compare_V_NVLIMSUPERV(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVLIMSUPERV_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVLIMSUPERV(void *pValue);
extern int release_V_NVLIMSUPERV(void *pValue);
extern int copy_V_NVLIMSUPERV(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVLIMSUPERV_Utils;

/****************************************************************
 ** V_NVONSIGHT 
 ****************************************************************/
extern int V_NVONSIGHT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVONSIGHT_string(const char *str, char **endptr);
extern int string_to_V_NVONSIGHT(const char *str, void *pValue, char **endptr);
extern int is_V_NVONSIGHT_double_conversion_allowed();
extern int V_NVONSIGHT_to_double(const void *pValue, double *nValue);
extern int is_V_NVONSIGHT_long_conversion_allowed();
extern int V_NVONSIGHT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVONSIGHT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVONSIGHT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVONSIGHT(void *pValue);
extern int release_V_NVONSIGHT(void *pValue);
extern int copy_V_NVONSIGHT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVONSIGHT_Utils;

/****************************************************************
 ** V_NVREL 
 ****************************************************************/
extern int V_NVREL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVREL_string(const char *str, char **endptr);
extern int string_to_V_NVREL(const char *str, void *pValue, char **endptr);
extern int is_V_NVREL_double_conversion_allowed();
extern int V_NVREL_to_double(const void *pValue, double *nValue);
extern int is_V_NVREL_long_conversion_allowed();
extern int V_NVREL_to_long(const void *pValue, long *nValue);
extern void compare_V_NVREL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVREL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVREL(void *pValue);
extern int release_V_NVREL(void *pValue);
extern int copy_V_NVREL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVREL_Utils;

/****************************************************************
 ** V_NVSHUNT 
 ****************************************************************/
extern int V_NVSHUNT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVSHUNT_string(const char *str, char **endptr);
extern int string_to_V_NVSHUNT(const char *str, void *pValue, char **endptr);
extern int is_V_NVSHUNT_double_conversion_allowed();
extern int V_NVSHUNT_to_double(const void *pValue, double *nValue);
extern int is_V_NVSHUNT_long_conversion_allowed();
extern int V_NVSHUNT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVSHUNT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVSHUNT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVSHUNT(void *pValue);
extern int release_V_NVSHUNT(void *pValue);
extern int copy_V_NVSHUNT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVSHUNT_Utils;

/****************************************************************
 ** V_NVSTFF 
 ****************************************************************/
extern int V_NVSTFF_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVSTFF_string(const char *str, char **endptr);
extern int string_to_V_NVSTFF(const char *str, void *pValue, char **endptr);
extern int is_V_NVSTFF_double_conversion_allowed();
extern int V_NVSTFF_to_double(const void *pValue, double *nValue);
extern int is_V_NVSTFF_long_conversion_allowed();
extern int V_NVSTFF_to_long(const void *pValue, long *nValue);
extern void compare_V_NVSTFF(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVSTFF_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVSTFF(void *pValue);
extern int release_V_NVSTFF(void *pValue);
extern int copy_V_NVSTFF(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVSTFF_Utils;

/****************************************************************
 ** V_NVSUPOVTRP 
 ****************************************************************/
extern int V_NVSUPOVTRP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVSUPOVTRP_string(const char *str, char **endptr);
extern int string_to_V_NVSUPOVTRP(const char *str, void *pValue, char **endptr);
extern int is_V_NVSUPOVTRP_double_conversion_allowed();
extern int V_NVSUPOVTRP_to_double(const void *pValue, double *nValue);
extern int is_V_NVSUPOVTRP_long_conversion_allowed();
extern int V_NVSUPOVTRP_to_long(const void *pValue, long *nValue);
extern void compare_V_NVSUPOVTRP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVSUPOVTRP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVSUPOVTRP(void *pValue);
extern int release_V_NVSUPOVTRP(void *pValue);
extern int copy_V_NVSUPOVTRP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVSUPOVTRP_Utils;

/****************************************************************
 ** V_NVUNFIT 
 ****************************************************************/
extern int V_NVUNFIT_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_NVUNFIT_string(const char *str, char **endptr);
extern int string_to_V_NVUNFIT(const char *str, void *pValue, char **endptr);
extern int is_V_NVUNFIT_double_conversion_allowed();
extern int V_NVUNFIT_to_double(const void *pValue, double *nValue);
extern int is_V_NVUNFIT_long_conversion_allowed();
extern int V_NVUNFIT_to_long(const void *pValue, long *nValue);
extern void compare_V_NVUNFIT(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_NVUNFIT_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_NVUNFIT(void *pValue);
extern int release_V_NVUNFIT(void *pValue);
extern int copy_V_NVUNFIT(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_NVUNFIT_Utils;

/****************************************************************
 ** V_odometry_Type_Obu_BasicTypes_Pkg 
 ****************************************************************/
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_odometry_Type_Obu_BasicTypes_Pkg_string(const char *str, char **endptr);
extern int string_to_V_odometry_Type_Obu_BasicTypes_Pkg(const char *str, void *pValue, char **endptr);
extern int is_V_odometry_Type_Obu_BasicTypes_Pkg_double_conversion_allowed();
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_double(const void *pValue, double *nValue);
extern int is_V_odometry_Type_Obu_BasicTypes_Pkg_long_conversion_allowed();
extern int V_odometry_Type_Obu_BasicTypes_Pkg_to_long(const void *pValue, long *nValue);
extern void compare_V_odometry_Type_Obu_BasicTypes_Pkg(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_odometry_Type_Obu_BasicTypes_Pkg_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_odometry_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int release_V_odometry_Type_Obu_BasicTypes_Pkg(void *pValue);
extern int copy_V_odometry_Type_Obu_BasicTypes_Pkg(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_odometry_Type_Obu_BasicTypes_Pkg_Utils;

/****************************************************************
 ** V_RELEASEDP 
 ****************************************************************/
extern int V_RELEASEDP_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_RELEASEDP_string(const char *str, char **endptr);
extern int string_to_V_RELEASEDP(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEDP_double_conversion_allowed();
extern int V_RELEASEDP_to_double(const void *pValue, double *nValue);
extern int is_V_RELEASEDP_long_conversion_allowed();
extern int V_RELEASEDP_to_long(const void *pValue, long *nValue);
extern void compare_V_RELEASEDP(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_RELEASEDP_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_RELEASEDP(void *pValue);
extern int release_V_RELEASEDP(void *pValue);
extern int copy_V_RELEASEDP(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_RELEASEDP_Utils;

/****************************************************************
 ** V_RELEASEOL 
 ****************************************************************/
extern int V_RELEASEOL_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_RELEASEOL_string(const char *str, char **endptr);
extern int string_to_V_RELEASEOL(const char *str, void *pValue, char **endptr);
extern int is_V_RELEASEOL_double_conversion_allowed();
extern int V_RELEASEOL_to_double(const void *pValue, double *nValue);
extern int is_V_RELEASEOL_long_conversion_allowed();
extern int V_RELEASEOL_to_long(const void *pValue, long *nValue);
extern void compare_V_RELEASEOL(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_RELEASEOL_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_RELEASEOL(void *pValue);
extern int release_V_RELEASEOL(void *pValue);
extern int copy_V_RELEASEOL(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_RELEASEOL_Utils;

/****************************************************************
 ** V_REVERSE 
 ****************************************************************/
extern int V_REVERSE_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_REVERSE_string(const char *str, char **endptr);
extern int string_to_V_REVERSE(const char *str, void *pValue, char **endptr);
extern int is_V_REVERSE_double_conversion_allowed();
extern int V_REVERSE_to_double(const void *pValue, double *nValue);
extern int is_V_REVERSE_long_conversion_allowed();
extern int V_REVERSE_to_long(const void *pValue, long *nValue);
extern void compare_V_REVERSE(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_REVERSE_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_REVERSE(void *pValue);
extern int release_V_REVERSE(void *pValue);
extern int copy_V_REVERSE(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_REVERSE_Utils;

/****************************************************************
 ** V_STATIC 
 ****************************************************************/
extern int V_STATIC_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_STATIC_string(const char *str, char **endptr);
extern int string_to_V_STATIC(const char *str, void *pValue, char **endptr);
extern int is_V_STATIC_double_conversion_allowed();
extern int V_STATIC_to_double(const void *pValue, double *nValue);
extern int is_V_STATIC_long_conversion_allowed();
extern int V_STATIC_to_long(const void *pValue, long *nValue);
extern void compare_V_STATIC(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_STATIC_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_STATIC(void *pValue);
extern int release_V_STATIC(void *pValue);
extern int copy_V_STATIC(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_STATIC_Utils;

/****************************************************************
 ** V_TRAIN 
 ****************************************************************/
extern int V_TRAIN_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_TRAIN_string(const char *str, char **endptr);
extern int string_to_V_TRAIN(const char *str, void *pValue, char **endptr);
extern int is_V_TRAIN_double_conversion_allowed();
extern int V_TRAIN_to_double(const void *pValue, double *nValue);
extern int is_V_TRAIN_long_conversion_allowed();
extern int V_TRAIN_to_long(const void *pValue, long *nValue);
extern void compare_V_TRAIN(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_TRAIN_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_TRAIN(void *pValue);
extern int release_V_TRAIN(void *pValue);
extern int copy_V_TRAIN(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_TRAIN_Utils;

/****************************************************************
 ** V_TSR 
 ****************************************************************/
extern int V_TSR_to_string(const void *pValue, PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int check_V_TSR_string(const char *str, char **endptr);
extern int string_to_V_TSR(const char *str, void *pValue, char **endptr);
extern int is_V_TSR_double_conversion_allowed();
extern int V_TSR_to_double(const void *pValue, double *nValue);
extern int is_V_TSR_long_conversion_allowed();
extern int V_TSR_to_long(const void *pValue, long *nValue);
extern void compare_V_TSR(int *nStatus, const void *pValue1, const void *pValue2, SimTolerance *pTol, const char *pszPath, PFN_STR_LIST_APPEND pfnStrListAppend, void *pListErrPaths);
extern int get_V_TSR_signature(PFN_STR_APPEND pfnStrAppend, void *pStrObj);
extern int init_V_TSR(void *pValue);
extern int release_V_TSR(void *pValue);
extern int copy_V_TSR(void *pToValue, const void *pFromValue);
extern SimTypeUtils _Type_V_TSR_Utils;


#endif /*OPENETCS_EVC_TYPES_CONVERSION */
